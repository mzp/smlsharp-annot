structure Vector
: sig type 'a vector = int * int val fromList : ['a .'a list -> int * int] end
structure Array
: sig
    type 'a array = 'a Vector.vector
    type 'a vector = int * int
    val fromList : ['a .'a list -> int * int]
  end
signature VECTOR =
sig type 'a vector val fromList : ['a .'a list -> 'a vector] end
signature ARRAY =
sig type 'a array eqtype 'a vector val fromList : ['a .'a list -> 'a array] end
structure S
: sig
    structure V : VECTOR
    structure A : ARRAY
    sharing type V.vector = A.vector
  end
structure Vector
: sig type 'a vector val fromList : ['a .'a list -> 'a vector] end
structure Array
: sig
    type 'a array
    eqtype 'a vector
    val fromList : ['a .'a list -> 'a array]
  end
val vl = - : int Vector.vector
val al = - : int Array.array

