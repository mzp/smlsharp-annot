val L2V = fn : int list -> Word8Vector.vector
val V2L = fn : Word8Vector.vector -> int list
val fromList_0i = [] : int list
val fromList_1i = [1] : int list
val fromList_2i = [1,2] : int list
val tabulateFun = fn : int -> Word8.word
val tabulate0 = [] : int list
val tabulate1 = [0] : int list
val tabulate2 = [0,1] : int list
val tabulatem1 = [9] : int list
val length1 = 0 : int
val length2 = 1 : int
val length3 = 2 : int
val sub00 = 0wx9 : Word8Vector.elem
val sub0m1 = 0wx9 : Word8Vector.elem
val sub01 = 0wx9 : Word8Vector.elem
val sub10 = 0wx1 : Word8Vector.elem
val sub11 = 0wx9 : Word8Vector.elem
val sub1m1 = 0wx9 : Word8Vector.elem
val sub20 = 0wx1 : Word8Vector.elem
val sub21 = 0wx2 : Word8Vector.elem
val sub22 = 0wx9 : Word8Vector.elem
val concat0 = - : Word8Vector.vector
val concat10 = - : Word8Vector.vector
val concat200 = - : Word8Vector.vector
val concat11 = - : Word8Vector.vector
val concat201 = - : Word8Vector.vector
val concat210 = - : Word8Vector.vector
val concat211 = - : Word8Vector.vector
val concat222 = - : Word8Vector.vector
val concat3303 = - : Word8Vector.vector
val concat3333 = - : Word8Vector.vector
val testUpdate = fn : Word8Vector.vector * int * int -> int list
val update00 = [] : int list
val update0m1 = [] : int list
val update01 = [] : int list
val update10 = [1] : int list
val update11 = [2] : int list
val update1m1 = [2] : int list
val update20 = [1,2] : int list
val update21 = [1,2] : int list
val update22 = [1,2] : int list
val appiFun = fn : int * byte -> unit
val appi_0 = SOME () : unit option
01val appi_1 = SOME () : unit option
0112val appi_2 = SOME () : unit option
val appFun = fn : byte -> unit
val app0 = () : unit
1val app1 = () : unit
12val app2 = () : unit
123val app3 = () : unit
val mapiFun = fn : int * byte -> Word8.word
val mapi_0 = SOME - : Word8Vector.vector option
0val mapi_1 = SOME - : Word8Vector.vector option
01val mapi_2 = SOME - : Word8Vector.vector option
val mapFun = fn : byte -> byte
val map0 = - : Word8Vector.vector
1val map1 = - : Word8Vector.vector
12val map2 = - : Word8Vector.vector
123val map3 = - : Word8Vector.vector
val foldliFun = fn : ['a .int * 'a * 'a list -> 'a list]
val foldli_0 = [] : byte list
0val foldli_1 = [0wx1] : byte list
01val foldli_2 = [0wx2,0wx1] : byte list
val foldlFun = fn : ['a .'a * 'a list -> 'a list]
val foldl0 = [] : byte list
val foldl1 = [0wx1] : byte list
val foldl2 = [0wx2,0wx1] : byte list
val foldl3 = [0wx3,0wx2,0wx1] : byte list
val foldriFun = fn : ['a .int * 'a * 'a list -> 'a list]
val foldri_0 = [] : byte list
0val foldri_1 = [0wx1] : byte list
10val foldri_2 = [0wx1,0wx2] : byte list
val foldrFun = fn : ['a .'a * 'a list -> 'a list]
val foldr0 = [] : byte list
val foldr1 = [0wx1] : byte list
val foldr2 = [0wx1,0wx2] : byte list
val foldr3 = [0wx1,0wx2,0wx3] : byte list
val findiFun = fn : int * byte -> bool
val findi_0 = NONE : (int * Word8Vector.elem) option
0val findi_1F = NONE : (int * Word8Vector.elem) option
0val findi_1T = SOME (0,0wx9) : (int * Word8Vector.elem) option
01val findi_2F = NONE : (int * Word8Vector.elem) option
01val findi_2T1 = SOME (1,0wx9) : (int * Word8Vector.elem) option
0val findi_2T2 = SOME (0,0wx9) : (int * Word8Vector.elem) option
0val findi_2T3 = SOME (0,0wx9) : (int * Word8Vector.elem) option
val findFun = fn : byte -> bool
val find_0 = NONE : Word8Vector.elem option
1val find_1F = NONE : Word8Vector.elem option
9val find_1T = SOME 0wx9 : Word8Vector.elem option
12val find_2F = NONE : Word8Vector.elem option
19val find_2T1 = SOME 0wx9 : Word8Vector.elem option
9val find_2T2 = SOME 0wx9 : Word8Vector.elem option
9val find_2T3 = SOME 0wx9 : Word8Vector.elem option
val existsFun = fn : byte -> bool
val exists_0 = false : bool
1val exists_1F = false : bool
9val exists_1T = true : bool
12val exists_2F = false : bool
19val exists_2T1 = true : bool
9val exists_2T2 = true : bool
9val exists_2T3 = true : bool
val allFun = fn : byte -> bool
val all_0 = true : bool
1val all_1F = false : bool
9val all_1T = true : bool
1val all_2F1 = false : bool
1val all_2F2 = false : bool
91val all_2F3 = false : bool
99val all_2T = true : bool
val collateFun = fn : Word8.word * byte -> General.order
val collate00 = EQUAL : order
val collate01 = LESS : order
val collate10 = GREATER : order
val collate11L = LESS : order
val collate11E = EQUAL : order
val collate11G = GREATER : order
val collate12L = LESS : order
val collate12G = GREATER : order
val collate21L = LESS : order
val collate21G = GREATER : order
val collate22L1 = LESS : order
val collate22L2 = LESS : order
val collate22E = EQUAL : order
val collate22G1 = GREATER : order
val collate22G2 = GREATER : order
