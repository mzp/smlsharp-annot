val minChar0 = true : bool
val maxChar0 = true : bool
val maxOrd0 = true : bool
val ord0 = 0 : int
val ord1 = 1 : int
val chr064 = #"@" : Char.char
val chr_minus = #"a" : Char.char
val chr_max = #"a" : Char.char
val succ_A = #"B" : Char.char
val succ_min = #"\^A" : Char.char
val succ_max = #"a" : Char.char
val pred_A = #"@" : Char.char
val pred_min = #"a" : Char.char
val pred_max = #"\254" : Char.char
val lt_lt = true : bool
val lt_eq = false : bool
val lt_gt = false : bool
val lteq_lt = true : bool
val lteq_eq = true : bool
val lteq_gt = false : bool
val gt_lt = false : bool
val gt_eq = false : bool
val gt_gt = true : bool
val gteq_lt = false : bool
val gteq_eq = true : bool
val gteq_gt = true : bool
val compare_lt = LESS : order
val compare_eq = EQUAL : order
val compare_gt = GREATER : order
val contains_null = false : bool
val contains_f = false : bool
val contains_t = true : bool
val contains_ff = false : bool
val contains_ft = true : bool
val contains_tf = true : bool
val contains_ftf = true : bool
val contains_tft = true : bool
val notContains_null = true : bool
val notContains_f = true : bool
val notContains_t = false : bool
val notContains_ff = true : bool
val notContains_ft = false : bool
val notContains_tf = false : bool
val notContains_ftf = false : bool
val notContains_tft = false : bool
val toLower_A = #"a" : Char.char
val toLower_Z = #"z" : Char.char
val toLower_a = #"a" : Char.char
val toLower_z = #"z" : Char.char
val toLower_AT = #"@" : Char.char
val toLower_LQ = #"[" : Char.char
val toLower_BQ = #"`" : Char.char
val toLower_LB = #"{" : Char.char
val toUpper_A = #"A" : Char.char
val toUpper_Z = #"Z" : Char.char
val toUpper_a = #"A" : Char.char
val toUpper_z = #"Z" : Char.char
val toUpper_AT = #"@" : Char.char
val toUpper_LQ = #"[" : Char.char
val toUpper_BQ = #"`" : Char.char
val toUpper_LB = #"{" : Char.char
val isAlpha_A = true : bool
val isAlpha_Z = true : bool
val isAlpha_a = true : bool
val isAlpha_z = true : bool
val isAlpha_0 = false : bool
val isAlpha_9 = false : bool
val isAlpha_F = true : bool
val isAlpha_AT = false : bool
val isAlpha_LQ = false : bool
val isAlpha_BQ = false : bool
val isAlpha_LB = false : bool
val fromString_empty = NONE : Char.char option
val fromString_A = SOME #"A" : Char.char option
val fromString_ABC = SOME #"A" : Char.char option
val fromString_alert = SOME #"\a" : Char.char option
val fromString_backspace = SOME #"\b" : Char.char option
val fromString_tab = SOME #"\t" : Char.char option
val fromString_linefeed = SOME #"\n" : Char.char option
val fromString_vtab = SOME #"\v" : Char.char option
val fromString_formfeed = SOME #"\f" : Char.char option
val fromString_return = SOME #"\r" : Char.char option
val fromString_backslash = SOME #"\\" : Char.char option
val fromString_dquote = SOME #"\"" : Char.char option
val fromString_ctrl064 = SOME #"\^@" : Char.char option
val fromString_ctrl095 = SOME #"\^_" : Char.char option
val fromString_dec000 = SOME #"\^@" : Char.char option
val fromString_dec255 = SOME #"\255" : Char.char option
val fromString_multiBySpace = SOME #"d" : Char.char option
val fromString_multiByTab = SOME #"d" : Char.char option
val fromString_multiByNewline = SOME #"d" : Char.char option
val fromString_multiByFormfeed = SOME #"d" : Char.char option
val fromString_invalidEscape = NONE : Char.char option
val scanTest = fn : string -> (Char.char * char list) option
val scan_empty = NONE : (Char.char * char list) option
val scan_A = SOME (#"A", []) : (Char.char * char list) option
val scan_ABC = SOME (#"A", [#"B", #"C"]) : (Char.char * char list) option
val scan_alert = SOME (#"\a", []) : (Char.char * char list) option
val scan_backspace = SOME (#"\b", []) : (Char.char * char list) option
val scan_tab = SOME (#"\t", []) : (Char.char * char list) option
val scan_linefeed = SOME (#"\n", []) : (Char.char * char list) option
val scan_vtab = SOME (#"\v", []) : (Char.char * char list) option
val scan_formfeed = SOME (#"\f", []) : (Char.char * char list) option
val scan_return = SOME (#"\r", []) : (Char.char * char list) option
val scan_backslash = SOME (#"\\", []) : (Char.char * char list) option
val scan_dquote = SOME (#"\"", []) : (Char.char * char list) option
val scan_ctrl064 = SOME (#"\^@", []) : (Char.char * char list) option
val scan_ctrl095 = SOME (#"\^_", []) : (Char.char * char list) option
val scan_dec000 = SOME (#"\^@", []) : (Char.char * char list) option
val scan_dec255 = SOME (#"\255", []) : (Char.char * char list) option
val scan_multiBySpace = SOME (#"d", [#"e", #"f"])
    : (Char.char * char list) option
val scan_multiByTab = SOME (#"d", [#"e", #"f"]) : (Char.char * char list) option
val scan_multiByNewline = SOME (#"d", [#"e", #"f"])
    : (Char.char * char list) option
val scan_multiByFormfeed = SOME (#"d", [#"e", #"f"])
    : (Char.char * char list) option
val scan_invalidEscape = NONE : (Char.char * char list) option
val toString_A = "A" : String.string
val toString_alert = "\\a" : String.string
val toString_backspace = "\\b" : String.string
val toString_tab = "\\t" : String.string
val toString_linefeed = "\\n" : String.string
val toString_vtab = "\\v" : String.string
val toString_formfeed = "\\f" : String.string
val toString_return = "\\r" : String.string
val toString_backslash = "\\\\" : String.string
val toString_dquote = "\\\"" : String.string
val toString_ctrl064 = "\\^@" : String.string
val toString_ctrl095 = "\\^_" : String.string
val toString_dec000 = "\\^@" : String.string
val toString_dec255 = "\\255" : String.string
val toCString_A = "A" : String.string
val toCString_alert = "\\a" : String.string
val toCString_backspace = "\\b" : String.string
val toCString_tab = "\\t" : String.string
val toCString_linefeed = "\\n" : String.string
val toCString_vtab = "\\v" : String.string
val toCString_formfeed = "\\f" : String.string
val toCString_return = "\\r" : String.string
val toCString_backslash = "\\\\" : String.string
val toCString_dquote = "\\\"" : String.string
val toCString_squote = "\\'" : String.string
val toCString_question = "\\?" : String.string
val toCString_ctrl064 = "\\000" : String.string
val toCString_ctrl095 = "\\037" : String.string
val toCString_dec000 = "\\000" : String.string
val toCString_dec255 = "\\377" : String.string
val fromCString_empty = NONE : Char.char option
val fromCString_A = SOME #"A" : Char.char option
val fromCString_ABC = SOME #"A" : Char.char option
val fromCString_alert = SOME #"\a" : Char.char option
val fromCString_backspace = SOME #"\b" : Char.char option
val fromCString_tab = SOME #"\t" : Char.char option
val fromCString_linefeed = SOME #"\n" : Char.char option
val fromCString_vtab = SOME #"\v" : Char.char option
val fromCString_formfeed = SOME #"\f" : Char.char option
val fromCString_return = SOME #"\r" : Char.char option
val fromCString_backslash = SOME #"\\" : Char.char option
val fromCString_dquote = SOME #"\"" : Char.char option
val fromCString_squote = SOME #"'" : Char.char option
val fromCString_question = SOME #"?" : Char.char option
val fromCString_ctrl064 = SOME #"\^@" : Char.char option
val fromCString_ctrl095 = SOME #"\^_" : Char.char option
val fromCString_oct000 = SOME #"\^@" : Char.char option
val fromCString_oct101 = SOME #"A" : Char.char option
val fromCString_hex00 = SOME #"\^@" : Char.char option
val fromCString_hex7e = SOME #"~" : Char.char option
val fromCString_hex7E = SOME #"~" : Char.char option
