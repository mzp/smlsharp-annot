val ss_0 = - : Substring.substring
val ss_1 = - : Substring.substring
val ss_2 = - : Substring.substring
val checkSS = fn
    : Substring.substring
      -> ((Substring.string * int * int) * Substring.string) option
val check2SS = fn
    : Substring.substring * Substring.substring
      -> ((Substring.string * int * int)
          * Substring.string
          * (Substring.string * int * int)
          * Substring.string)
           option
val checkSSs = fn
    : Substring.substring list
      -> ((Substring.string * int * int) * Substring.string) list
val extract_0_0_N = SOME (("", 0, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val extract_0_0_0 = SOME (("", 0, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val extract_1_0_N = SOME (("a", 0, 1), "a")
    : ((Substring.string * int * int) * Substring.string) option
val extract_1_0_0 = SOME (("a", 0, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val extract_1_0_1 = SOME (("a", 0, 1), "a")
    : ((Substring.string * int * int) * Substring.string) option
val extract_1_1_N = SOME (("a", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val extract_1_1_0 = SOME (("a", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val extract_2_0_N = SOME (("ab", 0, 2), "ab")
    : ((Substring.string * int * int) * Substring.string) option
val extract_2_0_0 = SOME (("ab", 0, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val extract_2_0_1 = SOME (("ab", 0, 1), "a")
    : ((Substring.string * int * int) * Substring.string) option
val extract_2_0_2 = SOME (("ab", 0, 2), "ab")
    : ((Substring.string * int * int) * Substring.string) option
val extract_2_1_N = SOME (("ab", 1, 1), "b")
    : ((Substring.string * int * int) * Substring.string) option
val extract_2_1_0 = SOME (("ab", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val extract_2_1_1 = SOME (("ab", 1, 1), "b")
    : ((Substring.string * int * int) * Substring.string) option
val extract_2_2_N = SOME (("ab", 2, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val extract_2_2_0 = SOME (("ab", 2, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val extract_2_m1_N = NONE
    : ((Substring.string * int * int) * Substring.string) option
val extract_2_3_N = NONE
    : ((Substring.string * int * int) * Substring.string) option
val extract_2_m1_0 = NONE
    : ((Substring.string * int * int) * Substring.string) option
val extract_2_0_m1 = NONE
    : ((Substring.string * int * int) * Substring.string) option
val extract_2_1_2 = NONE
    : ((Substring.string * int * int) * Substring.string) option
val substring_0_0_0 = SOME (("", 0, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val substring_1_0_0 = SOME (("a", 0, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val substring_1_0_1 = SOME (("a", 0, 1), "a")
    : ((Substring.string * int * int) * Substring.string) option
val substring_1_1_0 = SOME (("a", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val substring_2_0_0 = SOME (("ab", 0, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val substring_2_0_1 = SOME (("ab", 0, 1), "a")
    : ((Substring.string * int * int) * Substring.string) option
val substring_2_0_2 = SOME (("ab", 0, 2), "ab")
    : ((Substring.string * int * int) * Substring.string) option
val substring_2_1_0 = SOME (("ab", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val substring_2_1_1 = SOME (("ab", 1, 1), "b")
    : ((Substring.string * int * int) * Substring.string) option
val substring_2_2_0 = SOME (("ab", 2, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val substring_2_m1_0 = NONE
    : ((Substring.string * int * int) * Substring.string) option
val substring_2_0_m1 = NONE
    : ((Substring.string * int * int) * Substring.string) option
val substring_2_1_2 = NONE
    : ((Substring.string * int * int) * Substring.string) option
val full_empty = SOME (("", 0, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val full_1 = SOME (("a", 0, 1), "a")
    : ((Substring.string * int * int) * Substring.string) option
val full_2 = SOME (("ab", 0, 2), "ab")
    : ((Substring.string * int * int) * Substring.string) option
val full_10 = SOME (("abcdefghij", 0, 10), "abcdefghij")
    : ((Substring.string * int * int) * Substring.string) option
val isEmpty_0 = true : bool
val isEmpty_1_0_N = false : bool
val isEmpty_1_0_0 = true : bool
val isEmpty_1_0_1 = false : bool
val isEmpty_1_1_N = true : bool
val getc_0 = NONE : (Substring.char * Substring.substring) option
val getc_1_0_N = SOME (#"a", -) : (Substring.char * Substring.substring) option
val getc_1_0_0 = NONE : (Substring.char * Substring.substring) option
val getc_1_0_1 = SOME (#"a", -) : (Substring.char * Substring.substring) option
val getc_1_1_N = NONE : (Substring.char * Substring.substring) option
val first_0 = NONE : Substring.char option
val first_1_0_N = SOME #"a" : Substring.char option
val first_1_0_0 = NONE : Substring.char option
val first_1_0_1 = SOME #"a" : Substring.char option
val first_1_1_N = NONE : Substring.char option
val triml_0_0 = SOME (("", 0, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val triml_1_0 = SOME (("", 0, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val triml_0_1 = SOME (("abc", 1, 1), "b")
    : ((Substring.string * int * int) * Substring.string) option
val triml_1_1 = SOME (("abc", 2, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val triml_2_1 = SOME (("abc", 2, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val triml_0_2 = SOME (("abcd", 1, 2), "bc")
    : ((Substring.string * int * int) * Substring.string) option
val triml_1_2 = SOME (("abcd", 2, 1), "c")
    : ((Substring.string * int * int) * Substring.string) option
val triml_2_2 = SOME (("abcd", 3, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val triml_3_2 = SOME (("abcd", 3, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val triml_m1 = NONE : (Substring.substring -> Substring.substring) option
val trimr_0_0 = SOME (("", 0, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val trimr_1_0 = SOME (("", 0, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val trimr_0_1 = SOME (("abc", 1, 1), "b")
    : ((Substring.string * int * int) * Substring.string) option
val trimr_1_1 = SOME (("abc", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val trimr_2_1 = SOME (("abc", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val trimr_0_2 = SOME (("abcd", 1, 2), "bc")
    : ((Substring.string * int * int) * Substring.string) option
val trimr_1_2 = SOME (("abcd", 1, 1), "b")
    : ((Substring.string * int * int) * Substring.string) option
val trimr_2_2 = SOME (("abcd", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val trimr_3_2 = SOME (("abcd", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val trimr_m1 = NONE : (Substring.substring -> Substring.substring) option
val slice_0_0_N = SOME (("abc", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val slice_0_0_0 = SOME (("abc", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val slice_1_0_N = SOME (("abc", 1, 1), "b")
    : ((Substring.string * int * int) * Substring.string) option
val slice_1_0_0 = SOME (("abc", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val slice_1_0_1 = SOME (("abc", 1, 1), "b")
    : ((Substring.string * int * int) * Substring.string) option
val slice_1_1_N = SOME (("abc", 2, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val slice_1_1_0 = SOME (("abc", 2, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val slice_2_0_N = SOME (("abcd", 1, 2), "bc")
    : ((Substring.string * int * int) * Substring.string) option
val slice_2_0_0 = SOME (("abcd", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val slice_2_0_1 = SOME (("abcd", 1, 1), "b")
    : ((Substring.string * int * int) * Substring.string) option
val slice_2_0_2 = SOME (("abcd", 1, 2), "bc")
    : ((Substring.string * int * int) * Substring.string) option
val slice_2_1_N = SOME (("abcd", 2, 1), "c")
    : ((Substring.string * int * int) * Substring.string) option
val slice_2_1_0 = SOME (("abcd", 2, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val slice_2_1_1 = SOME (("abcd", 2, 1), "c")
    : ((Substring.string * int * int) * Substring.string) option
val slice_2_2_N = SOME (("abcd", 3, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val slice_2_2_0 = SOME (("abcd", 3, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val slice_2_m1_N = NONE
    : ((Substring.string * int * int) * Substring.string) option
val slice_2_3_N = NONE
    : ((Substring.string * int * int) * Substring.string) option
val slice_2_m1_0 = NONE
    : ((Substring.string * int * int) * Substring.string) option
val slice_2_0_m1 = NONE
    : ((Substring.string * int * int) * Substring.string) option
val slice_2_1_2 = NONE
    : ((Substring.string * int * int) * Substring.string) option
val sub_0_0 = #"E" : Substring.char
val sub_1_m1 = #"E" : Substring.char
val sub_1_0 = #"b" : Substring.char
val sub_1_1 = #"E" : Substring.char
val sub_2_m1 = #"E" : Substring.char
val sub_2_0 = #"b" : Substring.char
val sub_2_1 = #"c" : Substring.char
val sub_2_2 = #"E" : Substring.char
val size_0 = 0 : int
val size_1 = 1 : int
val size_2 = 2 : int
val concat_0 = "" : Substring.string
val concat_1 = "bc" : Substring.string
val concat_2_diff = "bcb" : Substring.string
val concat_2_same = "bcbc" : Substring.string
val concat_2_02 = "bc" : Substring.string
val concat_2_20 = "bc" : Substring.string
val concat_3_202 = "bcbc" : Substring.string
val concat_3_212 = "bcbbc" : Substring.string
val explode_0_0_0 = [] : Substring.char list
val explode_1_0_0 = [] : Substring.char list
val explode_1_0_1 = [#"a"] : Substring.char list
val explode_1_1_0 = [] : Substring.char list
val explode_2_0_0 = [] : Substring.char list
val explode_2_0_1 = [#"a"] : Substring.char list
val explode_2_0_2 = [#"a", #"b"] : Substring.char list
val explode_2_1_0 = [] : Substring.char list
val explode_2_1_1 = [#"b"] : Substring.char list
val explode_2_2_0 = [] : Substring.char list
val isPrefix_0_0 = true : bool
val isPrefix_1_0 = false : bool
val isPrefix_0_1 = true : bool
val isPrefix_1_1t = true : bool
val isPrefix_1_1f = false : bool
val isPrefix_1_2t = true : bool
val isPrefix_1_2f = false : bool
val isPrefix_2_2t = true : bool
val isPrefix_2_2f = false : bool
val isPrefix_2_3t = true : bool
val isPrefix_2_3f = false : bool
val isPrefix_3_3t = true : bool
val isPrefix_3_3f = false : bool
val compare_0_0 = EQUAL : order
val compare_0_1 = LESS : order
val compare_1_0 = GREATER : order
val compare_1_1_lt = LESS : order
val compare_1_1_eq = EQUAL : order
val compare_1_1_gt = GREATER : order
val compare_1_2_lt = LESS : order
val compare_1_2_gt = LESS : order
val compare_2_1_lt = LESS : order
val compare_2_1_gt = GREATER : order
val compare_2_2_lt = LESS : order
val compare_2_2_eq = EQUAL : order
val compare_2_2_gt = GREATER : order
val collateFun = fn : char * char -> General.order
val collate_0_0 = EQUAL : order
val collate_0_1 = LESS : order
val collate_1_0 = GREATER : order
val collate_1_1_lt = GREATER : order
val collate_1_1_eq = EQUAL : order
val collate_1_1_gt = LESS : order
val collate_1_2_lt = GREATER : order
val collate_1_2_gt = LESS : order
val collate_2_1_lt = GREATER : order
val collate_2_1_gt = GREATER : order
val collate_2_2_lt = GREATER : order
val collate_2_2_eq = EQUAL : order
val collate_2_2_gt = LESS : order
val splitFun = fn : char -> bool
val splitl_0 = SOME (("", 0, 0), "", ("", 0, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitl_1_f = SOME (("abc", 1, 0), "", ("abc", 1, 1), "b")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitl_1_t = SOME (("aAc", 1, 1), "A", ("aAc", 2, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitl_2_f = SOME (("abcd", 1, 0), "", ("abcd", 1, 2), "bc")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitl_2_0 = SOME (("aAcd", 1, 1), "A", ("aAcd", 2, 1), "c")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitl_2_1 = SOME (("aaAd", 1, 0), "", ("aaAd", 1, 2), "aA")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitl_3_f = SOME (("abcde", 1, 0), "", ("abcde", 1, 3), "bcd")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitl_3_0 = SOME (("aAcAe", 1, 1), "A", ("aAcAe", 2, 2), "cA")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitl_3_1 = SOME (("abAAe", 1, 0), "", ("abAAe", 1, 3), "bAA")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitl_3_2 = SOME (("abcAe", 1, 0), "", ("abcAe", 1, 3), "bcA")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitr_0 = SOME (("", 0, 0), "", ("", 0, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitr_1_f = SOME (("abc", 1, 1), "b", ("abc", 2, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitr_1_t = SOME (("aAc", 1, 0), "", ("aAc", 1, 1), "A")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitr_2_f = SOME (("abcd", 1, 2), "bc", ("abcd", 3, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitr_2_0 = SOME (("aAcd", 1, 2), "Ac", ("aAcd", 3, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitr_2_1 = SOME (("aaAd", 1, 1), "a", ("aaAd", 2, 1), "A")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitr_3_f = SOME (("abcde", 1, 3), "bcd", ("abcde", 4, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitr_3_0 = SOME (("aAcAe", 1, 2), "Ac", ("aAcAe", 3, 1), "A")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitr_3_1 = SOME (("abAAe", 1, 1), "b", ("abAAe", 2, 2), "AA")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitr_3_2 = SOME (("abcAe", 1, 2), "bc", ("abcAe", 3, 1), "A")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitAt_0_0 = SOME (("", 0, 0), "", ("", 0, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitAt_0_m1 = NONE
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitAt_0_1 = NONE
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitAt_1_0 = SOME (("abc", 1, 0), "", ("abc", 1, 1), "b")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitAt_1_1 = SOME (("abc", 1, 1), "b", ("abc", 2, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitAt_1_2 = NONE
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitAt_1_m1 = NONE
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitAt_2_0 = SOME (("abcd", 1, 0), "", ("abcd", 1, 2), "bc")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitAt_2_1 = SOME (("abcd", 1, 1), "b", ("abcd", 2, 1), "c")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitAt_2_2 = SOME (("abcd", 1, 2), "bc", ("abcd", 3, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitAt_2_3 = NONE
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitAt_2_m1 = NONE
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitAt_3_0 = SOME (("abcde", 1, 0), "", ("abcde", 1, 3), "bcd")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitAt_3_1 = SOME (("abcde", 1, 1), "b", ("abcde", 2, 2), "cd")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitAt_3_2 = SOME (("abcde", 1, 2), "bc", ("abcde", 3, 1), "d")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitAt_3_3 = SOME (("abcde", 1, 3), "bcd", ("abcde", 4, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitAt_3_4 = NONE
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val splitAt_3_m1 = NONE
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val dropFun = fn : char -> bool
val dropl_0 = SOME (("", 0, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val dropl_1_f = SOME (("abc", 1, 1), "b")
    : ((Substring.string * int * int) * Substring.string) option
val dropl_1_t = SOME (("aAc", 2, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val dropl_2_f = SOME (("abcd", 1, 2), "bc")
    : ((Substring.string * int * int) * Substring.string) option
val dropl_2_0 = SOME (("aAcd", 2, 1), "c")
    : ((Substring.string * int * int) * Substring.string) option
val dropl_2_1 = SOME (("aaAd", 1, 2), "aA")
    : ((Substring.string * int * int) * Substring.string) option
val dropl_3_f = SOME (("abcde", 1, 3), "bcd")
    : ((Substring.string * int * int) * Substring.string) option
val dropl_3_0 = SOME (("aAcAe", 2, 2), "cA")
    : ((Substring.string * int * int) * Substring.string) option
val dropl_3_1 = SOME (("abAAe", 1, 3), "bAA")
    : ((Substring.string * int * int) * Substring.string) option
val dropl_3_2 = SOME (("abcAe", 1, 3), "bcA")
    : ((Substring.string * int * int) * Substring.string) option
val dropr_0 = SOME (("", 0, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val dropr_1_f = SOME (("abc", 1, 1), "b")
    : ((Substring.string * int * int) * Substring.string) option
val dropr_1_t = SOME (("aAc", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val dropr_2_f = SOME (("abcd", 1, 2), "bc")
    : ((Substring.string * int * int) * Substring.string) option
val dropr_2_0 = SOME (("aAcd", 1, 2), "Ac")
    : ((Substring.string * int * int) * Substring.string) option
val dropr_2_1 = SOME (("aaAd", 1, 1), "a")
    : ((Substring.string * int * int) * Substring.string) option
val dropr_3_f = SOME (("abcde", 1, 3), "bcd")
    : ((Substring.string * int * int) * Substring.string) option
val dropr_3_0 = SOME (("aAcAe", 1, 2), "Ac")
    : ((Substring.string * int * int) * Substring.string) option
val dropr_3_1 = SOME (("abAAe", 1, 1), "b")
    : ((Substring.string * int * int) * Substring.string) option
val dropr_3_2 = SOME (("abcAe", 1, 2), "bc")
    : ((Substring.string * int * int) * Substring.string) option
val takeFun = fn : char -> bool
val takel_0 = SOME (("", 0, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val takel_1_f = SOME (("abc", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val takel_1_t = SOME (("aAc", 1, 1), "A")
    : ((Substring.string * int * int) * Substring.string) option
val takel_2_f = SOME (("abcd", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val takel_2_0 = SOME (("aAcd", 1, 1), "A")
    : ((Substring.string * int * int) * Substring.string) option
val takel_2_1 = SOME (("aaAd", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val takel_3_f = SOME (("abcde", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val takel_3_0 = SOME (("aAcAe", 1, 1), "A")
    : ((Substring.string * int * int) * Substring.string) option
val takel_3_1 = SOME (("abAAe", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val takel_3_2 = SOME (("abcAe", 1, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val taker_0 = SOME (("", 0, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val taker_1_f = SOME (("abc", 2, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val taker_1_t = SOME (("aAc", 1, 1), "A")
    : ((Substring.string * int * int) * Substring.string) option
val taker_2_f = SOME (("abcd", 3, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val taker_2_0 = SOME (("aAcd", 3, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val taker_2_1 = SOME (("aaAd", 2, 1), "A")
    : ((Substring.string * int * int) * Substring.string) option
val taker_3_f = SOME (("abcde", 4, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val taker_3_0 = SOME (("aAcAe", 3, 1), "A")
    : ((Substring.string * int * int) * Substring.string) option
val taker_3_1 = SOME (("abAAe", 2, 2), "AA")
    : ((Substring.string * int * int) * Substring.string) option
val taker_3_2 = SOME (("abcAe", 3, 1), "A")
    : ((Substring.string * int * int) * Substring.string) option
val position_0_0 = SOME (("abc", 1, 0), "", ("abc", 1, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_0_1 = SOME (("abc", 1, 0), "", ("abc", 1, 1), "b")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_1_1_m1 = SOME (("abc", 1, 1), "b", ("abc", 2, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_1_1_1 = SOME (("abc", 1, 1), "b", ("abc", 2, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_1_1_0t = SOME (("abc", 1, 0), "", ("abc", 1, 1), "b")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_1_2_m1 = SOME (("abcd", 1, 2), "bc", ("abcd", 3, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_1_2_0 = SOME (("abcd", 1, 0), "", ("abcd", 1, 2), "bc")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_1_2_1 = SOME (("abcd", 1, 1), "b", ("abcd", 2, 1), "c")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_1_2_2 = SOME (("abcd", 1, 2), "bc", ("abcd", 3, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_2_1_f1 = SOME (("abc", 1, 1), "b", ("abc", 2, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_2_1_f2 = SOME (("abc", 1, 1), "b", ("abc", 2, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_2_2_m1 = SOME (("abcd", 1, 2), "bc", ("abcd", 3, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_2_2_0 = SOME (("abcd", 1, 0), "", ("abcd", 1, 2), "bc")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_2_2_1 = SOME (("abcd", 1, 2), "bc", ("abcd", 3, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_2_2_2 = SOME (("abcd", 1, 2), "bc", ("abcd", 3, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_2_3_m1 = SOME (("abcdef", 1, 3), "bcd", ("abcdef", 4, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_2_3_0 = SOME (("abcdef", 1, 0), "", ("abcdef", 1, 3), "bcd")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_2_3_1 = SOME (("abcdef", 1, 1), "b", ("abcdef", 2, 2), "cd")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_2_3_2 = SOME (("abcdef", 1, 3), "bcd", ("abcdef", 4, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_2_3_3 = SOME (("abcdef", 1, 3), "bcd", ("abcdef", 4, 0), "")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val position_longest = SOME (("abcdbcf", 1, 0), "", ("abcdbcf", 1, 5), "bcdbc")
    : ((Substring.string * int * int)
       * Substring.string
       * (Substring.string * int * int)
       * Substring.string)
        option
val makeSpanSS = fn
    : string
      -> int * int
         -> int * int
            -> ((Substring.string * int * int) * Substring.string) option
val span_0_0_A_A = SOME (("abcde", 1, 2), "bc")
    : ((Substring.string * int * int) * Substring.string) option
val span_1_1_A_A = SOME (("abcde", 1, 3), "bcd")
    : ((Substring.string * int * int) * Substring.string) option
val span_1_1_B_B = SOME (("abcde", 1, 1), "b")
    : ((Substring.string * int * int) * Substring.string) option
val span_1_1_E_E = NONE
    : ((Substring.string * int * int) * Substring.string) option
val span_1_2_A_A = SOME (("abcde", 1, 4), "bcde")
    : ((Substring.string * int * int) * Substring.string) option
val span_1_2_B_B = SOME (("abcde", 1, 2), "bc")
    : ((Substring.string * int * int) * Substring.string) option
val span_1_2_D_D = SOME (("abcde", 2, 1), "c")
    : ((Substring.string * int * int) * Substring.string) option
val span_1_2_E_E = SOME (("abcde", 3, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val span_2_1_A_A = SOME (("abcde", 1, 3), "bcd")
    : ((Substring.string * int * int) * Substring.string) option
val span_2_1_A_B = SOME (("abcde", 1, 2), "bc")
    : ((Substring.string * int * int) * Substring.string) option
val span_2_1_B_E = SOME (("abcde", 1, 1), "b")
    : ((Substring.string * int * int) * Substring.string) option
val span_2_1_E_E = SOME (("abcde", 2, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val span_2_2_A_A = SOME (("abcdef", 1, 4), "bcde")
    : ((Substring.string * int * int) * Substring.string) option
val span_2_2_A_B = SOME (("abcdef", 1, 3), "bcd")
    : ((Substring.string * int * int) * Substring.string) option
val span_2_2_B_D = SOME (("abcdef", 1, 2), "bc")
    : ((Substring.string * int * int) * Substring.string) option
val span_2_2_D_E = SOME (("abcdef", 2, 1), "c")
    : ((Substring.string * int * int) * Substring.string) option
val span_2_2_E_E = SOME (("abcdef", 3, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_1_A_A = SOME (("abcdef", 1, 4), "bcde")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_1_A_B = SOME (("abcdef", 1, 3), "bcd")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_1_A_E = SOME (("abcdef", 1, 2), "bc")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_1_B_E = SOME (("abcdef", 1, 1), "b")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_1_E_E = SOME (("abcdef", 2, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_2_A_A = SOME (("abcdefg", 1, 5), "bcdef")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_2_A_B = SOME (("abcdefg", 1, 4), "bcde")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_2_A_D = SOME (("abcdefg", 1, 3), "bcd")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_2_B_E = SOME (("abcdefg", 1, 2), "bc")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_2_D_E = SOME (("abcdefg", 2, 1), "c")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_2_E_E = SOME (("abcdefg", 2, 1), "c")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_3_A_A = SOME (("abcdefgh", 1, 6), "bcdefg")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_3_A_B = SOME (("abcdefgh", 1, 5), "bcdef")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_3_A_C = SOME (("abcdefgh", 1, 4), "bcde")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_3_B_D = SOME (("abcdefgh", 1, 3), "bcd")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_3_C_E = SOME (("abcdefgh", 2, 2), "cd")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_3_D_E = SOME (("abcdefgh", 3, 1), "d")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_3_E_E = SOME (("abcdefgh", 4, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val span_2_3_A_A = SOME (("abcdefg", 1, 5), "bcdef")
    : ((Substring.string * int * int) * Substring.string) option
val span_2_3_A_B = SOME (("abcdefg", 1, 4), "bcde")
    : ((Substring.string * int * int) * Substring.string) option
val span_2_3_B_C = SOME (("abcdefg", 1, 3), "bcd")
    : ((Substring.string * int * int) * Substring.string) option
val span_2_3_C_D = SOME (("abcdefg", 2, 2), "cd")
    : ((Substring.string * int * int) * Substring.string) option
val span_2_3_D_E = SOME (("abcdefg", 3, 1), "d")
    : ((Substring.string * int * int) * Substring.string) option
val span_2_3_E_E = SOME (("abcdefg", 4, 0), "")
    : ((Substring.string * int * int) * Substring.string) option
val span_3_3_A_A_2 = SOME (("abcdefghi", 1, 7), "bcdefgh")
    : ((Substring.string * int * int) * Substring.string) option
val translateFun = fn : char -> string
val translate0 = "" : Substring.string
bbval translate1 = "bb" : Substring.string
bbccval translate2 = "bbcc" : Substring.string
val tokensFun = fn : char -> bool
val tokens_empty = [] : ((Substring.string * int * int) * Substring.string) list
val tokens_00 = [] : ((Substring.string * int * int) * Substring.string) list
val tokens_01 = [(("a|bc", 2, 1), "b")]
    : ((Substring.string * int * int) * Substring.string) list
val tokens_10 = [(("ab|c", 1, 1), "b")]
    : ((Substring.string * int * int) * Substring.string) list
val tokens_11 = [(("ab|cd", 1, 1), "b"), (("ab|cd", 3, 1), "c")]
    : ((Substring.string * int * int) * Substring.string) list
val tokens_000 = [] : ((Substring.string * int * int) * Substring.string) list
val tokens_001 = [(("a||bc", 3, 1), "b")]
    : ((Substring.string * int * int) * Substring.string) list
val tokens_010 = [(("a|b|c", 2, 1), "b")]
    : ((Substring.string * int * int) * Substring.string) list
val tokens_011 = [(("a|b|cd", 2, 1), "b"), (("a|b|cd", 4, 1), "c")]
    : ((Substring.string * int * int) * Substring.string) list
val tokens_100 = [(("ab||c", 1, 1), "b")]
    : ((Substring.string * int * int) * Substring.string) list
val tokens_101 = [(("ab||cd", 1, 1), "b"), (("ab||cd", 4, 1), "c")]
    : ((Substring.string * int * int) * Substring.string) list
val tokens_110 = [(("ab|c|d", 1, 1), "b"), (("ab|c|d", 3, 1), "c")]
    : ((Substring.string * int * int) * Substring.string) list
val tokens_111 =
    [
      (("ab|c|de", 1, 1), "b"),
      (("ab|c|de", 3, 1), "c"),
      (("ab|c|de", 5, 1), "d")
    ]
    : ((Substring.string * int * int) * Substring.string) list
val tokens_222 =
    [
      (("abc|de|fgh", 1, 2), "bc"),
      (("abc|de|fgh", 4, 2), "de"),
      (("abc|de|fgh", 7, 2), "fg")
    ]
    : ((Substring.string * int * int) * Substring.string) list
val fieldsFun = fn : char -> bool
val fields_empty = [(("abc", 1, 0), "")]
    : ((Substring.string * int * int) * Substring.string) list
val fields_00 = [(("a|b", 1, 0), ""), (("a|b", 2, 0), "")]
    : ((Substring.string * int * int) * Substring.string) list
val fields_01 = [(("a|bc", 1, 0), ""), (("a|bc", 2, 1), "b")]
    : ((Substring.string * int * int) * Substring.string) list
val fields_10 = [(("ab|c", 1, 1), "b"), (("ab|c", 3, 0), "")]
    : ((Substring.string * int * int) * Substring.string) list
val fields_11 = [(("ab|cd", 1, 1), "b"), (("ab|cd", 3, 1), "c")]
    : ((Substring.string * int * int) * Substring.string) list
val fields_000 =
    [(("a||b", 1, 0), ""), (("a||b", 2, 0), ""), (("a||b", 3, 0), "")]
    : ((Substring.string * int * int) * Substring.string) list
val fields_001 =
    [(("a||bc", 1, 0), ""), (("a||bc", 2, 0), ""), (("a||bc", 3, 1), "b")]
    : ((Substring.string * int * int) * Substring.string) list
val fields_010 =
    [(("a|b|c", 1, 0), ""), (("a|b|c", 2, 1), "b"), (("a|b|c", 4, 0), "")]
    : ((Substring.string * int * int) * Substring.string) list
val fields_011 =
    [(("a|b|cd", 1, 0), ""), (("a|b|cd", 2, 1), "b"), (("a|b|cd", 4, 1), "c")]
    : ((Substring.string * int * int) * Substring.string) list
val fields_100 =
    [(("ab||c", 1, 1), "b"), (("ab||c", 3, 0), ""), (("ab||c", 4, 0), "")]
    : ((Substring.string * int * int) * Substring.string) list
val fields_101 =
    [(("ab||cd", 1, 1), "b"), (("ab||cd", 3, 0), ""), (("ab||cd", 4, 1), "c")]
    : ((Substring.string * int * int) * Substring.string) list
val fields_110 =
    [(("ab|c|d", 1, 1), "b"), (("ab|c|d", 3, 1), "c"), (("ab|c|d", 5, 0), "")]
    : ((Substring.string * int * int) * Substring.string) list
val fields_111 =
    [
      (("ab|c|de", 1, 1), "b"),
      (("ab|c|de", 3, 1), "c"),
      (("ab|c|de", 5, 1), "d")
    ]
    : ((Substring.string * int * int) * Substring.string) list
val fields_222 =
    [
      (("abc|de|fgh", 1, 2), "bc"),
      (("abc|de|fgh", 4, 2), "de"),
      (("abc|de|fgh", 7, 2), "fg")
    ]
    : ((Substring.string * int * int) * Substring.string) list
val foldlFun = fn : char * char list -> char list
val foldl_0 = [] : char list
bval foldl_1 = [#"b"] : char list
bcval foldl_2 = [#"c", #"b"] : char list
bcdval foldl_3 = [#"d", #"c", #"b"] : char list
val foldrFun = fn : char * char list -> char list
val foldr_0 = [] : char list
bval foldr_1 = [#"b"] : char list
cbval foldr_2 = [#"b", #"c"] : char list
dcbval foldr_3 = [#"b", #"c", #"d"] : char list
val appFun = fn : char -> unit
val app0 = () : unit
bbval app1 = () : unit
bbccval app2 = () : unit
