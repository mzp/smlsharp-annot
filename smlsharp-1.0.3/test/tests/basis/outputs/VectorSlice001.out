structure VS : VECTOR_SLICE
structure V : VECTOR
val Ints2VS = fn : int list  -> int VS.slice
val S2VS = fn : string -> char VS.slice
val VS2L = fn : ['a .'a VS.slice -> 'a list]
val V2L = fn : ['a .'a V.vector -> 'a list]
val makeVector = fn : int -> int V.vector
val length1 = 0 : int
val length2 = 1 : int
val length3 = 2 : int
val sub00 = 1 : int
val sub0m1 = 1 : int
val sub01 = 1 : int
val sub10 = 1 : int
val sub11 = 1 : int
val sub1m1 = 1 : int
val sub20 = 1 : int
val sub21 = 2 : int
val sub22 = 3 : int
val full_0 = [] : int list
val full_1 = [1] : int list
val full_2 = [1,2] : int list
val testSlice = fn : int * int * int option -> int list
val slice_0_0_N = [] : int list
val slice_1_0_N = [0] : int list
val slice_1_0_0 = [] : int list
val slice_1_0_1 = [0] : int list
val slice_1_0_2 = [0] : int list
val slice_1_1_N = [] : int list
val slice_1_1_0 = [] : int list
val slice_1_1_1 = [999] : int list
val slice_1_2_N = [999] : int list
val slice_2_0_N = [0,1] : int list
val slice_2_0_0 = [] : int list
val slice_2_0_2 = [0,1] : int list
val slice_2_0_3 = [999] : int list
val slice_2_1_N = [1] : int list
val slice_2_1_0 = [] : int list
val slice_2_1_1 = [1] : int list
val slice_2_1_2 = [999] : int list
val slice_2_2_N = [] : int list
val slice_2_2_0 = [] : int list
val slice_2_2_1 = [999] : int list
val testSubslice = fn : int * int * int * int * int option -> int list
val subslice_5_1_3_0_N = [1,2,3] : int list
val subslice_5_1_3_0_3 = [1,2,3] : int list
val subslice_5_1_3_1_N = [2,3] : int list
val subslice_5_1_3_1_0 = [] : int list
val subslice_5_1_3_1_1 = [2] : int list
val subslice_5_1_3_1_3 = [999] : int list
val subslice_5_1_3_2_N = [3] : int list
val subslice_5_1_3_2_1 = [2] : int list
val testBase = fn : int * int * int -> int list * int * int
val base_0_0_0 = ([],0,0) : int list * int * int
val base_2_0_0 = ([0,1],0,0) : int list * int * int
val base_2_0_1 = ([0,1],0,1) : int list * int * int
val base_2_1_1 = ([0,1],1,1) : int list * int * int
val testVector = fn : int * int * int -> int list
val vector_0_0_0 = [] : int list
val vector_2_0_0 = [] : int list
val vector_2_0_1 = [0] : int list
val vector_2_1_1 = [1] : int list
val concat0 = [] : int list
val concat10 = [] : int list
val concat200 = [] : int list
val concat11 = [1] : int list
val concat201 = [1] : int list
val concat210 = [1] : int list
val concat211 = [1,2] : int list
val concat222 = [1,2,3,4] : int list
val concat3303 = [1,2,3,7,8,9] : int list
val concat3333 = [1,2,3,4,5,6,7,8,9] : int list
val isEmpty_0 = true : bool
val isEmpty_1 = false : bool
val testGetItem = fn : int * int * int -> int * int list
val getItem_0_0_0 = (999,[999]) : int * int list
val getItem_1_0_0 = (999,[999]) : int * int list
val getItem_1_0_1 = (0,[]) : int * int list
val getItem_1_1_0 = (999,[999]) : int * int list
val getItem_2_0_0 = (999,[999]) : int * int list
val getItem_2_0_1 = (0,[]) : int * int list
val getItem_2_0_2 = (0,[1]) : int * int list
val getItem_2_1_0 = (999,[999]) : int * int list
val getItem_2_1_1 = (1,[]) : int * int list
val getItem_2_2_0 = (999,[999]) : int * int list
val mapiFun = fn : ['a .int * 'a -> 'a]
val mapi_0 = [] : char list
0val mapi_1 = [#"a"] : char list
01val mapi_2 = [#"a",#"b"] : char list
val mapFun = fn : int -> int
val map0 = [] : int list
1val map1 = [2] : int list
12val map2 = [2,3] : int list
123val map3 = [2,3,4] : int list
val appiFun = fn : int * char -> unit
val appi_0 = SOME () : unit option
0aval appi_1 = SOME () : unit option
0a1bval appi_2 = SOME () : unit option
val appFun = fn : char -> unit
val app0 = () : unit
aval app1 = () : unit
abval app2 = () : unit
abcval app3 = () : unit
val foldliFun = fn : ['a .int * 'a * 'a list -> 'a list]
val foldli_0 = [] : char list
0val foldli_1 = [#"a"] : char list
01val foldli_2 = [#"b",#"a"] : char list
val foldlFun = fn : ['a .'a * 'a list -> 'a list]
val foldl0 = [] : int list
val foldl1 = [1] : int list
val foldl2 = [2,1] : int list
val foldl3 = [3,2,1] : int list
val foldriFun = fn : ['a .int * 'a * 'a list -> 'a list]
val foldri_0 = [] : char list
0val foldri_1 = [#"a"] : char list
10val foldri_2 = [#"a",#"b"] : char list
val foldrFun = fn : ['a .'a * 'a list -> 'a list]
val foldr0 = [] : int list
val foldr1 = [1] : int list
val foldr2 = [1,2] : int list
val foldr3 = [1,2,3] : int list
val findiFun = fn : int * int -> bool
val findi_0 = NONE : (int * int) option
0val findi_1F = NONE : (int * int) option
0val findi_1T = SOME ( 0, 9 ) : (int * int) option
01val findi_2F = NONE : (int * int) option
01val findi_2T1 = SOME ( 1, 9 ) : (int * int) option
0val findi_2T2 = SOME ( 0, 9 ) : (int * int) option
0val findi_2T3 = SOME ( 0, 9 ) : (int * int) option
val findFun = fn : int -> bool
val find_0 = NONE : int option
1val find_1F = NONE : int option
9val find_1T = SOME 9 : int option
12val find_2F = NONE : int option
19val find_2T1 = SOME 9 : int option
9val find_2T2 = SOME 9 : int option
9val find_2T3 = SOME 9 : int option
val existsFun = fn : int -> bool
val exists_0 = false : bool
1val exists_1F = false : bool
9val exists_1T = true : bool
12val exists_2F = false : bool
19val exists_2T1 = true : bool
9val exists_2T2 = true : bool
9val exists_2T3 = true : bool
val allFun = fn : int -> bool
val all_0 = true : bool
1val all_1F = false : bool
9val all_1T = true : bool
1val all_2F1 = false : bool
1val all_2F2 = false : bool
91val all_2F3 = false : bool
99val all_2T = true : bool
val collateFun = fn : int * int -> General.order
val collate00 = EQUAL : order
val collate01 = LESS : order
val collate10 = GREATER : order
val collate11L = LESS : order
val collate11E = EQUAL : order
val collate11G = GREATER : order
val collate12L = LESS : order
val collate12G = GREATER : order
val collate21L = LESS : order
val collate21G = GREATER : order
val collate22L1 = LESS : order
val collate22L2 = LESS : order
val collate22E = EQUAL : order
val collate22G1 = GREATER : order
val collate22G2 = GREATER : order
