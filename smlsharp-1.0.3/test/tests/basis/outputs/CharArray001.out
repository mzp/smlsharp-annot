val L2A = fn : CharArray.elem list -> CharArray.array
val L2V = fn : CharVector.elem list -> CharVector.vector
val S2A = fn : string -> CharArray.array
val A2L = fn : CharArray.array -> char list
val V2L = fn : string -> char list
val array_0i = [] : char list
val array_1i = [#"a"] : char list
val array_2i = [#"a", #"a"] : char list
val array_m1i = [#"X"] : char list
val fromList_0i = [] : char list
val fromList_1i = [#"a"] : char list
val fromList_2i = [#"a", #"b"] : char list
val tabulateFun = fn : int -> Char.char
val tabulate0 = [] : char list
val tabulate1 = [#"\^@"] : char list
val tabulate2 = [#"\^@", #"\^A"] : char list
val tabulatem1 = [#"X"] : char list
val length1 = 0 : int
val length2 = 1 : int
val length3 = 2 : int
val sub00 = #"X" : CharArray.elem
val sub0m1 = #"X" : CharArray.elem
val sub01 = #"X" : CharArray.elem
val sub10 = #"a" : CharArray.elem
val sub11 = #"X" : CharArray.elem
val sub1m1 = #"X" : CharArray.elem
val sub20 = #"a" : CharArray.elem
val sub21 = #"b" : CharArray.elem
val sub22 = #"X" : CharArray.elem
val testUpdate = fn : CharArray.array * int * char -> char list
val update00 = [#"a"] : char list
val update0m1 = [#"a"] : char list
val update01 = [#"a"] : char list
val update10 = [#"A"] : char list
val update11 = [#"X"] : char list
val update1m1 = [#"X"] : char list
val update20 = [#"A", #"b"] : char list
val update21 = [#"a", #"A"] : char list
val update22 = [#"X"] : char list
val vector_0 = "" : CharArray.vector
val vector_1 = "a" : CharArray.vector
val vector_2 = "ab" : CharArray.vector
val testCopy = fn
    : CharArray.array * CharArray.array * int -> char list * char list
val copy_0_3_0 = ([], [#"z", #"y", #"x"]) : char list * char list
val copy_1_3_0 = ([#"a"], [#"a", #"y", #"x"]) : char list * char list
val copy_2_3_0 = ([#"a", #"b"], [#"a", #"b", #"x"]) : char list * char list
val copy_3_0_0 = ([#"X"], [#"X"]) : char list * char list
val copy_3_1_0 = ([#"X"], [#"X"]) : char list * char list
val copy_3_2_0 = ([#"X"], [#"X"]) : char list * char list
val copy_3_3_0 = ([#"a", #"b", #"c"], [#"a", #"b", #"c"])
    : char list * char list
val copy_3_4_0 = ([#"a", #"b", #"c"], [#"a", #"b", #"c", #"w"])
    : char list * char list
val copy_3_4_m1 = ([#"X"], [#"X"]) : char list * char list
val copy_3_4_0 = ([#"a", #"b", #"c"], [#"a", #"b", #"c", #"w"])
    : char list * char list
val copy_3_4_1 = ([#"a", #"b", #"c"], [#"z", #"a", #"b", #"c"])
    : char list * char list
val copy_3_4_2 = ([#"X"], [#"X"]) : char list * char list
val testCopyVec = fn : string * CharArray.array * int -> char list * char list
val copyVec_0_3_0 = ([], [#"z", #"y", #"x"]) : char list * char list
val copyVec_1_3_0 = ([#"a"], [#"a", #"y", #"x"]) : char list * char list
val copyVec_2_3_0 = ([#"a", #"b"], [#"a", #"b", #"x"]) : char list * char list
val copyVec_3_0_0 = ([#"X"], [#"X"]) : char list * char list
val copyVec_3_1_0 = ([#"X"], [#"X"]) : char list * char list
val copyVec_3_2_0 = ([#"X"], [#"X"]) : char list * char list
val copyVec_3_3_0 = ([#"a", #"b", #"c"], [#"a", #"b", #"c"])
    : char list * char list
val copyVec_3_4_0 = ([#"a", #"b", #"c"], [#"a", #"b", #"c", #"w"])
    : char list * char list
val copyVec_3_4_m1 = ([#"X"], [#"X"]) : char list * char list
val copyVec_3_4_0 = ([#"a", #"b", #"c"], [#"a", #"b", #"c", #"w"])
    : char list * char list
val copyVec_3_4_1 = ([#"a", #"b", #"c"], [#"z", #"a", #"b", #"c"])
    : char list * char list
val copyVec_3_4_2 = ([#"X"], [#"X"]) : char list * char list
val appiFun = fn : int * char -> unit
val appi_0 = SOME () : unit option
0aval appi_1 = SOME () : unit option
0a1bval appi_2 = SOME () : unit option
val appFun = fn : char -> unit
val app0 = () : unit
aval app1 = () : unit
abval app2 = () : unit
abcval app3 = () : unit
val modifyiFun = fn : int * char -> Char.char
val testModifyi = fn : CharArray.array -> char list
val modifyi_0 = [] : char list
0val modifyi_1 = [#"A"] : char list
01val modifyi_2 = [#"A", #"B"] : char list
val modifyFun = fn : char -> Char.char
val testModify = fn : CharArray.array -> char list
val modify0 = [] : char list
aval modify1 = [#"A"] : char list
abval modify2 = [#"A", #"B"] : char list
abcval modify3 = [#"A", #"B", #"C"] : char list
val foldliFun = fn : ['a. int * 'a * 'a list -> 'a list]
val foldli_0 = [] : char list
0val foldli_1 = [#"a"] : char list
01val foldli_2 = [#"b", #"a"] : char list
val foldlFun = fn : ['a. 'a * 'a list -> 'a list]
val foldl0 = [] : char list
val foldl1 = [#"a"] : char list
val foldl2 = [#"b", #"a"] : char list
val foldl3 = [#"c", #"b", #"a"] : char list
val foldriFun = fn : ['a. int * 'a * 'a list -> 'a list]
val foldri_0 = [] : char list
0val foldri_1 = [#"a"] : char list
10val foldri_2 = [#"a", #"b"] : char list
val foldrFun = fn : ['a. 'a * 'a list -> 'a list]
val foldr0 = [] : char list
val foldr1 = [#"a"] : char list
val foldr2 = [#"a", #"b"] : char list
val foldr3 = [#"a", #"b", #"c"] : char list
val findiFun = fn : int * char -> bool
val findi_0 = NONE : (int * CharArray.elem) option
0val findi_1F = NONE : (int * CharArray.elem) option
0val findi_1T = SOME (0, #"x") : (int * CharArray.elem) option
01val findi_2F = NONE : (int * CharArray.elem) option
01val findi_2T1 = SOME (1, #"x") : (int * CharArray.elem) option
0val findi_2T2 = SOME (0, #"x") : (int * CharArray.elem) option
0val findi_2T3 = SOME (0, #"x") : (int * CharArray.elem) option
val findFun = fn : char -> bool
val find_0 = NONE : CharArray.elem option
aval find_1F = NONE : CharArray.elem option
xval find_1T = SOME #"x" : CharArray.elem option
abval find_2F = NONE : CharArray.elem option
axval find_2T1 = SOME #"x" : CharArray.elem option
xval find_2T2 = SOME #"x" : CharArray.elem option
xval find_2T3 = SOME #"x" : CharArray.elem option
val existsFun = fn : char -> bool
val exists_0 = false : bool
aval exists_1F = false : bool
xval exists_1T = true : bool
abval exists_2F = false : bool
axval exists_2T1 = true : bool
xval exists_2T2 = true : bool
xval exists_2T3 = true : bool
val allFun = fn : char -> bool
val all_0 = true : bool
aval all_1F = false : bool
xval all_1T = true : bool
aval all_2F1 = false : bool
aval all_2F2 = false : bool
xaval all_2F3 = false : bool
xxval all_2T = true : bool
val collateFun = fn : char * char -> General.order
val collate00 = EQUAL : order
val collate01 = LESS : order
val collate10 = GREATER : order
val collate11L = LESS : order
val collate11E = EQUAL : order
val collate11G = GREATER : order
val collate12L = LESS : order
val collate12G = GREATER : order
val collate21L = LESS : order
val collate21G = GREATER : order
val collate22L1 = LESS : order
val collate22L2 = LESS : order
val collate22E = EQUAL : order
val collate22G1 = GREATER : order
val collate22G2 = GREATER : order
