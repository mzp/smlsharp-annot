val fromList_0 = "" : CharVector.vector
val fromList_1 = "a" : CharVector.vector
val fromList_2 = "ab" : CharVector.vector
val tabulateFun = fn : int -> Char.char
val tabulate0 = "" : CharVector.vector
val tabulate1 = "a" : CharVector.vector
val tabulate2 = "ab" : CharVector.vector
val tabulatem1 = "XXX" : CharVector.vector
val length1 = 0 : int
val length2 = 1 : int
val length3 = 2 : int
val sub00 = #"x" : CharVector.elem
val sub0m1 = #"x" : CharVector.elem
val sub01 = #"x" : CharVector.elem
val sub10 = #"a" : CharVector.elem
val sub11 = #"x" : CharVector.elem
val sub1m1 = #"x" : CharVector.elem
val sub20 = #"a" : CharVector.elem
val sub21 = #"b" : CharVector.elem
val sub22 = #"x" : CharVector.elem
val concat0 = "" : CharVector.vector
val concat10 = "" : CharVector.vector
val concat200 = "" : CharVector.vector
val concat11 = "a" : CharVector.vector
val concat201 = "a" : CharVector.vector
val concat210 = "a" : CharVector.vector
val concat211 = "ab" : CharVector.vector
val concat222 = "abcd" : CharVector.vector
val concat3303 = "abcxyz" : CharVector.vector
val concat3333 = "abcdefghi" : CharVector.vector
val testUpdate = fn : string * int * char -> string * string
val update00 = ("","") : string * string
val update0m1 = ("","") : string * string
val update01 = ("","") : string * string
val update10 = ("a","x") : string * string
val update11 = ("b","b") : string * string
val update1m1 = ("b","b") : string * string
val update20 = ("ab","xb") : string * string
val update21 = ("ab","ax") : string * string
val update22 = ("ab","ab") : string * string
val appiFun = fn : int * char -> unit
val appi_0 = () : unit
0aval appi_1 = () : unit
0a1bval appi_2 = () : unit
val appFun = fn : char -> unit
val app0 = () : unit
aval app1 = () : unit
abval app2 = () : unit
abcval app3 = () : unit
val mapiFun = fn : ['a .int * 'a -> 'a]
val mapi_0 = "" : CharVector.vector
0val mapi_1 = "a" : CharVector.vector
01val mapi_2 = "ab" : CharVector.vector
val mapFun = fn : char -> Char.char
val map0 = "" : CharVector.vector
aval map1 = "A" : CharVector.vector
abval map2 = "AB" : CharVector.vector
abcval map3 = "ABC" : CharVector.vector
val foldliFun = fn : int * char * char list -> char list
val foldli_0 = [] : char list
0val foldli_1 = [#"a"] : char list
01val foldli_2 = [#"b",#"a"] : char list
val foldlFun = fn : char * char list -> char list
val foldl0 = [] : char list
val foldl1 = [#"a"] : char list
val foldl2 = [#"b",#"a"] : char list
val foldl3 = [#"c",#"b",#"a"] : char list
val foldriFun = fn : int * char * char list -> char list
val foldri_0 = [] : char list
0val foldri_1 = [#"a"] : char list
10val foldri_2 = [#"a",#"b"] : char list
val foldrFun = fn : char * char list -> char list
val foldr0 = [] : char list
val foldr1 = [#"a"] : char list
val foldr2 = [#"a",#"b"] : char list
val foldr3 = [#"a",#"b",#"c"] : char list
val findiFun = fn : int * char -> bool
val findi_0 = NONE : (int * CharVector.elem) option
0val findi_1F = NONE : (int * CharVector.elem) option
0val findi_1T = SOME (0,#"x") : (int * CharVector.elem) option
01val findi_2F = NONE : (int * CharVector.elem) option
01val findi_2T1 = SOME (1,#"x") : (int * CharVector.elem) option
0val findi_2T2 = SOME (0,#"x") : (int * CharVector.elem) option
0val findi_2T3 = SOME (0,#"x") : (int * CharVector.elem) option
val findFun = fn : char -> bool
val find_0 = NONE : CharVector.elem option
aval find_1F = NONE : CharVector.elem option
xval find_1T = SOME #"x" : CharVector.elem option
abval find_2F = NONE : CharVector.elem option
axval find_2T1 = SOME #"x" : CharVector.elem option
xval find_2T2 = SOME #"x" : CharVector.elem option
xval find_2T3 = SOME #"x" : CharVector.elem option
val existsFun = fn : char -> bool
val exists_0 = false : bool
aval exists_1F = false : bool
xval exists_1T = true : bool
abval exists_2F = false : bool
axval exists_2T1 = true : bool
xval exists_2T2 = true : bool
xval exists_2T3 = true : bool
val allFun = fn : char -> bool
val all_0 = true : bool
aval all_1F = false : bool
xval all_1T = true : bool
aval all_2F1 = false : bool
aval all_2F2 = false : bool
xaval all_2F3 = false : bool
xxval all_2T = true : bool
val collateFun = fn : char * char -> General.order
val collate00 = EQUAL : order
val collate01 = LESS : order
val collate10 = GREATER : order
val collate11L = LESS : order
val collate11E = EQUAL : order
val collate11G = GREATER : order
val collate12L = LESS : order
val collate12G = GREATER : order
val collate21L = LESS : order
val collate21G = GREATER : order
val collate22L1 = LESS : order
val collate22L2 = LESS : order
val collate22E = EQUAL : order
val collate22G1 = GREATER : order
val collate22G2 = GREATER : order
