val L2A = fn : ['a .'a list -> 'a Array.array]
val L2V = fn : ['a .'a list -> 'a Vector.vector]
val S2A = fn : string -> char Array.array
val A2L = fn : ['a .'a Array.array -> 'a list]
val V2L = fn : ['a .'a Vector.vector -> 'a list]
val array_0i = [] : int list
val array_0r = [] : real list
val array_0ii = [] : (int * int) list
val array_1i = [1] : int list
val array_1r = [1.23] : real list
val array_1ii = [(1,2)] : (int * int) list
val array_2i = [1,1] : int list
val array_2r = [1.23,1.23] : real list
val array_2ii = [(1,2),(1,2)] : (int * int) list
val array_m1i = [999] : int list
val fromList_0i = [] : int list
val fromList_0r = [] : real list
val fromList_0ii = [] : (int * int) list
val fromList_1i = [1] : int list
val fromList_1r = [1.23] : real list
val fromList_1ii = [(1,2)] : (int * int) list
val fromList_2i = [1,2] : int list
val fromList_2r = [1.23,2.34] : real list
val fromList_2ii = [(1,2),(3,4)] : (int * int) list
val tabulateFun = fn : ['a .'a -> 'a]
val tabulate0 = [] : int list
val tabulate1 = [0] : int list
val tabulate2 = [0,1] : int list
val tabulatem1 = [999] : int list
val length1 = 0 : int
val length2 = 1 : int
val length3 = 2 : int
val sub00 = 1 : int
val sub0m1 = 1 : int
val sub01 = 1 : int
val sub10 = 1 : int
val sub11 = 1 : int
val sub1m1 = 1 : int
val sub20 = 1 : int
val sub21 = 2 : int
val sub22 = 3 : int
val testUpdate = fn : ['a .'a Array.array * int * 'a -> 'a list]
val update00 = [1] : int list
val update0m1 = [1] : int list
val update01 = [1] : int list
val update10 = [9] : int list
val update11 = [999] : int list
val update1m1 = [999] : int list
val update20 = [9,2] : int list
val update21 = [1,9] : int list
val update22 = [999] : int list
val vector_0 = [] : int list
val vector_1 = [1] : int list
val vector_2 = [1,2] : int list
val testCopy = fn : ['a .'a Array.array * 'a Array.array * int -> 'a list * 'a list]
val copy_0_3_0 = ([],[9,8,7]) : int list * int list
val copy_1_3_0 = ([1],[1,8,7]) : int list * int list
val copy_2_3_0 = ([1,2],[1,2,7]) : int list * int list
val copy_3_0_0 = ([~1],[~1]) : int list * int list
val copy_3_1_0 = ([~1],[~1]) : int list * int list
val copy_3_2_0 = ([~1],[~1]) : int list * int list
val copy_3_3_0 = ([1,2,3],[1,2,3]) : int list * int list
val copy_3_4_0 = ([1,2,3],[1,2,3,6]) : int list * int list
val copy_3_4_m1 = ([~1],[~1]) : int list * int list
val copy_3_4_0 = ([1,2,3],[1,2,3,6]) : int list * int list
val copy_3_4_1 = ([1,2,3],[9,1,2,3]) : int list * int list
val copy_3_4_2 = ([~1],[~1]) : int list * int list
val testCopyVec = fn : ['a .'a Vector.vector * 'a Array.array * int -> 'a list * 'a list]
val copyVec_0_3_0 = ([],[9,8,7]) : int list * int list
val copyVec_1_3_0 = ([1],[1,8,7]) : int list * int list
val copyVec_2_3_0 = ([1,2],[1,2,7]) : int list * int list
val copyVec_3_0_0 = ([~1],[~1]) : int list * int list
val copyVec_3_1_0 = ([~1],[~1]) : int list * int list
val copyVec_3_2_0 = ([~1],[~1]) : int list * int list
val copyVec_3_3_0 = ([1,2,3],[1,2,3]) : int list * int list
val copyVec_3_4_0 = ([1,2,3],[1,2,3,6]) : int list * int list
val copyVec_3_4_m1 = ([~1],[~1]) : int list * int list
val copyVec_3_4_0 = ([1,2,3],[1,2,3,6]) : int list * int list
val copyVec_3_4_1 = ([1,2,3],[9,1,2,3]) : int list * int list
val copyVec_3_4_2 = ([~1],[~1]) : int list * int list
val appiFun = fn : int * char -> unit
val appi_0 = SOME () : unit option
0aval appi_1 = SOME () : unit option
0a1bval appi_2 = SOME () : unit option
val appFun = fn : string -> unit
val app0 = () : unit
aval app1 = () : unit
abval app2 = () : unit
abcval app3 = () : unit
val modifyiFun = fn : int * char -> Char.char
val testModifyi = fn : char Array.array -> char list
val modifyi_0 = [] : char list
0val modifyi_1 = [#"A"] : char list
01val modifyi_2 = [#"A",#"B"] : char list
val modifyFun = fn : int -> int
val testModify = fn : int Array.array -> int list
val modify0 = [] : int list
1val modify1 = [2] : int list
12val modify2 = [2,3] : int list
123val modify3 = [2,3,4] : int list
val foldliFun = fn : ['a .int * 'a * 'a list -> 'a list]
val foldli_0 = [] : char list
0val foldli_1 = [#"a"] : char list
01val foldli_2 = [#"b",#"a"] : char list
val foldlFun = fn : ['a .'a * 'a list -> 'a list]
val foldl0 = [] : int list
val foldl1 = [1] : int list
val foldl2 = [2,1] : int list
val foldl3 = [3,2,1] : int list
val foldriFun = fn : ['a .int * 'a * 'a list -> 'a list]
val foldri_0 = [] : char list
0val foldri_1 = [#"a"] : char list
10val foldri_2 = [#"a",#"b"] : char list
val foldrFun = fn : ['a .'a * 'a list -> 'a list]
val foldr0 = [] : int list
val foldr1 = [1] : int list
val foldr2 = [1,2] : int list
val foldr3 = [1,2,3] : int list
val findiFun = fn : int * char -> bool
val findi_0 = NONE : (int * char) option
0val findi_1F = NONE : (int * char) option
0val findi_1T = SOME (0,#"x") : (int * char) option
01val findi_2F = NONE : (int * char) option
01val findi_2T1 = SOME (1,#"x") : (int * char) option
0val findi_2T2 = SOME (0,#"x") : (int * char) option
0val findi_2T3 = SOME (0,#"x") : (int * char) option
val findFun = fn : char -> bool
val find_0 = NONE : char option
aval find_1F = NONE : char option
xval find_1T = SOME #"x" : char option
abval find_2F = NONE : char option
axval find_2T1 = SOME #"x" : char option
xval find_2T2 = SOME #"x" : char option
xval find_2T3 = SOME #"x" : char option
val existsFun = fn : char -> bool
val exists_0 = false : bool
aval exists_1F = false : bool
xval exists_1T = true : bool
abval exists_2F = false : bool
axval exists_2T1 = true : bool
xval exists_2T2 = true : bool
xval exists_2T3 = true : bool
val allFun = fn : char -> bool
val all_0 = true : bool
aval all_1F = false : bool
xval all_1T = true : bool
aval all_2F1 = false : bool
aval all_2F2 = false : bool
xaval all_2F3 = false : bool
xxval all_2T = true : bool
val collateFun = fn : int * int -> General.order
val collate00 = EQUAL : order
val collate01 = LESS : order
val collate10 = GREATER : order
val collate11L = LESS : order
val collate11E = EQUAL : order
val collate11G = GREATER : order
val collate12L = LESS : order
val collate12G = GREATER : order
val collate21L = LESS : order
val collate21G = GREATER : order
val collate22L1 = LESS : order
val collate22L2 = LESS : order
val collate22E = EQUAL : order
val collate22G1 = GREATER : order
val collate22G2 = GREATER : order
