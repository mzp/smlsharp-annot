_require "SQLPrim.smi"
_require "SQLUtils.smi"

structure SQL =
struct
  type 'a server = 'a SMLSharp.SQL.server
  type 'a conn = 'a SMLSharp_SQL_Prim.conn
  type ('a,'b) db = ('a,'b) SMLSharp_SQL_Prim.db
  type ('a,'b) table = ('a,'b) SMLSharp_SQL_Prim.table
  type ('a,'b) row = ('a,'b) SMLSharp_SQL_Prim.row
  type ('a,'b) value = ('a,'b) SMLSharp_SQL_Prim.value
  type 'a query = 'a SMLSharp_SQL_Prim.query
  type command = SMLSharp_SQL_Prim.command
  type 'a rel = 'a SMLSharp_SQL_Prim.rel
  type result = SMLSharp_SQL_Prim.result

  exception Type = SMLSharp_SQL_Prim.Type
  exception Format = SMLSharp_SQL_Prim.Format
  exception Exec = SMLSharp_SQL_Prim.Exec
  exception Connect = SMLSharp_SQL_Prim.Connect
  exception Link = SMLSharp_SQL_Prim.Link

  val connect : 'a server -> 'a conn
  val fetch : 'a rel -> ('a * 'a rel) option
  val closeConn : 'a conn -> unit
  val closeRel : 'a rel -> unit
  val subquery : (('a,'b) db -> 'c query) -> ('a,'b) db -> ('c,'b) table
  val exists : (('a,'b) db -> 'c query) -> ('a,'b) db -> (bool option, 'b) value
  val Some : ('a, 'b) value -> ('a option, 'b) value
  val Null : ('a option, 'b) value

  val queryString : (('a,'b) db -> 'c query) -> 'a server -> string
  val commandString : (('a,'b) db -> command) -> 'a server -> string

  val + =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.add_int
      | word => SMLSharp_SQL_Prim.add_word
      | real => SMLSharp_SQL_Prim.add_real
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.add_intOption
        | word => SMLSharp_SQL_Prim.add_wordOption
        | real => SMLSharp_SQL_Prim.add_realOption

  val - =
      case 'a in ('a, 'b) value * ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.sub_int
      | word => SMLSharp_SQL_Prim.sub_word
      | real => SMLSharp_SQL_Prim.sub_real
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.sub_intOption
        | word => SMLSharp_SQL_Prim.sub_wordOption
        | real => SMLSharp_SQL_Prim.sub_realOption

  val * =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.mul_int
      | word => SMLSharp_SQL_Prim.mul_word
      | real => SMLSharp_SQL_Prim.mul_real
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.mul_intOption
        | word => SMLSharp_SQL_Prim.mul_wordOption
        | real => SMLSharp_SQL_Prim.mul_realOption

  val / =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.div_int
      | word => SMLSharp_SQL_Prim.div_word
      | real => SMLSharp_SQL_Prim.div_real
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.div_intOption
        | word => SMLSharp_SQL_Prim.div_wordOption
        | real => SMLSharp_SQL_Prim.div_realOption

  val div =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.div_int
      | word => SMLSharp_SQL_Prim.div_word
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.div_intOption
        | word => SMLSharp_SQL_Prim.div_wordOption

  val mod =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.mod_int
      | word => SMLSharp_SQL_Prim.mod_word
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.mod_intOption
        | word => SMLSharp_SQL_Prim.mod_wordOption

  val neg =
      case 'a in
        ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.neg_int
      | word => SMLSharp_SQL_Prim.neg_real
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.neg_intOption
        | word => SMLSharp_SQL_Prim.neg_realOption

  val abs =
      case 'a in
        ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.abs_int
      | word => SMLSharp_SQL_Prim.abs_real
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.abs_intOption
        | word => SMLSharp_SQL_Prim.abs_realOption

  val < =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        int => SMLSharp_SQL_Prim.lt_int
      | word => SMLSharp_SQL_Prim.lt_word
      | char => SMLSharp_SQL_Prim.lt_char
      | string => SMLSharp_SQL_Prim.lt_string
      | real => SMLSharp_SQL_Prim.lt_real
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value
          -> (bool option, 'b) value
        of
          int => SMLSharp_SQL_Prim.lt_intOption
        | word => SMLSharp_SQL_Prim.lt_wordOption
        | char => SMLSharp_SQL_Prim.lt_charOption
        | bool => SMLSharp_SQL_Prim.lt_boolOption
        | string => SMLSharp_SQL_Prim.lt_stringOption
        | real => SMLSharp_SQL_Prim.lt_realOption

  val <= =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        int => SMLSharp_SQL_Prim.le_int
      | word => SMLSharp_SQL_Prim.le_word
      | char => SMLSharp_SQL_Prim.le_char
      | string => SMLSharp_SQL_Prim.le_string
      | real => SMLSharp_SQL_Prim.le_real
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value
          -> (bool option, 'b) value
        of
          int => SMLSharp_SQL_Prim.le_intOption
        | word => SMLSharp_SQL_Prim.le_wordOption
        | char => SMLSharp_SQL_Prim.le_charOption
        | bool => SMLSharp_SQL_Prim.le_boolOption
        | string => SMLSharp_SQL_Prim.le_stringOption
        | real => SMLSharp_SQL_Prim.le_realOption

  val > =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        int => SMLSharp_SQL_Prim.gt_int
      | word => SMLSharp_SQL_Prim.gt_word
      | char => SMLSharp_SQL_Prim.gt_char
      | string => SMLSharp_SQL_Prim.gt_string
      | real => SMLSharp_SQL_Prim.gt_real
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value
          -> (bool option, 'b) value
        of
          int => SMLSharp_SQL_Prim.gt_intOption
        | word => SMLSharp_SQL_Prim.gt_wordOption
        | char => SMLSharp_SQL_Prim.gt_charOption
        | bool => SMLSharp_SQL_Prim.gt_boolOption
        | string => SMLSharp_SQL_Prim.gt_stringOption
        | real => SMLSharp_SQL_Prim.gt_realOption

  val >= =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        int => SMLSharp_SQL_Prim.ge_int
      | word => SMLSharp_SQL_Prim.ge_word
      | char => SMLSharp_SQL_Prim.ge_char
      | string => SMLSharp_SQL_Prim.ge_string
      | real => SMLSharp_SQL_Prim.ge_real
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value
          -> (bool option, 'b) value
        of
          int => SMLSharp_SQL_Prim.ge_intOption
        | word => SMLSharp_SQL_Prim.ge_wordOption
        | char => SMLSharp_SQL_Prim.ge_charOption
        | bool => SMLSharp_SQL_Prim.ge_boolOption
        | string => SMLSharp_SQL_Prim.ge_stringOption
        | real => SMLSharp_SQL_Prim.ge_realOption

  val == =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        int => SMLSharp_SQL_Prim.eq_int
      | word => SMLSharp_SQL_Prim.eq_word
      | char => SMLSharp_SQL_Prim.eq_char
      | string => SMLSharp_SQL_Prim.eq_string
      | real => SMLSharp_SQL_Prim.eq_real
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value
          -> (bool option, 'b) value
        of
          int => SMLSharp_SQL_Prim.eq_intOption
        | word => SMLSharp_SQL_Prim.eq_wordOption
        | char => SMLSharp_SQL_Prim.eq_charOption
        | bool => SMLSharp_SQL_Prim.eq_boolOption
        | string => SMLSharp_SQL_Prim.eq_stringOption
        | real => SMLSharp_SQL_Prim.eq_realOption

  val <> =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        int => SMLSharp_SQL_Prim.neq_int
      | word => SMLSharp_SQL_Prim.neq_word
      | char => SMLSharp_SQL_Prim.neq_char
      | string => SMLSharp_SQL_Prim.neq_string
      | real => SMLSharp_SQL_Prim.neq_real
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value
          -> (bool option, 'b) value
        of
          int => SMLSharp_SQL_Prim.neq_intOption
        | word => SMLSharp_SQL_Prim.neq_wordOption
        | char => SMLSharp_SQL_Prim.neq_charOption
        | bool => SMLSharp_SQL_Prim.neq_boolOption
        | string => SMLSharp_SQL_Prim.neq_stringOption
        | real => SMLSharp_SQL_Prim.neq_realOption

  val ^ : (string, 'a) value * (string, 'a) value -> (string, 'a) value

  val andAlso
      : (bool option, 'a) value * (bool option, 'a) value
        -> (bool option, 'a) value
  val orElse
      : (bool option, 'a) value * (bool option, 'a) value
        -> (bool option, 'a) value
  val not
      : (bool option, 'a) value -> (bool option, 'a) value

  val isNull
      : ('a option, 'a) value -> (bool option, 'a) value
  val isNotNull
      : ('a option, 'a) value -> (bool option, 'a) value

  val toSQL =
      case 'a in
        'a -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.toSQL_int
      | word => SMLSharp_SQL_Prim.toSQL_word
      | char => SMLSharp_SQL_Prim.toSQL_char
      | string => SMLSharp_SQL_Prim.toSQL_string
      | real => SMLSharp_SQL_Prim.toSQL_real
      | 'c option =>
        case 'c in
          'c option -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.toSQL_intOption
        | word => SMLSharp_SQL_Prim.toSQL_wordOption
        | char => SMLSharp_SQL_Prim.toSQL_charOption
        | bool => SMLSharp_SQL_Prim.toSQL_boolOption
        | string => SMLSharp_SQL_Prim.toSQL_stringOption
        | real => SMLSharp_SQL_Prim.toSQL_realOption

  exception NotOne = SMLSharp_SQL_Utils.NotOne
  val fetchAll : 'a rel -> 'a list
  val fetchOne : 'a rel -> 'a

end
