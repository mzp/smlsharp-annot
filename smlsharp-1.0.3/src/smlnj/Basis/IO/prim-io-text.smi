_require "../../../basis/main/OS.smi"
_require "../../../basis/main/Option.smi"
_require "../../../basis/main/IO.smi"
_require "../../../basis/main/Int.smi"
_require "../../../basis/main/General.smi"
_require "../../../basis/main/PRIM_IO.sig"
_require "../../../basis/main/CharVector.smi"
_require "../../../basis/main/CharVectorSlice.smi"
_require "../../../basis/main/CharArray.smi"

structure TextPrimIO =
struct
  type elem = CharVector.elem
  type vector = CharVector.vector
  type vector_slice = CharVectorSlice.slice
  type array = CharArray.array
  type array_slice = CharArraySlice.slice
  type pos = Position.int
  val compare : pos * pos -> order
  datatype reader =
      RD of {name : string,
             chunkSize : int,
             readVec : (int -> vector) option,
             readArr : (array_slice -> int) option,
             readVecNB : (int -> vector option) option,
             readArrNB : (array_slice -> int option) option,
             block : (unit -> unit) option,
             canInput : (unit -> bool) option,
             avail : unit -> int option,
             getPos : (unit -> pos) option,
             setPos : (pos -> unit) option,
             endPos : (unit -> pos) option,
             verifyPos : (unit -> pos) option,
             close : unit -> unit,
             ioDesc : OS.IO.iodesc option}
  datatype writer =
      WR of {name : string,
             chunkSize : int,
             writeVec : (vector_slice -> int) option,
             writeArr : (array_slice -> int) option,
             writeVecNB : (vector_slice -> int option) option,
             writeArrNB : (array_slice -> int option) option,
             block : (unit -> unit) option,
             canOutput : (unit -> bool) option,
             getPos : (unit -> pos) option,
             setPos : (pos -> unit) option,
             endPos : (unit -> pos) option,
             verifyPos : (unit -> pos) option,
             close : unit -> unit,
             ioDesc : OS.IO.iodesc option}
  val openVector : vector -> reader
  val nullRd : unit -> reader
  val nullWr : unit -> writer
  val augmentReader : reader -> reader
  val augmentWriter : writer -> writer
end
