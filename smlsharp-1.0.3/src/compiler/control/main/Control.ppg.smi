_require "../../../basis/main/General.smi"
_require "../../../basis/main/Int.smi"
_require "../../../basis/main/List.smi"
_require "../../../basis/main/String.smi"
_require "../../../basis/main/Substring.smi"
_require "../../../basis/main/TextIO.smi"
_require "../../../basis/main/binary-op.smi"
_require "../../../smlformat-lib.smi"
_require "Loc.ppg.smi"

structure Control =
struct
  val Elab : int
  val Name : int
  val Module : int
  val FunOpt : int
  val TVar : int
  val TyInf : int

  val Print : int
  val UniqueID : int
  val MatchComp : int
  val SQLComp : int
  val FFIComp : int
  val OverloadComp : int
  val Lambda : int
  val Static : int
  val Unbox : int
  val Inline : int
  val RefElim : int
  val DeadCode : int
  val Localize : int
  val Functor : int
  val Cluster : int
  val RBUComp : int
  val Anormal : int
  val SI : int
  val SIOpt : int
  val AI : int
  val AIOpt : int
  val Assem : int
  val Code : int
  val Run : int
  val doUntil : int ref
  val doNameEval : bool ref
  val doPhase : int -> bool
  datatype switch =
           IntSwitch of int ref
         | BoolSwitch of bool ref
         | StringSwitch of string ref
  type switchTable = (string * switch) list
  exception Bug of string
  exception BugWithLoc of string * Loc.loc
  val printWidth : int ref
  val prettyPrint : SMLFormat.FormatExpression.expression list -> string
  val printCommand : bool ref
  val debugPrint : bool ref
  val debugTrace : bool ref
  val printBinds : bool ref
  val printWarning : bool ref
  val skipPrinter : bool ref
  val generateExnHistory : bool ref
  val generateDebugInfo : bool ref
  val LARGEFFISWITCH : bool ref
  val doUncurryOptimization : bool ref
  val enableUnboxedFloat : bool ref
  val alignRecord : bool ref
  val doSymbolicInstructionsOptimization : bool ref
  val doConstantFolding : bool ref
  val doFunctionCallSpecialization : bool ref
  val limitOfBlockFields : int ref
  val doTailCallOptimize : bool ref
  val doRecursiveCallOptimize : bool ref
  val doSelfRecursiveCallOptimize : bool ref
  val doInlineCaseBranch : bool ref
  val limitOfInlineCaseBranch : int ref
  val doUncurryingOptimizeInMatchCompile : bool ref
  val doRecordUnboxing : bool ref
  val doInlining : bool ref
  val inlineThreshold : int ref
  val doMultipleValueOptimization : bool ref
  val doFunctionLocalize : bool ref
  val doCommonSubexpressionElimination : bool ref
  val doRepresentationAnalysis : bool ref
  val doUselessCodeElimination : bool ref
  val doStackReallocation : bool ref
  val doStaticAllocation : bool ref
  val doRegisterCoalescing : bool ref
  val doFrameCompaction : bool ref
  val doBitmapANormalReorder : bool ref
  val insertCheckGC : bool ref
  val pageSizeOfGlobalArray : int ref
  val doPreludeLazyUnpickling : bool ref
  val VMHeapSize : int ref
  val VMStackSize : int ref
  val switchTrace : bool ref
  val traceFileLoad : bool ref
  val tracePrelude : bool ref
  val printSource : bool ref
  val printEL : bool ref
  val printNE : bool ref
  val printMC : bool ref
  val printVR : bool ref
  val printPL : bool ref
  val printUC : bool ref
  val printTP : bool ref
  val printTFP : bool ref
  val printRC : bool ref
  val printTL : bool ref
  val printAC : bool ref
  val printMV : bool ref
  val printCC : bool ref
  val printRBU : bool ref
  val printAN : bool ref
  val printIL : bool ref
  val printLS : bool ref
  val printIS : bool ref
  val printSR : bool ref
  val printRTL : bool ref
  val printCode : bool ref
  val checkType : bool ref
  val printWithType : bool ref
  val printAI : bool ref
  val printML : bool ref
  val printOBJ : bool ref
  val withoutLink : bool ref
  val keepAsm : bool ref
  val debugCodeGen : bool ref
  val targetPlatform : string ref
  val targetInfo : unit -> {cpu: string, manufacturer: string, ossys: string,
                            options: (bool * string) list}
  val nativeGen : unit -> bool
  val printDiagnosis : bool ref
  val interactiveMode : bool ref
  val doProfile : bool ref
  val doCompileObj : bool ref
  val doFunctorCompile : bool ref
  val doLinking : bool ref
  val traceSMLFormat : int ref
  val firstLinePrompt : string ref
  val secondLinePrompt : string ref
  val skipShebang : bool ref
  val newRBU : bool ref
  val annot : bool ref
  val switchTable : switchTable
  val switchToString : switch -> string
  val interpretControlOption : string * switch * string ->  unit
  val setControlOptions : string -> (string -> string option) -> unit
  val listSwitches : unit -> switchTable
end
