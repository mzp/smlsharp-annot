_require "../../../basis.smi"
_require "../../../smlnj-lib/Util/ord-key-sig.sml"
_require "../../../smlnj-lib/Util/binary-map-fn.smi"
_require "../../../smlformat-lib.smi"
_require "../../../compiler-utils/env/main/SEnv.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"

_require "../../builtin/main/BuiltinName.smi"
_require "../../builtin/main/BuiltinPrimitive.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../util/main/BigInt_IntInf.smi"
_require "../../util/main/TermFormat.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "../../types/main/IDCalc.ppg.smi"
_require "../../types/main/Types.ppg.smi"
_require "../../types/main/BuiltinEnv.smi"
_require "../../types/main/vars.smi"
_require "../../typedcalc/main/TypedCalc.ppg.smi"
_require "../../recordcalc/main/RecordCalc.ppg.smi"

structure MatchData = 
struct
(*
  structure A =
  struct
    type longid = Absyn.longid
    val format_longid
        : longid -> SMLFormat.FormatExpression.expression list
    datatype constant = datatype Absyn.constant
    val format_constant
        : constant -> SMLFormat.FormatExpression.expression list
    type ffiAttributes = Absyn.ffiAttributes
    val format_ffiAttributes
        : ffiAttributes -> SMLFormat.FormatExpression.expression list
    val defaultFFIAttributes : ffiAttributes
    datatype globalSymbolKind = datatype Absyn.globalSymbolKind
    val format_globalSymbolKind
        : globalSymbolKind -> SMLFormat.FormatExpression.expression list
    datatype eq = datatype Absyn.eq
    val format_eq
        : eq -> SMLFormat.FormatExpression.expression list
    datatype ty = datatype Absyn.ty
    datatype tvarKind = datatype Absyn.tvarKind
    val format_ty
        : ty -> SMLFormat.FormatExpression.expression list
    val format_tvarKind
        : tvarKind -> SMLFormat.FormatExpression.expression list
    type tvar = Absyn.tvar
    val format_tvar
        : tvar -> SMLFormat.FormatExpression.expression list
    type kindedTvar = Absyn.kindedTvar
    val format_kindedTvar
        : kindedTvar -> SMLFormat.FormatExpression.expression list
    datatype ffiTy = datatype Absyn.ffiTy
    val format_ffiTy
        : ffiTy -> SMLFormat.FormatExpression.expression list
    datatype pat = datatype Absyn.pat
    datatype patrow = datatype Absyn.patrow
    val format_pat
        : pat -> SMLFormat.FormatExpression.expression list
    val format_patrow
        : patrow -> SMLFormat.FormatExpression.expression list
    type typbind = Absyn.typbind
    val format_typbind
        : typbind -> SMLFormat.FormatExpression.expression list
    datatype exp = datatype Absyn.exp
    datatype dec = datatype Absyn.dec
    datatype strdec = datatype Absyn.strdec
    datatype sigexp = datatype Absyn.sigexp
    datatype spec = datatype Absyn.spec
    datatype topdec = datatype Absyn.topdec
    val format_exp
        : exp -> SMLFormat.FormatExpression.expression list
    val format_dec
        : dec -> SMLFormat.FormatExpression.expression list
    val format_sigexp
        : sigexp -> SMLFormat.FormatExpression.expression list
    val format_spec
        : spec -> SMLFormat.FormatExpression.expression list
    val format_topdec
        : topdec -> SMLFormat.FormatExpression.expression list
    type unit = Absyn.unit
    val format_unit
        : unit -> SMLFormat.FormatExpression.expression list
    datatype unitparseresult = datatype Absyn.unitparseresult
    val format_unitparseresult
        : unitparseresult -> SMLFormat.FormatExpression.expression list
    val getLocTy : ty -> Loc.loc
    val getLocPat : pat -> Loc.loc
    val replaceLoc : exp * Loc.loc -> exp
    val isShortId : longid -> bool
    val longidToString : longid -> string
    val getLastIdOfLongid : longid -> string
    val getParentIdsOfLongid : longid -> longid
  end

  structure T =
  struct
    type dummyTyID = Types.dummyTyID
    val format_dummyTyID
        : dummyTyID -> SMLFormat.FormatExpression.expression list
    type freeTypeVarID = Types.freeTypeVarID
    val format_freeTypeVarID
        : freeTypeVarID -> SMLFormat.FormatExpression.expression list
    type lambdaDepth = Types.lambdaDepth
    val infiniteDepth : lambdaDepth
    val toplevelDepth : lambdaDepth
    val youngerDepth
        : {contextDepth: lambdaDepth, tyvarDepth: lambdaDepth} -> bool
    val strictlyYoungerDepth
        : {contextDepth: lambdaDepth, tyvarDepth: lambdaDepth} -> bool
    datatype ty = datatype Types.ty
    datatype tvarKind = datatype Types.tvarKind
    datatype dtyKind = datatype Types.dtyKind
    datatype opaqueRep = datatype Types.opaqueRep
    datatype tvState = datatype Types.tvState
    datatype singletonTy = datatype Types.singletonTy
    datatype overloadMatch = datatype Types.overloadMatch
    type tvKind = Types.tvKind
    type tyCon = Types.tyCon
    type polyTy = Types.polyTy
    type oprimSelector = Types.oprimSelector
    val format_tvarKind
        : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
          -> tvarKind -> SMLFormat.FormatExpression.expression list
    val format_tvState
        : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
          -> tvState -> SMLFormat.FormatExpression.expression list
    val format_ty
        : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
          -> ty -> SMLFormat.FormatExpression.expression list
    val format_tvKind
        : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
          -> tvKind -> SMLFormat.FormatExpression.expression list
    val format_oprimSelector
        : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
          -> oprimSelector -> SMLFormat.FormatExpression.expression list
    type btvKind = Types.btvKind
    val format_btvKind
        : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
          * SMLFormat.FormatExpression.expression list
          -> btvKind -> SMLFormat.FormatExpression.expression list
    type btvEnv = Types.btvEnv
    val format_btvEnv
        : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
          -> btvEnv -> SMLFormat.FormatExpression.expression list
    type formatBtvEnv = Types.formatBtvEnv
    type varInfo = Types.varInfo
    val format_varInfo
        : varInfo -> SMLFormat.FormatExpression.expression list
    val formatWithType_varInfo
        : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv list
          -> varInfo -> SMLFormat.FormatExpression.expression list
    type exVarInfo = Types.exVarInfo
    val format_exVarInfo
        : exVarInfo -> SMLFormat.FormatExpression.expression list
    val formatWithType_exVarInfo
        : {eqKind:Absyn.eq, tvarKind:tvarKind} TermFormat.btvEnv' list
          -> exVarInfo -> SMLFormat.FormatExpression.expression list
    type primInfo = Types.primInfo
    val format_primInfo
        : primInfo -> SMLFormat.FormatExpression.expression list
    val formatWithType_primInfo
        : {eqKind:Absyn.eq, tvarKind:tvarKind} TermFormat.btvEnv' list
          -> primInfo -> SMLFormat.FormatExpression.expression list
    type oprimInfo = Types.oprimInfo
    val format_oprimInfo
        : oprimInfo -> SMLFormat.FormatExpression.expression list
    type typInfo = Types.typInfo
    val format_typInfo
        : typInfo -> SMLFormat.FormatExpression.expression list
    type conInfo = Types.conInfo
    val format_conInfo
        : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
          -> conInfo -> SMLFormat.FormatExpression.expression list
    type exnInfo = Types.exnInfo
    val format_exnInfo
        : exnInfo -> SMLFormat.FormatExpression.expression list
    type exExnInfo = Types.exExnInfo
    val format_exExnInfo
        : exExnInfo -> SMLFormat.FormatExpression.expression list
    type foreignFunTy = Types.foreignFunTy
    val format_foreignFunTy
        : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
          -> foreignFunTy -> SMLFormat.FormatExpression.expression list
    val univKind
        : {tvarKind: tvarKind,
           eqKind: Absyn.eq,
           utvarOpt: IDTypes.tvar option}
    val kindedTyvarList : tvState ref list ref
    val newTvStateRef
        : {lambdaDepth: lambdaDepth,
           tvarKind: tvarKind,
           eqKind: Absyn.eq,
           utvarOpt: IDTypes.tvar option}
          -> tvState ref
    val newty
        : {tvarKind: tvarKind,
           eqKind: Absyn.eq,
           utvarOpt: IDTypes.tvar option}
          -> ty
    val newUtvar : lambdaDepth * Absyn.eq * IDTypes.tvar -> tvState ref
    val newtyRaw
        : {lambdaDepth: lambdaDepth,
           tvarKind: tvarKind,
           eqKind: Absyn.eq,
           utvarOpt: IDTypes.tvar option}
          -> ty
    val newtyWithLambdaDepth
        : (lambdaDepth * {tvarKind: tvarKind,
                          eqKind: Absyn.eq,
                          utvarOpt: IDTypes.tvar option})
          -> ty
    val printTy : ty -> unit
    val tyToString : ty -> string
  end

  structure TC =
  struct
    datatype idstatus = datatype TypedCalc.idstatus
    val format_idstatus
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv list
          -> idstatus -> SMLFormat.FormatExpression.expression list
    datatype exnCon = datatype TypedCalc.exnCon
    val format_exnCon
        : exnCon -> SMLFormat.FormatExpression.expression list
    datatype ffiTy = datatype TypedCalc.ffiTy
    val format_ffiTy
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv list
          -> ffiTy TermFormat.formatter
    datatype tpexp = datatype TypedCalc.tpexp
    datatype tpdecl = datatype TypedCalc.tpdecl
    datatype tppat = datatype TypedCalc.tppat
    val format_tpexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv list
          -> tpexp -> SMLFormat.FormatExpression.expression list
    val format_tpdecl
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv list
          -> tpdecl SMLFormat.BasicFormatters.formatter
    val format_tppat
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv list
          -> tppat -> SMLFormat.FormatExpression.expression list
    val format_fields
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv list
          -> tpexp LabelEnv.map -> SMLFormat.FormatExpression.expression list
    val format_patfields
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv list
          -> tppat LabelEnv.map -> SMLFormat.FormatExpression.expression list
  end

  structure RC = 
  struct
    type loc = RecordCalc.loc
    type ty = RecordCalc.ty
    val format_ty
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} 
              TermFormat.btvEnv list
          -> ty -> SMLFormat.FormatExpression.expression list
    type conInfo = RecordCalc.conInfo
    val format_conInfo
        : 'a list
          -> {id:'b, path:string list, ty:'c}
          -> SMLFormat.BasicFormatters.expression list
    val formatWithoutType_conInfo
        : {id:'a, path:string list, ty:'b}
          -> SMLFormat.BasicFormatters.expression list
    type exnInfo = RecordCalc.exnInfo
    val format_exnInfo
        : 'a
          -> {id:ExnID.id, path:string list, ty:'b}
          -> SMLFormat.FormatExpression.expression list
    val formatWithoutType_exnInfo
        : {id:ExnID.id, path:string list, ty:'a}
          -> SMLFormat.FormatExpression.expression list
    type exExnInfo = RecordCalc.exExnInfo
    val format_exExnInfo
        : 'a
          -> {path:string list, ty:'b}
          -> SMLFormat.FormatExpression.expression list
    val formatWithoutType_exExnInfo
        : {path:string list, ty:'a}
          -> SMLFormat.FormatExpression.expression list
    datatype exnCon = datatype RecordCalc.exnCon
    val format_exnCon
        : exnCon -> SMLFormat.FormatExpression.expression list
    val formatWithoutType_exnCon
        : exnCon -> SMLFormat.FormatExpression.expression list
    type varInfo = RecordCalc.varInfo
    val format_varInfo
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv list
          -> {id:VarID.id, path:string list, ty:ty}
          -> SMLFormat.FormatExpression.expression list
    val formatWithoutType_varInfo
        : {id:VarID.id, path:string list, ty:'a}
          -> SMLFormat.BasicFormatters.expression list
    type exVarInfo = RecordCalc.exVarInfo
    val format_exVarInfo
        : 'a
          -> {path:string list, ty:'b}
          -> SMLFormat.FormatExpression.expression list
    val formatWithoutType_exVarInfo
        : {path:string list, ty:'a}
          -> SMLFormat.FormatExpression.expression list
    type primInfo = RecordCalc.primInfo
    val format_primInfo
        : 'a
          -> {primitive:BuiltinPrimitive.primitive, ty:'b}
          -> SMLFormat.FormatExpression.expression list
    val formatWithoutType_primInfo
        : {primitive:BuiltinPrimitive.primitive, ty:'a}
          -> SMLFormat.FormatExpression.expression list
    type oprimInfo = RecordCalc.oprimInfo
    val format_oprimInfo
        : 'a
          -> {id:'b, path:string list, ty:'c}
          -> SMLFormat.FormatExpression.expression list
    val formatWithoutType_oprimInfo
        : {id:'a, path:string list, ty:'b}
          -> SMLFormat.FormatExpression.expression list
    type btvEnv = RecordCalc.btvEnv
    val format_btvEnv
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv list
          -> {eqKind:Absyn.eq, tvarKind:Types.tvarKind} BoundTypeVarID.Map.map
          -> SMLFormat.FormatExpression.expression list
    type constant = RecordCalc.constant
    val format_constant
        : constant -> SMLFormat.FormatExpression.expression list
    datatype rcexp = datatype RecordCalc.rcexp
    datatype rcsqlexp = datatype RecordCalc.rcsqlexp
    datatype rcffiexp = datatype RecordCalc.rcffiexp
    datatype rcdecl = datatype RecordCalc.rcdecl
    val format_rcexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv list
          -> rcexp -> SMLFormat.FormatExpression.expression list
    val format_rcsqlexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv list
          -> rcsqlexp -> SMLFormat.FormatExpression.expression list
    val format_rcffiexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv list
          -> rcffiexp -> SMLFormat.FormatExpression.expression list
    val format_rcdecl
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv list
          -> rcdecl TermFormat.formatter
    val formatWithoutType_rcexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv list
          -> rcexp -> TermFormat.format
    val formatWithoutType_rcsqlexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv list
          -> rcsqlexp -> SMLFormat.FormatExpression.expression list
    val formatWithoutType_rcffiexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv list
          -> rcffiexp -> SMLFormat.FormatExpression.expression list
    val formatWithoutType_rcdecl
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv list
          -> rcdecl TermFormat.formatter
    val format_rcdecl' : rcdecl TermFormat.formatter
    val formatWithoutType_rcdecl' : rcdecl TermFormat.formatter
  end

  structure BE =
  struct
    type env = BuiltinEnv.env
    val init : env -> unit
    val exnTy : IDTypes.ty
    val unitTy : IDTypes.ty
    val exntagTy : IDTypes.ty
    val findTfun : string -> IDTypes.tfun option
    val CHARty : Types.ty
    val INTty : Types.ty
    val INTINFty : Types.ty
    val PTRty : Types.ty
    val REALty : Types.ty
    val REAL32ty : Types.ty
    val STRINGty : Types.ty
    val UNITty : Types.ty
    val WORD8ty : Types.ty
    val WORDty : Types.ty
    val ARRAYtyCon : Types.tyCon
    val REFtyCon : unit -> Types.tyCon
    val EXNty : Types.ty
    val BOXEDty : Types.ty
    val EXNTAGty : Types.ty
    val CHARtyCon : Types.tyCon
    val INTtyCon : Types.tyCon
    val INTINFtyCon : Types.tyCon
    val PTRtyCon : Types.tyCon
    val REALtyCon : Types.tyCon
    val REAL32tyCon : Types.tyCon
    val STRINGtyCon : Types.tyCon
    val UNITtyCon : Types.tyCon
    val WORD8tyCon : Types.tyCon
    val WORDtyCon : Types.tyCon
    val EXNtyCon : Types.tyCon
    val BOXEDtyCon : Types.tyCon
    val EXNTAGtyCon : Types.tyCon
    val lookupTyCon : BuiltinName.path -> Types.tyCon
    val lookupCon : BuiltinName.path -> Types.conInfo
    val lookupExn : BuiltinName.path -> Types.exExnInfo
    val findExn : BuiltinName.path -> Types.exExnInfo option
  end
*) 
  datatype kind = Bind | Match | Handle of Types.varInfo
    
  type const = Absyn.constant
  type conInfo = Types.conInfo
  type exnCon = TypedCalc.exnCon

  structure ConstOrd = 
  struct
    type ord_key = const
    val compare : ord_key * ord_key -> order
  end

  structure DataConOrd = 
  struct
    type ord_key = conInfo * bool
    val compare : ord_key * ord_key -> order
  end

  structure ExnConOrd = 
  struct
    type ord_key = exnCon * bool
    val compare : ord_key * ord_key -> order
  end

  structure SSOrd = 
  struct
    type ord_key = string * string
    val compare : ord_key * ord_key -> order
  end

  structure ConstMap =
  struct
    structure Key =
      struct
        type ord_key = ConstOrd.ord_key
        val compare : ord_key * ord_key -> order
      end
    type 'a map (= boxed)
    val empty : 'a map
    val isEmpty : 'a map -> bool
    val singleton : Key.ord_key * 'a -> 'a map
    val insert : 'a map * Key.ord_key * 'a -> 'a map
    val insert' : (Key.ord_key * 'a) * 'a map -> 'a map
    val find : 'a map * Key.ord_key -> 'a option
    val lookup : 'a map * Key.ord_key -> 'a
    val inDomain : 'a map * Key.ord_key -> bool
    val remove : 'a map * Key.ord_key -> 'a map * 'a
    val first : 'a map -> 'a option
    val firsti : 'a map -> (Key.ord_key * 'a) option
    val numItems : 'a map -> int
    val listItems : 'a map -> 'a list
    val listItemsi : 'a map -> (Key.ord_key * 'a) list
    val listKeys : 'a map -> Key.ord_key list
    val collate : ('a * 'a -> order)
                  -> 'a map * 'a map -> order
    val unionWith : ('a * 'a -> 'a)
                    -> 'a map * 'a map -> 'a map
    val unionWithi : (Key.ord_key * 'a * 'a -> 'a)
                     -> 'a map * 'a map -> 'a map
    val intersectWith : ('a * 'b -> 'c)
                        -> 'a map * 'b map -> 'c map
    val intersectWithi : (Key.ord_key * 'a * 'b -> 'c)
                         -> 'a map * 'b map -> 'c map
    val mergeWith : ('a option * 'b option -> 'c option)
                    -> 'a map * 'b map -> 'c map
    val mergeWithi : (Key.ord_key * 'a option * 'b option
                      -> 'c option)
                     -> 'a map * 'b map -> 'c map
    val app : ('a -> unit) -> 'a map -> unit
    val appi : (Key.ord_key * 'a -> unit) -> 'a map -> unit
    val map : ('a -> 'b) -> 'a map -> 'b map
    val mapi : (Key.ord_key * 'a -> 'b) -> 'a map -> 'b map
    val foldl : ('a * 'b -> 'b) -> 'b -> 'a map -> 'b
    val foldli : (Key.ord_key * 'a * 'b -> 'b)
                 -> 'b -> 'a map -> 'b
    val foldr : ('a * 'b -> 'b) -> 'b -> 'a map -> 'b
    val foldri : (Key.ord_key * 'a * 'b -> 'b)
                 -> 'b -> 'a map -> 'b
    val filter : ('a -> bool) -> 'a map -> 'a map
    val filteri : (Key.ord_key * 'a -> bool)
                  -> 'a map -> 'a map
    val mapPartial : ('a -> 'b option) -> 'a map -> 'b map
    val mapPartiali : (Key.ord_key * 'a -> 'b option)
                      -> 'a map -> 'b map
    val insertWith : ('a -> unit)
                     -> 'a map * Key.ord_key * 'a -> 'a map
  end

  structure DataConMap =
  struct
    structure Key =
      struct
        type ord_key = DataConOrd.ord_key
        val compare : ord_key * ord_key -> order
      end
    type 'a map (= boxed)
    val empty : 'a map
    val isEmpty : 'a map -> bool
    val singleton : Key.ord_key * 'a -> 'a map
    val insert : 'a map * Key.ord_key * 'a -> 'a map
    val insert' : (Key.ord_key * 'a) * 'a map -> 'a map
    val find : 'a map * Key.ord_key -> 'a option
    val lookup : 'a map * Key.ord_key -> 'a
    val inDomain : 'a map * Key.ord_key -> bool
    val remove : 'a map * Key.ord_key -> 'a map * 'a
    val first : 'a map -> 'a option
    val firsti : 'a map -> (Key.ord_key * 'a) option
    val numItems : 'a map -> int
    val listItems : 'a map -> 'a list
    val listItemsi : 'a map -> (Key.ord_key * 'a) list
    val listKeys : 'a map -> Key.ord_key list
    val collate : ('a * 'a -> order)
                  -> 'a map * 'a map -> order
    val unionWith : ('a * 'a -> 'a)
                    -> 'a map * 'a map -> 'a map
    val unionWithi : (Key.ord_key * 'a * 'a -> 'a)
                     -> 'a map * 'a map -> 'a map
    val intersectWith : ('a * 'b -> 'c)
                        -> 'a map * 'b map -> 'c map
    val intersectWithi : (Key.ord_key * 'a * 'b -> 'c)
                         -> 'a map * 'b map -> 'c map
    val mergeWith : ('a option * 'b option -> 'c option)
                    -> 'a map * 'b map -> 'c map
    val mergeWithi : (Key.ord_key * 'a option * 'b option
                      -> 'c option)
                     -> 'a map * 'b map -> 'c map
    val app : ('a -> unit) -> 'a map -> unit
    val appi : (Key.ord_key * 'a -> unit) -> 'a map -> unit
    val map : ('a -> 'b) -> 'a map -> 'b map
    val mapi : (Key.ord_key * 'a -> 'b) -> 'a map -> 'b map
    val foldl : ('a * 'b -> 'b) -> 'b -> 'a map -> 'b
    val foldli : (Key.ord_key * 'a * 'b -> 'b)
                 -> 'b -> 'a map -> 'b
    val foldr : ('a * 'b -> 'b) -> 'b -> 'a map -> 'b
    val foldri : (Key.ord_key * 'a * 'b -> 'b)
                 -> 'b -> 'a map -> 'b
    val filter : ('a -> bool) -> 'a map -> 'a map
    val filteri : (Key.ord_key * 'a -> bool)
                  -> 'a map -> 'a map
    val mapPartial : ('a -> 'b option) -> 'a map -> 'b map
    val mapPartiali : (Key.ord_key * 'a -> 'b option)
                      -> 'a map -> 'b map
    val insertWith : ('a -> unit)
                     -> 'a map * Key.ord_key * 'a -> 'a map
  end

  structure ExnConMap =
  struct
    structure Key =
      struct
        type ord_key = ExnConOrd.ord_key
        val compare : ord_key * ord_key -> order
      end
    type 'a map (= boxed)
    val empty : 'a map
    val isEmpty : 'a map -> bool
    val singleton : Key.ord_key * 'a -> 'a map
    val insert : 'a map * Key.ord_key * 'a -> 'a map
    val insert' : (Key.ord_key * 'a) * 'a map -> 'a map
    val find : 'a map * Key.ord_key -> 'a option
    val lookup : 'a map * Key.ord_key -> 'a
    val inDomain : 'a map * Key.ord_key -> bool
    val remove : 'a map * Key.ord_key -> 'a map * 'a
    val first : 'a map -> 'a option
    val firsti : 'a map -> (Key.ord_key * 'a) option
    val numItems : 'a map -> int
    val listItems : 'a map -> 'a list
    val listItemsi : 'a map -> (Key.ord_key * 'a) list
    val listKeys : 'a map -> Key.ord_key list
    val collate : ('a * 'a -> order)
                  -> 'a map * 'a map -> order
    val unionWith : ('a * 'a -> 'a)
                    -> 'a map * 'a map -> 'a map
    val unionWithi : (Key.ord_key * 'a * 'a -> 'a)
                     -> 'a map * 'a map -> 'a map
    val intersectWith : ('a * 'b -> 'c)
                        -> 'a map * 'b map -> 'c map
    val intersectWithi : (Key.ord_key * 'a * 'b -> 'c)
                         -> 'a map * 'b map -> 'c map
    val mergeWith : ('a option * 'b option -> 'c option)
                    -> 'a map * 'b map -> 'c map
    val mergeWithi : (Key.ord_key * 'a option * 'b option
                      -> 'c option)
                     -> 'a map * 'b map -> 'c map
    val app : ('a -> unit) -> 'a map -> unit
    val appi : (Key.ord_key * 'a -> unit) -> 'a map -> unit
    val map : ('a -> 'b) -> 'a map -> 'b map
    val mapi : (Key.ord_key * 'a -> 'b) -> 'a map -> 'b map
    val foldl : ('a * 'b -> 'b) -> 'b -> 'a map -> 'b
    val foldli : (Key.ord_key * 'a * 'b -> 'b)
                 -> 'b -> 'a map -> 'b
    val foldr : ('a * 'b -> 'b) -> 'b -> 'a map -> 'b
    val foldri : (Key.ord_key * 'a * 'b -> 'b)
                 -> 'b -> 'a map -> 'b
    val filter : ('a -> bool) -> 'a map -> 'a map
    val filteri : (Key.ord_key * 'a -> bool)
                  -> 'a map -> 'a map
    val mapPartial : ('a -> 'b option) -> 'a map -> 'b map
    val mapPartiali : (Key.ord_key * 'a -> 'b option)
                      -> 'a map -> 'b map
    val insertWith : ('a -> unit)
                     -> 'a map * Key.ord_key * 'a -> 'a map
  end

  structure SSMap =
  struct
    structure Key =
      struct
        type ord_key = SSOrd.ord_key
        val compare : ord_key * ord_key -> order
      end
    type 'a map (= boxed)
    val empty : 'a map
    val isEmpty : 'a map -> bool
    val singleton : Key.ord_key * 'a -> 'a map
    val insert : 'a map * Key.ord_key * 'a -> 'a map
    val insert' : (Key.ord_key * 'a) * 'a map -> 'a map
    val find : 'a map * Key.ord_key -> 'a option
    val lookup : 'a map * Key.ord_key -> 'a
    val inDomain : 'a map * Key.ord_key -> bool
    val remove : 'a map * Key.ord_key -> 'a map * 'a
    val first : 'a map -> 'a option
    val firsti : 'a map -> (Key.ord_key * 'a) option
    val numItems : 'a map -> int
    val listItems : 'a map -> 'a list
    val listItemsi : 'a map -> (Key.ord_key * 'a) list
    val listKeys : 'a map -> Key.ord_key list
    val collate : ('a * 'a -> order)
                  -> 'a map * 'a map -> order
    val unionWith : ('a * 'a -> 'a)
                    -> 'a map * 'a map -> 'a map
    val unionWithi : (Key.ord_key * 'a * 'a -> 'a)
                     -> 'a map * 'a map -> 'a map
    val intersectWith : ('a * 'b -> 'c)
                        -> 'a map * 'b map -> 'c map
    val intersectWithi : (Key.ord_key * 'a * 'b -> 'c)
                         -> 'a map * 'b map -> 'c map
    val mergeWith : ('a option * 'b option -> 'c option)
                    -> 'a map * 'b map -> 'c map
    val mergeWithi : (Key.ord_key * 'a option * 'b option
                      -> 'c option)
                     -> 'a map * 'b map -> 'c map
    val app : ('a -> unit) -> 'a map -> unit
    val appi : (Key.ord_key * 'a -> unit) -> 'a map -> unit
    val map : ('a -> 'b) -> 'a map -> 'b map
    val mapi : (Key.ord_key * 'a -> 'b) -> 'a map -> 'b map
    val foldl : ('a * 'b -> 'b) -> 'b -> 'a map -> 'b
    val foldli : (Key.ord_key * 'a * 'b -> 'b)
                 -> 'b -> 'a map -> 'b
    val foldr : ('a * 'b -> 'b) -> 'b -> 'a map -> 'b
    val foldri : (Key.ord_key * 'a * 'b -> 'b)
                 -> 'b -> 'a map -> 'b
    val filter : ('a -> bool) -> 'a map -> 'a map
    val filteri : (Key.ord_key * 'a -> bool)
                  -> 'a map -> 'a map
    val mapPartial : ('a -> 'b option) -> 'a map -> 'b map
    val mapPartiali : (Key.ord_key * 'a -> 'b option)
                      -> 'a map -> 'b map
    val insertWith : ('a -> unit)
                     -> 'a map * Key.ord_key * 'a -> 'a map
  end

  type branchId = int

  datatype pat
  = WildPat of Types.ty
  | VarPat of Types.varInfo
  | ConstPat of const * Types.ty
  | DataConPat of conInfo * bool * pat * Types.ty
  | ExnConPat of exnCon * bool * pat * Types.ty
  | RecPat of (string * pat) list * Types.ty
  | LayerPat of pat * pat
  | OrPat of pat * pat

 type exp = branchId

  datatype rule
    = End of exp
    | ++ of pat * rule

  type env = Types.varInfo VarInfoEnv.map

  datatype tree
    = EmptyNode
    | LeafNode of exp * env
    | EqNode of Types.varInfo * tree ConstMap.map * tree
    | DataConNode of Types.varInfo * tree DataConMap.map * tree
    | ExnConNode of Types.varInfo * tree ExnConMap.map * tree
    | RecNode of Types.varInfo * string * tree
    | UnivNode of Types.varInfo * tree

  val unitExp : RecordCalc.rcexp
  val expDummy : RecordCalc.rcexp
    
end
