(* -*- sml -*- *)
(**
 * syntax for the interface.
 *
 * @copyright (c) 2011, Tohoku University.
 * @author UENO Katsuhiro
 * @author Atsushi Ohori
 * @author Liu Bochao
 *)
structure AbsynInterface =
struct

  (*% *)
  datatype constraint =
      (*% @format ":" *)
      SIG_TRANSPARENT
    | (*% @format ":>" *)
      SIG_OPAQUE

  (*% @formatter(Absyn.ty) Absyn.format_ty *)
  type ty = Absyn.ty

  (*% @formatter(Loc.loc) Loc.format_loc *)
  type loc = Loc.loc

  (*%
   * @formatter(Absyn.tvar) Absyn.format_tvar
   *)
  datatype overloadInstance =
      (*% @format(exp) exp *)
      INST_OVERLOAD of overloadCase
    | (*% @format({vid: v vs}) vs(v)(".") *)
      INST_LONGVID of {vid: string list}

  withtype overloadMatch =
      (*%
       * @format({instTy, instance})
       * instTy +d "=>" 2[ +1 instance ]
       *)
      {instTy: ty, instance: overloadInstance}

  and overloadCase =
      (*%
       * @format({tyvar, expTy, matches: m ms, loc})
       * "case" +d tyvar +d "in" +d expTy +d "of" +1 ms(m)(+1 "|" +d)
       * @format:m({instTy, instance})
       * instTy +d "=>" 2[ +1 instance ]
       *)
      {tyvar: Absyn.tvar,
       expTy: ty,
       matches: {instTy: ty, instance: overloadInstance} list,
       loc: loc}

  (*% @params(vid) *)
  datatype valbindBody =
      (*%
         @format({ty})
           1[ vid + ":" +1 ty]
       *)
      VAL_EXTERN of {ty: ty}
    | (*%
         @format({ty, externPath:p ps})
           1[ vid + "as" + ps(p)(".") + ":" +1 ty]
       *)
      VAL_EXTERN_WITHNAME of {ty: ty, externPath:string list}
    | (*%
         @format({path:p ps})
           1[ vid + "=" + ps(p)(".")]
       *)
      (* 2012-1-4 ohori: variable alias in interface added *)
      VALALIAS_EXTERN of {path:string list}
    | (*%
       * @format({builtinName, ty})
       * R0{ vid +1 "=" +1 L2{ "_builtin" +d builtinName +1 ":" +d ty }}
       *)
      VAL_BUILTIN of {builtinName: string, ty: ty}
    | (*%
       * @format(cases)
       * R0{ vid +d "=" +1 cases }
       *)
      VAL_OVERLOAD of overloadCase

  (*% *)
  type valbind =
      (*%
       * @format({vid, body, loc}) body()(vid)
       *)
      {vid: string, body: valbindBody, loc: loc}

  (*%
   * @formatter(list) TermFormat.formatSeqList
   * @formatter(Absyn.tvar) Absyn.format_tvar
   *)
  datatype typbind =
      (*%
       * @format({tyvars: tv tvs, tycon, ty, loc})
       * tvs(tv)("(","," 1,")" +d) tycon +d "="
       * 2[ +1 ty]
       *)
      TRANSPARENT of {tyvars: Absyn.tvar list, tycon: string, ty: ty, loc: loc}
    | (*%
       * @format({tyvars: tv tvs, tycon, runtimeTy, loc})
       * tvs(tv)("(","," 1,")" +d) tycon +d "="
       * 2[ +1 runtimeTy +1 "as" +d "opaqueNoneq" ]
       *)
      OPAQUE_NONEQ of {tyvars: Absyn.tvar list, tycon: string, runtimeTy: string, loc: loc}
    | (*%
       * @format({tyvars: tv tvs, tycon, runtimeTy, loc})
       * tvs(tv)("(","," 1,")" +d) tycon +d "="
       * 2[ +1 runtimeTy +1 "as" +d "opaqueEq" ]
       *)
      OPAQUE_EQ of {tyvars: Absyn.tvar list, tycon: string, runtimeTy: string, loc: loc}


  (*%
   * @formatter(option) TermFormat.formatOptionalOption
   *)
  type conbind =
      (*%
       * @format({vid, ty: ty tyopt})
       * R1{ vid +d 2[ tyopt(ty)("of" +1,) ] }
       *)
      {vid: string, ty: ty option}

  (*%
   * @formatter(seq) TermFormat.formatSeqList
   * @formatter(ifCons) TermFormat.formatIfCons
   * @formatter(Absyn.tvar) Absyn.format_tvar
   *)
  type datbind =
      (*%
         @format({tyvars: tv tvs, tycon, conbind: bind binds})
         1[
           tvs:seq(tv)("(",",",")") 
           tvs:ifCons()(+)
           tycon +d "="
           +1 
           binds(bind)(+1 "|" +d)
         ]
       *)
      {tyvars: Absyn.tvar list, tycon: string, conbind: conbind list}

  (*%
   * @formatter(option) TermFormat.formatOptionalOption
   *)
  datatype exbind =
      (*%
       * @format({vid, ty: ty tyopt, loc})
       * R1{ vid +d 2[ tyopt(ty)("of" +1,) ] }
       *)
      EXNDEF of {vid: string, ty: ty option, loc: loc}
    | (*%
       * @format({vid, ty: ty tyopt, externPath:p ps, loc})
       * R1{ vid +d "as" + ps(p)(".") + 2[ tyopt(ty)("of" +1,) ] }
       *)
      EXNDEF_WITHNAME of {vid: string, ty: ty option, externPath:string list, loc: loc}
    | (*%
       * @format({vid, longvid: v vs, loc})
       * R1{ vid +d 2[ "=" +d vs(v)(".") ] }
       *)
      EXNREP of {vid: string, longvid: string list, loc: loc}

  (*%
   * @formatter(declist) TermFormat.formatDeclList
   * @formatter(Absyn.sigexp) Absyn.format_sigexp
   *)
  datatype idec =
      (*%
       * @format(bind binds)
       * "val" +d binds(bind)(+1 "and" +d)
       *)
      IVAL of valbind list
    | (*%
       * @format(bind binds)
       * "type" +d binds(bind)(+1 "and" +d)
       *)
      ITYPE of typbind list
    | (*%
         @format({datbind: bind binds, loc})
         1[
           "datatype" +d binds(bind)(~1[1 "and"] +d)
          ]
       *)
      IDATATYPE of {datbind: datbind list, loc: loc}
    | (*%
       * @format({tycon, origTycon: id ids,  loc})
       * "datatype" +d tycon +d "="
       * 2[ +1 "datatype" +d ids(id)(".") ]
       *)
      ITYPEREP of {tycon: string, origTycon: string list, loc: loc}
    | (*%
       * @format({tycon, builtinName, loc})
       * "datatype" +d tycon +d "="
       * 2[ +1 "_builtin" +d "datatype" +d builtinName]
       *)
      ITYPEBUILTIN of {tycon: string, builtinName: string,loc: loc}
    | (*%
       * @format(bind binds)
       * "exception" +d binds(bind)(+1 "and" +d)
       *)
      IEXCEPTION of exbind list
    | (*%
         @format(bind)
           bind
       *)
      ISTRUCTURE of strbind

  and istrexp =
      (*%
          @format({decs: dec decs, loc})
            "struct"
               1[ decs:declist(dec)(+1,+1) ]
            +1
            "end"
       *)
      ISTRUCT of {decs: idec list, loc: loc}
    | (*%
       * @format({strPath:v vs, loc})  vs(v)(".")
       *)
      ISTRUCTREP of {strPath:string list, loc: loc}
    | (*%
       * @format({functorName, argumentPath:v vs, loc})  functorName "(" vs(v)(".") ")"
       *)
      IFUNCTORAPP of {functorName:string, argumentPath:string list, loc: loc}

  withtype strbind =
      (*%
          @format({strid, strexp, loc})
            1[ 
              "structure" + strid  +d "=" 
              +1 strexp 
            ]
       *)
      {
        strid: string,
        strexp: istrexp,
        loc: loc
      }

  (*%
   * @formatter(Absyn.sigexp) Absyn.format_sigexp
   *)
  type sigbind =
      (*%
         @format({sigid, sigexp, loc})
          1[ sigid +d "=" +1 sigexp]
       *)
      {sigid: string, sigexp: Absyn.sigexp, loc: loc}

  (*%
   * @formatter(Absyn.sigexp) Absyn.format_sigexp
   * @formatter(Absyn.spec) Absyn.format_spec
   *)
  datatype funParam =
      (*%
         @format({strid, sigexp})
           strid + ":" 
           +1
           sigexp
       *)
      FUNPARAM_FULL of {strid: string, sigexp: Absyn.sigexp}
    | (*%
       * @format(spec) spec
       *)
      FUNPARAM_SPEC of Absyn.spec

  (*%
   * @formatter(Absyn.sigexp) Absyn.format_sigexp
   *)
  type funbind =
      (*%
         @format({funid, param, strexp, loc})
           1[ 
             "functor" + funid
             +1 "(" 1[param] ")" +d "=" 
             +1 strexp 
           ]
       *)
      {
        funid: string,
        param: funParam,
        strexp: istrexp,
        loc: loc
      }

  (*%
   * @formatter(BigInt.int) TermFormat.format_BigInt_dec_ML
   * @formatter(option) TermFormat.formatOptionalOption
   *)
  datatype fixity =
      (*% @format(x xo) "infix" xo(x)(+d,) *)
      INFIXL of string option
    | (*% @format(x xo) "infixr" xo(x)(+d,) *)
      INFIXR of string option
    | (*% @format "nonfix" *)
      NONFIX

  (*% *)
  datatype itopdec =
      (*% @format(x) x *)
      IDEC of idec
    | (*%
        @format(bind)
          bind
       *)
      IFUNDEC of funbind
    | (*%
         @format({fixity, vids: vid vids, loc})
           1[ fixity +d vids(vid)(+d) ]
       *)
      IINFIX of {fixity: fixity, vids: string list, loc: loc}

  (*%
   * @formatter(Absyn.topdec) Absyn.format_topdec
   * @formatter(dec) TermFormat.formatDeclList
   *)
  datatype itop =
      (*%
       * @format({requires: req reqs, topdecs: x xs})
       * reqs:dec(req)(+1,+1) xs(x)(+1)
       * @format:req({name, loc})
       * "_require" +d name
       *)
      INTERFACE of
      {
        requires: {name: string, loc: loc} list,
        topdecs: itopdec list
      }
    | (*%
       * @format({includes: n ns, topdecs: x xs})
       * ns:dec(n)(+1 "include" +d,+1 "include" +d)
       * xs(x)(+1)
       * @format:n({name, loc}) name
       *)
      INCLUDES of
      {
        includes: {name: string, loc: loc} list,
        topdecs: Absyn.topdec list
      }

  (*% *)
  datatype filePlace =
      (*% @format "stdpath" *)
      STDPATH
    | (*% @format "localpath" *)
      LOCALPATH

  (*% *)
  type interfaceName =
      (*%
       * @format({hash, sourceName, place})
         "{"
          1[
            "hash:" hash
            +1
            "sourceName:" sourceName
            +1
            "place:" place
           ]
          1
         "}"
       *)
      {
        hash: string,
        sourceName: string,
        place: filePlace
      }

  (*%
   * @formatter(InterfaceID.id) InterfaceID.format_id
   * @formatter(optlist) TermFormat.formatOptionalList
   *)
  type interfaceDec =
      (*%
         @format({interfaceId, interfaceName, requires: req reqs,
                  topdecs: dec decs})
           "_interface" + interfaceId +d interfaceName +d "="
          2[ +1 {"local" 2[ reqs:optlist(req)(+1 "_require" +d,,) ]}
           +1 "in" 2[ +1 decs(dec)(+1) ]
           +1 "end" ]
         @format:req({id,loc}) id
       *)
      {
        interfaceId: InterfaceID.id,
        interfaceName: interfaceName,
        requires: {id: InterfaceID.id, loc: loc} list,
        topdecs: itopdec list
      }
     
  (*% 
   * @formatter(declist) TermFormat.formatDeclList
   * @formatter(optlist) TermFormat.formatOptionalList
   * @formatter(InterfaceID.id) InterfaceID.format_id
   *)
  type interface =
      (*%
         @format({decls: i is, requires: r rs, interfaceName: name nameopt,
                 topdecs: dec decs})
        "_interface" +d nameopt(name)
         2[ +1 "local" 2[ is:declist(i)(+1,+1) ]
            +1 "in"
              2[ rs:optlist(r)(+1 "_require" +d, +1,)
                  decs:declist(dec)(+1,+1) ]
            +1 "end" 
           ]
         +1 "end"
         @format:r({id, loc}) id
       *)
      {
        decls: interfaceDec list,
        interfaceName: interfaceName option,
        requires: {id: InterfaceID.id, loc: loc} list,
        topdecs: itopdec list
      }
 
  (*%
   * @formatter(declist) TermFormat.formatDeclList
   * @formatter(Absyn.topdec) Absyn.format_topdec
   *)
  type compileUnit =
      (*%
       * @format({interface, topdecs: dec decs})
       * interface
       * decs:declist(dec)(+1,+1)
       *)
      {
        interface : interface,
        topdecs : Absyn.topdec list
      }

end
