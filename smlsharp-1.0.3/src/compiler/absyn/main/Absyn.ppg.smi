_require "../../../basis.smi"
_require "../../../smlformat-lib.smi"
_require "../../../compiler-utils/env/main/SEnv.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../control/main/Control.ppg.smi"
_require "../../util/main/TermFormat.smi"
_require "../../util/main/SmlppgUtil.ppg.smi"
_require "AbsynSQL.ppg.smi"
_require "ABSYN.sig"

structure Absyn =
struct
  type longid = string list 
  val format_longid
      : longid -> SMLFormat.FormatExpression.expression list
  type longTyCon = string list                
  datatype constant  =
      INT of {radix: StringCvt.radix, digits: string} * Loc.loc
    | WORD of {radix: StringCvt.radix, digits: string} * Loc.loc
    | STRING of string * Loc.loc
    | REAL of string * Loc.loc
    | CHAR of char * Loc.loc
    | UNITCONST of Loc.loc
    | NULLCONST of Loc.loc
  val format_constant
      : constant -> SMLFormat.FormatExpression.expression list
  datatype callingConvention =
      FFI_CDECL
    | FFI_STDCALL
  type ffiAttributes =
      {isPure: bool,
       noCallback: bool,
       allocMLValue: bool,
       suspendThread: bool,
       callingConvention: callingConvention option}
  val format_ffiAttributes
      : ffiAttributes -> SMLFormat.FormatExpression.expression list
  val defaultFFIAttributes : ffiAttributes
  datatype globalSymbolKind = ForeignCodeSymbol
  val format_globalSymbolKind
      : globalSymbolKind -> SMLFormat.FormatExpression.expression list
  datatype eq = EQ | NONEQ
  val format_eq
      : eq -> SMLFormat.FormatExpression.expression list
  datatype ty =
      TYWILD of Loc.loc
    | TYID of {name:string, eq:eq} * Loc.loc
    | TYRECORD of (string * ty) list * Loc.loc
    | TYCONSTRUCT of ty list * string list * Loc.loc
    | TYTUPLE of ty list * Loc.loc
    | TYFUN of ty * ty * Loc.loc
    | TYPOLY of ({name:string, eq:eq} * tvarKind) list * ty * Loc.loc
  and tvarKind =
      UNIV 
    | REC of (string * ty) list * Loc.loc
  val format_ty
      : ty -> SMLFormat.FormatExpression.expression list
  val format_tvarKind
      : tvarKind -> SMLFormat.FormatExpression.expression list
  type tvar =
      {name:string, eq:eq}
  val format_tvar
      : tvar -> SMLFormat.FormatExpression.expression list
  type kindedTvar = 
      {name:string, eq:eq} * tvarKind
  val format_kindedTvar
      : kindedTvar -> SMLFormat.FormatExpression.expression list
  datatype ffiTy =
      FFIFUNTY of string list * ffiTy list * ffiTy list * Loc.loc
    | FFITUPLETY of ffiTy list * Loc.loc
    | FFITYVAR of tvar * Loc.loc
    | FFIRECORDTY of (string * ffiTy) list * Loc.loc
    | FFICONTY of ffiTy list * string list * Loc.loc
  val format_ffiTy
      : ffiTy -> SMLFormat.FormatExpression.expression list
  datatype pat =
      PATWILD of Loc.loc
    | PATCONSTANT of constant * Loc.loc
    | PATID of {opPrefix:bool, id:longid, loc:Loc.loc}
    | PATRECORD of {ifFlex:bool, fields:patrow list, loc:Loc.loc}
    | PATTUPLE of pat list * Loc.loc
    | PATLIST of pat list * Loc.loc
    | PATAPPLY of pat list * Loc.loc
    | PATTYPED of pat * ty * Loc.loc
    | PATLAYERED of pat * pat * Loc.loc
  and patrow =
      PATROWPAT of string * pat * Loc.loc
    | PATROWVAR of string * (ty option) * (pat option) * Loc.loc
  val format_pat
      : pat -> SMLFormat.FormatExpression.expression list
  val format_patrow
      : patrow -> SMLFormat.FormatExpression.expression list
  datatype exbind =
      EXBINDDEF of bool * string * ty option * Loc.loc
    | EXBINDREP of bool * string * bool * longid * Loc.loc
  type typbind = 
      tvar list * string * ty
  val format_typbind
      : typbind -> SMLFormat.FormatExpression.expression list
  type datbind = 
      tvar list * string * (bool * string * ty option) list
  datatype exp =
      EXPCONSTANT of constant * Loc.loc
    | EXPGLOBALSYMBOL of string * globalSymbolKind * Loc.loc
    | EXPID of  longid * Loc.loc
    | EXPOPID of  longid * Loc.loc
    | EXPRECORD of (string * exp) list * Loc.loc
    | EXPRECORD_UPDATE of exp * (string * exp) list * Loc.loc
    | EXPRECORD_SELECTOR of string * Loc.loc
    | EXPTUPLE of exp list * Loc.loc
    | EXPLIST of exp list * Loc.loc
    | EXPSEQ of exp list * Loc.loc
    | EXPAPP of exp list * Loc.loc
    | EXPTYPED of exp * ty * Loc.loc
    | EXPCONJUNCTION of exp * exp * Loc.loc
    | EXPDISJUNCTION of exp * exp * Loc.loc
    | EXPHANDLE of exp * (pat * exp) list * Loc.loc
    | EXPRAISE of exp * Loc.loc
    | EXPIF of exp * exp * exp * Loc.loc
    | EXPWHILE of exp * exp * Loc.loc
    | EXPCASE of exp * (pat * exp) list * Loc.loc
    | EXPFN of (pat * exp) list * Loc.loc
    | EXPLET of dec list * exp list * Loc.loc
    | EXPCAST of exp * Loc.loc
    | EXPFFIIMPORT of exp * ffiTy * Loc.loc
    | EXPFFIEXPORT of exp * ffiTy * Loc.loc
    | EXPFFIAPPLY of string list * exp * ffiArg list * ffiTy * Loc.loc
    | EXPSQL of (exp, pat, ty) AbsynSQL.exp * Loc.loc
  and ffiArg =
      FFIARG of exp * ffiTy * Loc.loc
    | FFIARGSIZEOF of ty * exp option * Loc.loc
  and dec =
      DECVAL of kindedTvar list * (pat * exp) list * Loc.loc
    | DECREC of kindedTvar list * (pat * exp) list * Loc.loc
    | DECFUN of kindedTvar list * (pat list * ty option * exp) list list * Loc.loc 
    | DECTYPE of typbind list * Loc.loc
    | DECDATATYPE of datbind list * typbind list * Loc.loc
    | DECABSTYPE of datbind list * typbind list * dec list * Loc.loc
    | DECOPEN of longid list * Loc.loc
    | DECREPLICATEDAT of string * longTyCon * Loc.loc
    | DECEXN of exbind list * Loc.loc
    | DECLOCAL of dec list * dec list * Loc.loc
    | DECINFIX of string * string list * Loc.loc
    | DECINFIXR of string * string list * Loc.loc
    | DECNONFIX of string list * Loc.loc
  and strdec = 
      COREDEC of dec * Loc.loc
    | STRUCTBIND of strbind list * Loc.loc
    | STRUCTLOCAL of strdec  list * strdec list  * Loc.loc
  and strexp =
      STREXPBASIC of strdec list * Loc.loc
    | STRID of longid * Loc.loc
    | STRTRANCONSTRAINT of strexp * sigexp * Loc.loc
    | STROPAQCONSTRAINT of strexp * sigexp * Loc.loc
    | FUNCTORAPP of string * strexp * Loc.loc
    | STRUCTLET  of strdec list * strexp * Loc.loc
  and strbind = 
      STRBINDTRAN of string * sigexp  * strexp * Loc.loc 
    | STRBINDOPAQUE of string * sigexp  * strexp * Loc.loc
    | STRBINDNONOBSERV of string * strexp * Loc.loc
  and sigexp = 
      SIGEXPBASIC of spec * Loc.loc
    | SIGID of string * Loc.loc
    | SIGWHERE of sigexp * (tvar list * longTyCon * ty) list * Loc.loc 
  and spec =
      SPECVAL of (string * ty) list * Loc.loc
    | SPECTYPE of (tvar list * string) list * Loc.loc
    | SPECDERIVEDTYPE of (tvar list * string * ty) list  * Loc.loc
    | SPECEQTYPE of (tvar list * string) list * Loc.loc
    | SPECDATATYPE of
      (tvar list * string * (string * ty option) list) list * Loc.loc
    | SPECREPLIC of string * longTyCon * Loc.loc
    | SPECEXCEPTION of (string * ty option) list * Loc.loc
    | SPECSTRUCT of (string * sigexp) list * Loc.loc
    | SPECINCLUDE of sigexp * Loc.loc
    | SPECDERIVEDINCLUDE of string list * Loc.loc
    | SPECSEQ of spec * spec * Loc.loc 
    | SPECSHARE of spec * longTyCon list * Loc.loc 
    | SPECSHARESTR of spec * longid list * Loc.loc 
    | SPECEMPTY 
  and funbind =
      FUNBINDTRAN of string * string * sigexp  * sigexp * strexp * Loc.loc 
    | FUNBINDOPAQUE of string * string * sigexp  * sigexp * strexp * Loc.loc 
    | FUNBINDNONOBSERV of string * string * sigexp  * strexp * Loc.loc 
    | FUNBINDSPECTRAN of string * spec * sigexp  * strexp * Loc.loc 
    | FUNBINDSPECOPAQUE of string * spec * sigexp  * strexp * Loc.loc 
    | FUNBINDSPECNONOBSERV of string * spec * strexp * Loc.loc 
  and topdec = 
      TOPDECSTR of strdec * Loc.loc
    | TOPDECSIG of ( string * sigexp ) list * Loc.loc 
    | TOPDECFUN of funbind list * Loc.loc
  val format_exp
      : exp -> SMLFormat.FormatExpression.expression list
  val format_dec
      : dec -> SMLFormat.FormatExpression.expression list
  val format_sigexp
      : sigexp -> SMLFormat.FormatExpression.expression list
  val format_spec
      : spec -> SMLFormat.FormatExpression.expression list
  val format_topdec
      : topdec -> SMLFormat.FormatExpression.expression list
  datatype top =
      TOPDEC of topdec list
    | USE of string * Loc.loc
  datatype interface =
      INTERFACE of {name: string, loc: Loc.loc}
    | NOINTERFACE
  type unit = {interface: interface, tops: top list, loc: Loc.loc}
  val format_unit
      : unit -> SMLFormat.FormatExpression.expression list
  datatype unitparseresult = UNIT of unit | EOF
  val format_unitparseresult
      : unitparseresult -> SMLFormat.FormatExpression.expression list
  val getLocTy : ty -> Loc.loc
  val getLocPat : pat -> Loc.loc
  val replaceLoc : exp * Loc.loc -> exp
  val isShortId : longid -> bool
  val longidToString : longid -> string
  val getLastIdOfLongid : longid -> string
  val getParentIdsOfLongid : longid -> longid
end
