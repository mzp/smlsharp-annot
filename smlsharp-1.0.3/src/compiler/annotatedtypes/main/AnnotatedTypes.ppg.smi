_require "../../../basis.smi"
_require "../../../smlformat-lib.smi"
_require "../../../compiler-utils/env/main/SEnv.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"

_require "../../name/main/LocalID.smi"
_require "../../builtin/main/BuiltinName.smi"
_require "../../builtin/main/BuiltinType.ppg.smi"
_require "../../types/main/IDCalc.ppg.smi"
_require "../../types/main/BuiltinEnv.smi"
_require "../../types/main/Types.ppg.smi"
_require "../../util/main/SmlppgUtil.ppg.smi"
_require "../../util/main/TermFormat.smi"
_require "../../absyn/main/Absyn.ppg.smi"

structure AnnotatedTypes =
  struct
    type varid = VarID.id
    val format_varid : VarID.id
                       -> SMLFormat.FormatExpression.expression list
    datatype eqKind = datatype Absyn.eq
    val format_eqKind
        : eqKind -> SMLFormat.FormatExpression.expression list
    type annotationLabel = AnnotationLabelID.id
    val format_annotationLabel
        : AnnotationLabelID.id
          -> SMLFormat.FormatExpression.expression list
    datatype labelEquiv
      = LE_GENERIC | LE_LABELS of AnnotationLabelID.Set.set | LE_UNKNOWN
    val format_labelEquiv : labelEquiv
                            -> SMLFormat.FormatExpression.expression list
    datatype functionKind = CLOSURE | GLOBAL_FUNSTATUS | LOCAL
    val format_functionKind
        : SMLFormat.FormatExpression.expression list
          -> functionKind -> SMLFormat.FormatExpression.expression list
    type codeStatus = functionKind ref
    val format_codeStatus : SMLFormat.FormatExpression.expression list
                            -> functionKind ref
                               -> SMLFormat.BasicFormatters.expression list
    type functionId = FunctionAnnotationID.id
    val format_functionId : FunctionAnnotationID.id
                            -> SMLFormat.FormatExpression.expression list
    type tid = BoundTypeVarID.id
    val format_tid : BoundTypeVarID.id
                     -> SMLFormat.FormatExpression.expression list
    type owner = {ownerCode:codeStatus, ownerId:functionId}
    val format_owner : {ownerCode:functionKind ref,
                        ownerId:FunctionAnnotationID.id}
                       -> SMLFormat.BasicFormatters.expression list
    type funStatus =
      {codeStatus:codeStatus, functionId:functionId, owners:owner list}
    val format_funStatus
        : {codeStatus:functionKind ref,
           functionId:FunctionAnnotationID.id,
           owners:{ownerCode:functionKind ref,
                   ownerId:FunctionAnnotationID.id} list}
          -> SMLFormat.BasicFormatters.expression list
    type functionAnnotation = {boxed:bool, labels:labelEquiv}
    val format_functionAnnotation
        : {boxed:bool, labels:labelEquiv}
          -> SMLFormat.FormatExpression.expression list
    type recordAnnotation = {align:bool, boxed:bool, labels:labelEquiv}
    val format_recordAnnotation
        : {align:bool, boxed:bool, labels:labelEquiv}
          -> SMLFormat.FormatExpression.expression list
    datatype ty
      = BOUNDVARty of tid
      | CONty of {args:ty list,
                  tyCon:{arity:int, conSet:{hasArg:bool} SEnv.map,
                         dtyKind:Types.dtyKind, extraArgs:Types.ty list,
                         runtimeTy:BuiltinType.ty,
                         id:IDCalc.typId, iseq:bool, path:IDCalc.path}}
      | DUMMYty of Types.dummyTyID
      | ERRORty
      | FUNMty of {annotation:functionAnnotation ref, argTyList:ty list,
                   bodyTy:ty, funStatus:funStatus}
      | MVALty of ty list
      | POLYty of {body:ty,
                   boundtvars:{eqKind:eqKind, id:tid, tvarKind:tvarKind}
                                  BoundTypeVarID.Map.map}
      | RECORDty of {annotation:recordAnnotation ref,
                     fieldTypes:ty LabelEnv.map}
      | SINGLETONty of singletonTy
    and singletonTy
      = INDEXty of string * ty
      | INSTCODEty of {keyTyList:ty list, oprimId:OPrimID.id,
                       path:IDCalc.path}
      | RECORDBITMAPty of int * ty
      | RECORDSIZEty of ty
      | SIZEty of ty
      | TAGty of ty
    and tvarKind = OPRIMkind of ty list | REC of ty LabelEnv.map | UNIV
    and dtyKind
      = BUILTIN of BuiltinType.ty
      | DTY
      | OPAQUE of {opaqueRep:opaqueRep, revealKey:IDCalc.revealKey}
    and opaqueRep
      = TFUNDEF of {arity:int, iseq:bool, polyTy:ty}
      | TYCON of {arity:int, conSet:{hasArg:bool} SEnv.map,
                  dtyKind:Types.dtyKind, extraArgs:Types.ty list,
                  runtimeTy:BuiltinType.ty,
                  id:IDCalc.typId, iseq:bool, path:IDCalc.path}
    type btvKind = {eqKind:eqKind, id:tid, tvarKind:tvarKind}
    type tyCon =
      {arity:int, conSet:{hasArg:bool} SEnv.map, dtyKind:Types.dtyKind,
       runtimeTy:BuiltinType.ty,
       extraArgs:Types.ty list, id:IDCalc.typId, iseq:bool,
       path:IDCalc.path}
    val format_ty : ty -> SMLFormat.FormatExpression.expression list
    val format_singletonTy
        : singletonTy -> SMLFormat.FormatExpression.expression list
    val format_tvarKind
        : tvarKind -> SMLFormat.FormatExpression.expression list
    val format_dtyKind
        : dtyKind -> SMLFormat.FormatExpression.expression list
    val format_opaqueRep
        : opaqueRep -> SMLFormat.FormatExpression.expression list
    val format_btvKind
        : btvKind -> SMLFormat.FormatExpression.expression list
    val format_tyCon
        : tyCon -> SMLFormat.FormatExpression.expression list
    val formatSimple_ty : ty -> TermFormat.format
    val formatSimple_singletonTy
        : singletonTy -> SMLFormat.FormatExpression.expression list
    val formatSimple_tvarKind
        : tvarKind -> SMLFormat.FormatExpression.expression list
    val formatSimple_dtyKind
        : dtyKind -> SMLFormat.FormatExpression.expression list
    val formatSimple_opaqueRep
        : opaqueRep -> SMLFormat.FormatExpression.expression list
    val formatSimple_btvKind : btvKind -> TermFormat.format
    val formatSimple_tyCon
        : tyCon -> SMLFormat.FormatExpression.expression list
    type btvEnv = btvKind BoundTypeVarID.Map.map
    val format_btvEnv
        : btvKind BoundTypeVarID.Map.map
          -> SMLFormat.FormatExpression.expression list
    val formatSimple_btvEnv
        : btvKind BoundTypeVarID.Map.map
          -> SMLFormat.FormatExpression.expression list
    type foreignFunTy =
         {argTyList:ty list, attributes:Absyn.ffiAttributes, resultTy:ty}
    val format_foreignFunTy
        : {argTyList:ty list, attributes:Absyn.ffiAttributes, resultTy:ty}
          -> SMLFormat.FormatExpression.expression list
    val intty : ty
    val largeIntty : ty
    val wordty : ty
    val bytety : ty
    val realty : ty
    val floatty : ty
    val stringty : ty
    val charty : ty
    val unitty : ty
    val exnty : ty
    val boolty : unit -> ty
    val foreignfunty : ty
  end
