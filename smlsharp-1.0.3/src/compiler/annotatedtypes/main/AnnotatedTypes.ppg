(**
 * annotated type structures.
 * @copyright (c) 2006, Tohoku University.
 * @author Huu-Duc Nguyen
 * @version $Id: AnnotatedTypes.ppg,v 1.21 2008/08/06 17:23:39 ohori Exp $
 *)
structure AnnotatedTypes =
struct

  local

  type path = IDCalc.path

  structure FE = SMLFormat.FormatExpression
  structure BF = SMLFormat.BasicFormatters
  structure BE = BuiltinEnv

  fun formatBtvEnv (formatter, sep) map =
      TermFormat.formatDeclList
        (formatter, nil, sep)
        (BoundTypeVarID.Map.listItems map)

  (** formatter for 'a IEnv.map *)
  fun format_IEnv (elementFormatter, separator, prefix, suffix) values =
      SmlppgUtil.formatListWithEnclosureOne
          (elementFormatter, separator, prefix, suffix)
          (BoundTypeVarID.Map.listItems values)

  fun formatLSet (separator, prefixIfNotNull, suffixIfNotNull) lset =
      let
      val L = map (fn i => "L" ^ (AnnotationLabelID.toString i))
                  (AnnotationLabelID.Set.listItems lset)
      in
         SmlppgUtil.formatListWithEnclosureOne
         (
           SMLFormat.BasicFormatters.format_string,
           separator,
           prefixIfNotNull,
           suffixIfNotNull
         )
         L
      end

  fun formatRecordTy (elementFormatter, bindsep, itemsepRecord) smap =
      let
        val L = LabelEnv.listItemsi smap
      in
        SmlppgUtil.format_record(elementFormatter, bindsep, itemsepRecord) L
      end

  in

  (*%
   * @formatter(VarID.id) VarID.format_id
   *)
  type varid =
       (*%
        * @format(id) id
        *)
       VarID.id

(*
  (*%
   * @formatter(Types.tyCon) Types.format_tyCon
   *)
  type tyCon =
       (*% @format(tyCon) tyCon()() *)
       Types.tyCon
*)

  (*%
   * @formatter(Absyn.eq) Absyn.format_eq
   *)
  datatype eqKind = datatype Absyn.eq

  (*%
   * @formatter(AnnotationLabelID.id) AnnotationLabelID.format_id
   *)
  type annotationLabel =
       (*%
        * @format(label) "L" label
        *)
       AnnotationLabelID.id

  (*%
   * @formatter(formatLSet) formatLSet
   *)
  datatype labelEquiv =
           (*%
            * @format(labels : formatLSet) labels()("," d,,)
            *)
           LE_LABELS of AnnotationLabelID.Set.set
         | (*%
            * @format "G"
            *)
           LE_GENERIC
         | (*%
            * @format "U"
            *)
           LE_UNKNOWN

  (*
    A function is Escaped if it is defined at the top-level or used as a value,
    otherwise belongs to the function that lexically surround it.
   *)
  (*%
   * @params(id)
   *)
  datatype functionKind =
    (*%
     * @format "f" id    (* function *)
     *)
    CLOSURE
  | (*%
     * @format "c" id    (* code *)
     *)
    LOCAL
  | (*%
     * @format "g" id
     *)
    GLOBAL_FUNSTATUS

  (*%
   * @params(id)
   *)
   type codeStatus =
    (*%
     * @format(a b) b(a()(id))
     *)
    functionKind ref

  (*
   * This function term id.
   *)
  (*% @formatter(FunctionAnnotationID.id) FunctionAnnotationID.format_id *)
  type functionId = FunctionAnnotationID.id

  (*% @formatter(BoundTypeVarID.id) BoundTypeVarID.format_id *)
  type tid = BoundTypeVarID.id

  (*%
   *)
  type owner =
       (*%
        * @format({ownerId, ownerCode}) ownerCode()(ownerId)
        *)
       {ownerId : functionId, ownerCode: codeStatus}

  (*%
   * @formatter(listWithEnclosure) SmlppgUtil.formatListWithEnclosure
   *)
  type funStatus =
       (*%
        * @format({codeStatus,
        *          owners : owner owners:listWithEnclosure,
        *          functionId})
        * codeStatus()(functionId) owners(owner)("," d, "[", "]")
        *)
       {
        codeStatus:codeStatus,
        owners: owner list,
        functionId:functionId
       }

  (*%
   * @formatter(bool) SmlppgUtil.formatBinaryChoice
   *)
  type functionAnnotation =
       (*%
        * @format({labels, boxed})
        * "{" { labels boxed()("," d "B",) "}" }
        *)
       {
        labels : labelEquiv,
        boxed : bool
       }

  (*%
   * @formatter(bool) SmlppgUtil.formatBinaryChoice
   *)
  type recordAnnotation =
       (*%
        * @format({labels,boxed,align})
        * "{" { labels boxed()("," d "B",) align()("," d "A",) "}" }
        *)
       {
        labels : labelEquiv,
        boxed : bool,
        align : bool
       }

  (*
   * formatter precedence:
   * L7 { x ^ y }    annotation
   * N3 { e }        argument of type constructor
   *                 (see also SmlppgUtil.formatTyConArgumentTypes)
   * R2 { x -> y }   function
   * L2 { x : y }    type annotation
   *                 (FIXME: conflict with function due to N3)
   *
   * Precedence 0 is reserved for cut.
   * Precedence 1 is reserved for expression terms.
   *)


  (*%
     @formatter(enclosedList) TermFormat.formatEnclosedList
     @formatter(ifCons) TermFormat.formatIfCons
     @formatter(Types.ty) Types.format_ty
     @formatter(IDCalc.typId) IDCalc.format_typId
     @formatter(IDCalc.revealKey) IDCalc.format_revealKey
     @formatter(Types.dtyKind) Types.format_dtyKind
   * @formatter(path) IDCalc.format_path
   * @formatter(listWithEnclosureOne) SmlppgUtil.formatListWithEnclosureOne
   * @formatter(listWithEnclosure) SmlppgUtil.formatListWithEnclosure
   * @formatter(tyConArgTys) SmlppgUtil.formatTyConArgumentTypes
   * @formatter(formatRecordTy) formatRecordTy
   * @formatter(Types.dummyTyID) Types.format_dummyTyID
   * @formatter(formatIEnv) format_IEnv
   * @formatter(smap) SmlppgUtil.formatSmap
   * @formatter(formatUInt32) BasicTypeFormatters.format_UInt32
   * @formatter(optWithDefault) SmlppgUtil.formatOptWithDefault
   * @formatter(format_freeTyId) Types.format_freeTyId
   * @formatter(IDCalc.path) IDCalc.format_path
   *)
  (*%
   * @prefix formatSimple_
     @formatter(enclosedList) TermFormat.formatEnclosedList
     @formatter(ifCons) TermFormat.formatIfCons
     @formatter(Types.ty) Types.format_ty
     @formatter(IDCalc.revealKey) IDCalc.format_revealKey
     @formatter(IDCalc.typId) IDCalc.format_typId
     @formatter(Types.dtyKind) Types.format_dtyKind
   * @formatter(path) IDCalc.format_path 
   * @formatter(Types.dummyTyID) Types.format_dummyTyID
   * @formatter(SEnv.map) TermFormat.formatEnclosedSEnv
   * @formatter(LabelEnv.map) TermFormat.formatEnclosedLabelEnv
   * @formatter(BoundTypeVarID.Map.map) formatBtvEnv
   * @formatter(tid) format_tid
   * @formatter(eqKind) format_eqKind
   * @formatter(appList) TermFormat.formatAppList
   * @formatter(enclosedList) TermFormat.formatEnclosedList
   * @formatter(seqList) TermFormat.formatSeqList
   * @formatter(ifCons) TermFormat.formatIfCons
   * @formatter(IDCalc.path) IDCalc.format_path
   *)
  datatype ty =
           (*%
            * @format(t) t
            *)
           (*%
            * @prefix formatSimple_
            * @format(t) t
            *)
           SINGLETONty of singletonTy
         | (*%
            * @format "errorty"
            *)
           (*%
            * @prefix formatSimple_
            * @format "ERRORty"
            *)
           ERRORty
         | (*%
            * @format(id) id
            *)
           (*%
            * @prefix formatSimple_
            * @format(id) id
            *)
           DUMMYty of Types.dummyTyID
         | (*%
            * @format(value) "t" value
            *)
           (*%
            * @prefix formatSimple_
            * @format(id) "t" id
            *)
           (* NOTE: tid is globally unique *)
           BOUNDVARty of tid
         | (*%
            * @format({argTyList:argTy argTys:listWithEnclosureOne,
            *          bodyTy,
            *          annotation: ann annref,
            *          funStatus})
            * L7{
            *   R4{
            *     argTys(argTy)("," +1, "{", "}")
            *     +1 "-" funStatus "->"
            *     2[ +2 bodyTy ]
            *   }
            *   1 "^" d annref(ann)
            * }
            *)
           (*%
            * @prefix formatSimple_
            * @format({argTyList: arg args, bodyTy, annotation, funStatus})
            * R4{ args:appList(arg)("(",",",")") +1 "->" +d bodyTy }
            *)
           FUNMty of
            {
             argTyList : ty list,
             bodyTy : ty,
             annotation : functionAnnotation ref,
             funStatus : funStatus
            }
         | (*%
            * @format(ty tys:listWithEnclosureOne)
            * tys(ty)("," +1, "{", "}")
            *)
           (*%
            * @prefix formatSimple_
            * @format(ty tys)
            * tys:appList(ty)("(",",",")")
            *)
           MVALty of ty list
         | (*%
            * @format({fieldTypes:elm smap:formatRecordTy,
            *          annotation: ann annref})
            * L7{ smap(elm)(":", "," +1) 1 "^" d annref(ann) }
            *)
           (*%
            * @prefix formatSimple_
            * @format({fieldTypes: ty tys, annotation})
            * tys(ty)("{",",",":","}")
            *)
           RECORDty of {fieldTypes: ty LabelEnv.map,
                        annotation : recordAnnotation ref }
         | (*%
            * @format({tyCon, args:arg args:tyConArgTys})
            * { args(arg)("," +1, "(", ")") tyCon }
            *)
           (*%
            * @prefix formatSimple_
            * @format({tyCon, args: arg args})
            * L8{ 2[ args:seqList(arg)("(",",",")")
            *        args:ifCons()(+1) tyCon ] }
            *)
           CONty of {tyCon : tyCon, args : ty list}
         | (*%
            * @format({boundtvars : btvKind btvKindMap:formatIEnv, body})
            * !N0{ "["
            *   btvKindMap(btvKind)("," 2, "", "") "."
            *   2[ 1 body ]
            * "]" }
            *)
           (*%
            * @prefix formatSimple_
            * @format({boundtvars: kind map, body})
            * "[" !N0{ map(kind)("," +1) "." +1 body } "]"
            *)
           POLYty of {boundtvars : btvKind BoundTypeVarID.Map.map, body : ty}

       and singletonTy =
           (*%
            * @format({oprimId,
            *          path,
            *          keyTyList:ty tys:listWithEnclosureOne
            *         })
            *      "code(" path ":" tys(ty)("," +1, "{", "}") ")"
            *)
           (*%
            * @prefix formatSimple_
            * @format({oprimId, path, keyTyList})
            * "INSTCODEty(" path ")"
            *)
            (* a singletonset denoting the instance function for a type 'a *)
           INSTCODEty of
           {oprimId:OPrimID.id, path:IDCalc.path, keyTyList: ty list}
         | (*%
            * @format(label * ty) "index(" !N0 { label "," +1 ty ")" }
            *)
           (*%
            * @prefix formatSimple_
            * @format(label * ty) "INDEXty(" !N0 { label "," +1 ty } ")"
            *)
           INDEXty of string * ty
         | (*%
            * @format(ty) "tag(" !N0{ ty ")" }
            *)
           (*%
            * @prefix formatSimple_
            * @format(ty) "TAGty(" !N0 { ty } ")"
            *)
           TAGty of ty
         | (*%
            * @format(ty) "size(" !N0{ ty ")" }
            *)
           (*%
            * @prefix formatSimple_
            * @format(ty) "SIZEty(" !N0 { ty } ")"
            *)
           SIZEty of ty
         | (*%
            * @format(ty) "recordsize(" !N0{ ty ")" }
            *)
           (*%
            * @prefix formatSimple_
            * @format(ty) "RECORDSIZEty(" !N0 { ty } ")"
            *)
           RECORDSIZEty of ty
         | (*%
            * @format(index * ty) "recordbitmap(" !N0{ index "," +1 ty ")" }
            *)
           (*%
            * @prefix formatSimple_
            * @format(index * ty) "RECORDBITMAPty(" !N0{ index "," +1 ty } ")"
            *)
           RECORDBITMAPty of int * ty

       and tvarKind =
           (*% @format *)
           (*% @prefix formatSimple_ @format *)
           UNIV
         | (*%
            * @format(ty tys:listWithEnclosureOne)
                     {"#" 2[tys(ty)("," +, "{", "}")]}
            *)
           (*%
            * @prefix formatSimple_
            * @format(ty tys)
            * "::" tys:enclosedList(ty)("{",",","}")
            *)
           (* for overloaded operators *)
           OPRIMkind of ty list
         | (*%
            * @format(ty smap:formatRecordTy)
            * "#" d smap(ty)(":", "," +1)
            *)
           (*%
            * @prefix formatSimple_
            * @format(ty tys)
            * "#" tys(ty)("{",",",":","}")
            *)
           REC of ty LabelEnv.map

       and dtyKind
         = (*% @format *)
           (*%
              @prefix formatSimple_
              @format
            *)

           DTY
         | (*% @format({opaqueRep, revealKey})
               "[opaque("revealKey "," opaqueRep ")" "]" *)
           (*% @prefix formatSimple_
               @format({opaqueRep, revealKey})
                "[opaque("revealKey "," opaqueRep ")" "]" *)
           OPAQUE of {opaqueRep:opaqueRep, revealKey:IDCalc.revealKey}
         | (*% @format(builtin) *)
           (*% @prefix formatSimple_
               @format(builtin) *)
           BUILTIN of BuiltinType.ty

       and opaqueRep 
         = (*% 
            @format(tyCon) tyCon
            *)
             TYCON of tyCon 
         | (*%
            @format({iseq, arity, polyTy}) polyTy
            *)
             TFUNDEF of {iseq:bool, arity:int, polyTy:ty}

  withtype btvKind =
           (*%
            * @format({id, tvarKind, eqKind})
            * eqKind "t" id d tvarKind
            *)
           (*%
            * @prefix formatSimple_
            * @format({id, tvarKind, eqKind})
            * eqKind "t" id d tvarKind
            *)
           {
            id : tid,
            tvarKind : tvarKind,
            eqKind : eqKind
           }

  and tyCon
    = (*% @format({id, path, iseq, arity, runtimeTy, conSet,
                   extraArgs:ty tys,
                   dtyKind})
          tys:ifCons()(tys:enclosedList(ty()())("{",",","}"))
          path "(" id "[" dtyKind()() "]" ")" 
       *)
      (*% 
          @prefix formatSimple_
          @format({id, path, iseq, arity, runtimeTy, conSet,
                   extraArgs:ty tys,
                   dtyKind})
          tys:ifCons()(tys:enclosedList(ty()())("{",",","}"))
          path "(" id "[" dtyKind()() "]" ")" 
       *)
      {id : IDCalc.typId,
       path :IDCalc.path,
       iseq : bool,
       arity : int,
       runtimeTy : BuiltinType.ty,
       conSet : {hasArg:bool} SEnv.map,
       extraArgs : Types.ty list,
       dtyKind : Types.dtyKind
      }



  (*%
   * @formatter(formatIEnv) format_IEnv
   *)
  (*%
   * @prefix formatSimple_
   * @formatter(BoundTypeVarID.Map.map) formatBtvEnv
   *)
  type btvEnv =
       (*%
        * @format(a b:formatIEnv) b(a)("," 2, "", "")
        *)
       (*%
        * @prefix formatSimple_
        * @format(kind map) map(kind)("," +1)
        *)
       btvKind BoundTypeVarID.Map.map

  (*% 
   * @formatter(appList) TermFormat.formatAppList
   * @formatter(Absyn.ffiAttributes) Absyn.format_ffiAttributes
   *)
  type foreignFunTy =
      (*%
       * @format({argTyList: argTy argTys, resultTy,  attributes})
       * L8{ 2[ attributes +1
       *   R4{ argTys:appList(argTy)("(",",",")")
       *       +1 "->" +d resultTy } ] }
       *)
      {
        argTyList : ty list,
        resultTy : ty,
        attributes : Absyn.ffiAttributes
      }

(*
 (*%
  * @formatter(Types.varId) Types.format_varId
  *)
 type varInfo =
      (*%
       * @format({displayName, ty, varId})
       * L2{ L2{ displayName 1 ":" d varId } +1 ":" +d ty }
       *)
      {displayName : string, ty : ty, varId : Types.varId}

 (*%
  *)
 type varInfoWithoutType =
      (*%
       * @format({displayName, ty, varId}) displayName
       *)
      {displayName : string, ty : ty, varId : Types.varId}

 (*%
  * @formatter(BuiltinPrimitive.primitive) BuiltinPrimitive.format_primitive
  *)
 type primInfo =
      (*%
       * @format({name,ty}) name
       *)
      {name : BuiltinPrimitive.primitive, ty : ty}
*)

 val intty = CONty {tyCon = BE.INTtyCon, args = []}
 val largeIntty = CONty {tyCon = BE.INTINFtyCon, args = []}
 val wordty = CONty {tyCon = BE.WORDtyCon, args = []}
 val bytety = CONty {tyCon = BE.WORD8tyCon, args = []}
 val realty = CONty {tyCon = BE.REALtyCon, args = []}
 val floatty = CONty {tyCon = BE.REAL32tyCon, args = []}
 val stringty = CONty {tyCon = BE.STRINGtyCon, args = []}
 val charty = CONty {tyCon = BE.CHARtyCon, args = []}
 val unitty = CONty {tyCon = BE.UNITtyCon, args = []}
 val exnty = CONty {tyCon = BE.EXNtyCon, args = []}
 fun boolty () = CONty {tyCon = BE.lookupTyCon BuiltinName.boolTyName, args=[]}
 val foreignfunty = CONty {tyCon = BE.PTRtyCon, args = [unitty]}
(*
 val arrayindexty = wordty
 val exntagty = CONty {tyCon = PT.exntagTyCon, args = []}

 fun arrayty ty = CONty {tyCon = PT.arrayTyCon, args = [ty]}

 fun arrayelemty (CONty {args = [ty], ...}) = ty
   | arrayelemty _ = raise Control.Bug "invalid array type"
*)

 end (* local *)

end
