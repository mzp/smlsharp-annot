_require "../../../basis/main/List.smi"
_require "../../../basis/main/binary-op.smi"
_require "../../../basis/main/General.smi"
_require "../../../smlformat-lib.smi"

_require "../../control/main/Loc.ppg.smi"
_require "USER_ERROR.sig"

structure UserError =
struct
  datatype errorKind = Error | Warning | Diagnosis of string
  type errorInfo = Loc.loc * errorKind * exn
  exception UserErrors of errorInfo list
  exception UserErrorsWithoutLoc of (errorKind * exn) list
  type errorQueue = errorInfo list ref
  val createQueue : unit -> errorQueue
  val clearQueue : errorQueue -> unit
  val isEmptyErrorQueue : errorQueue -> bool
  val enqueueError : errorQueue -> Loc.loc * exn -> unit
  val enqueueWarning : errorQueue -> Loc.loc * exn -> unit
  val enqueueDiagnosis : errorQueue -> Loc.loc * string * exn -> unit
  val format_errorInfo : errorInfo -> SMLFormat.FormatExpression.expression list
  val getErrorsAndWarnings : errorQueue -> errorInfo list
  val getErrors : errorQueue -> errorInfo list
  val getWarnings : errorQueue -> errorInfo list
  val getDiagnoses : errorQueue -> errorInfo list
end
