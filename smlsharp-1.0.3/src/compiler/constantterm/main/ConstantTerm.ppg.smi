_require "../../../basis.smi"
_require "../../../smlformat-lib.smi"
_require "../../../compiler-utils/env/main/SEnv.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"

_require "../../control/main/Control.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../util/main/BigInt_IntInf.smi"
_require "../../util/main/TermFormat.smi"
_require "../../usererror/main/UserError.ppg.smi"
_require "../../builtin/main/BuiltinName.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "../../types/main/BuiltinEnv.smi"
_require "../../types/main/Types.ppg.smi"
_require "../../types/main/TypesUtils.smi"

structure ConstantTerm =
struct
  datatype constant =
      INT of Int32.int
    | LARGEINT of BigInt.int
    | WORD of Word32.word
    | BYTE of Word8.word
    | STRING of string
    | REAL of string
    | FLOAT of string
    | CHAR of char
    | UNIT 
    | NULLPOINTER
    | NULLBOXED
  val format_constant
      : constant -> SMLFormat.FormatExpression.expression list
  exception TooLargeConstant
  val compare : constant * constant -> order
  val constTy : Absyn.constant -> Types.ty
  val fixConst
      : {constTerm : constant -> 'a,
         recordTerm : 'a LabelEnv.map * Types.ty -> 'a,
         conTerm : {con: Types.conInfo, instTyList: Types.ty list,
                    arg: 'a option} -> 'a}
        -> Absyn.constant * Types.ty
        -> 'a
end
