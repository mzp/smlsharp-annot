_require "../../../basis.smi"

structure BasicTypes = 
struct
  structure UInt8 =
  struct
    type word = Word8.word
    val wordSize : int
    val toLarge : word -> LargeWord.word
    val toLargeX : word -> LargeWord.word
    val toLargeWord : word -> LargeWord.word
    val toLargeWordX : word -> LargeWord.word
    val fromLarge : LargeWord.word -> word
    val fromLargeWord : LargeWord.word -> word
    val toLargeInt : word -> LargeInt.int
    val toLargeIntX : word -> LargeInt.int
    val fromLargeInt : LargeInt.int -> word
    val toInt : word -> int
    val toIntX : word -> int
    val fromInt : int -> word
    val andb : word * word -> word
    val orb : word * word -> word
    val xorb : word * word -> word
    val notb : word -> word
    val << : word * SMLSharp.Word.word -> word
    val >> : word * SMLSharp.Word.word -> word
    val ~>> : word * SMLSharp.Word.word -> word
    val + : word * word -> word
    val - : word * word -> word
    val * : word * word -> word
    val div : word * word -> word
    val mod : word * word -> word
    val compare : word * word -> order
    val < : word * word -> bool
    val <= : word * word -> bool
    val > : word * word -> bool
    val >= : word * word -> bool
    val ~ : word -> word
    val min : word * word -> word
    val max : word * word -> word
    val fmt : StringCvt.radix -> word -> string
    val toString : word -> string
    val scan : StringCvt.radix
               -> (char, 'a) StringCvt.reader
               -> (word, 'a) StringCvt.reader
    val fromString : string -> word option
  end
  structure SInt8 =
  struct
    type int = int
    val toLarge : int -> LargeInt.int
    val fromLarge : LargeInt.int -> int
    val toInt : int -> SMLSharp.Int.int
    val fromInt : SMLSharp.Int.int -> int
    val precision : SMLSharp.Int.int option
    val minInt : int option
    val maxInt : int option
    val + : int * int -> int
    val - : int * int -> int
    val * : int * int -> int
    val div : int * int -> int
    val mod : int * int -> int
    val quot : int * int -> int
    val rem : int * int -> int
    val compare : int * int -> order
    val < : int * int -> bool
    val <= : int * int -> bool
    val > : int * int -> bool
    val >= : int * int -> bool
    val ~ : int -> int
    val abs : int -> int
    val min : int * int -> int
    val max : int * int -> int
    val sign : int -> SMLSharp.Int.int
    val sameSign : int * int -> bool
    val fmt : StringCvt.radix -> int -> string
    val toString : int -> string
    val scan : StringCvt.radix
               -> (char, 'a) StringCvt.reader
               -> (int, 'a) StringCvt.reader
    val fromString : string -> int option
  end
  structure UInt16 =
  struct
    type word = word
    val wordSize : int
    val toLarge : word -> LargeWord.word
    val toLargeX : word -> LargeWord.word
    val toLargeWord : word -> LargeWord.word
    val toLargeWordX : word -> LargeWord.word
    val fromLarge : LargeWord.word -> word
    val fromLargeWord : LargeWord.word -> word
    val toLargeInt : word -> LargeInt.int
    val toLargeIntX : word -> LargeInt.int
    val fromLargeInt : LargeInt.int -> word
    val toInt : word -> int
    val toIntX : word -> int
    val fromInt : int -> word
    val andb : word * word -> word
    val orb : word * word -> word
    val xorb : word * word -> word
    val notb : word -> word
    val << : word * SMLSharp.Word.word -> word
    val >> : word * SMLSharp.Word.word -> word
    val ~>> : word * SMLSharp.Word.word -> word
    val + : word * word -> word
    val - : word * word -> word
    val * : word * word -> word
    val div : word * word -> word
    val mod : word * word -> word
    val compare : word * word -> order
    val < : word * word -> bool
    val <= : word * word -> bool
    val > : word * word -> bool
    val >= : word * word -> bool
    val ~ : word -> word
    val min : word * word -> word
    val max : word * word -> word
    val fmt : StringCvt.radix -> word -> string
    val toString : word -> string
    val scan : StringCvt.radix
               -> (char, 'a) StringCvt.reader
               -> (word, 'a) StringCvt.reader
    val fromString : string -> word option
  end
  structure SInt16 =
  struct 
    type int = int
    val toLarge : int -> LargeInt.int
    val fromLarge : LargeInt.int -> int
    val toInt : int -> SMLSharp.Int.int
    val fromInt : SMLSharp.Int.int -> int
    val precision : SMLSharp.Int.int option
    val minInt : int option
    val maxInt : int option
    val + : int * int -> int
    val - : int * int -> int
    val * : int * int -> int
    val div : int * int -> int
    val mod : int * int -> int
    val quot : int * int -> int
    val rem : int * int -> int
    val compare : int * int -> order
    val < : int * int -> bool
    val <= : int * int -> bool
    val > : int * int -> bool
    val >= : int * int -> bool
    val ~ : int -> int
    val abs : int -> int
    val min : int * int -> int
    val max : int * int -> int
    val sign : int -> SMLSharp.Int.int
    val sameSign : int * int -> bool
    val fmt : StringCvt.radix -> int -> string
    val toString : int -> string
    val scan : StringCvt.radix
               -> (char, 'a) StringCvt.reader
               -> (int, 'a) StringCvt.reader
    val fromString : string -> int option
  end
  structure UInt24 =
  struct
    type word = word
    val wordSize : int
    val toLarge : word -> LargeWord.word
    val toLargeX : word -> LargeWord.word
    val toLargeWord : word -> LargeWord.word
    val toLargeWordX : word -> LargeWord.word
    val fromLarge : LargeWord.word -> word
    val fromLargeWord : LargeWord.word -> word
    val toLargeInt : word -> LargeInt.int
    val toLargeIntX : word -> LargeInt.int
    val fromLargeInt : LargeInt.int -> word
    val toInt : word -> int
    val toIntX : word -> int
    val fromInt : int -> word
    val andb : word * word -> word
    val orb : word * word -> word
    val xorb : word * word -> word
    val notb : word -> word
    val << : word * SMLSharp.Word.word -> word
    val >> : word * SMLSharp.Word.word -> word
    val ~>> : word * SMLSharp.Word.word -> word
    val + : word * word -> word
    val - : word * word -> word
    val * : word * word -> word
    val div : word * word -> word
    val mod : word * word -> word
    val compare : word * word -> order
    val < : word * word -> bool
    val <= : word * word -> bool
    val > : word * word -> bool
    val >= : word * word -> bool
    val ~ : word -> word
    val min : word * word -> word
    val max : word * word -> word
    val fmt : StringCvt.radix -> word -> string
    val toString : word -> string
    val scan : StringCvt.radix
               -> (char, 'a) StringCvt.reader
               -> (word, 'a) StringCvt.reader
    val fromString : string -> word option
  end
  structure SInt24 =
  struct
    type int = int
    val toLarge : int -> LargeInt.int
    val fromLarge : LargeInt.int -> int
    val toInt : int -> SMLSharp.Int.int
    val fromInt : SMLSharp.Int.int -> int
    val precision : SMLSharp.Int.int option
    val minInt : int option
    val maxInt : int option
    val + : int * int -> int
    val - : int * int -> int
    val * : int * int -> int
    val div : int * int -> int
    val mod : int * int -> int
    val quot : int * int -> int
    val rem : int * int -> int
    val compare : int * int -> order
    val < : int * int -> bool
    val <= : int * int -> bool
    val > : int * int -> bool
    val >= : int * int -> bool
    val ~ : int -> int
    val abs : int -> int
    val min : int * int -> int
    val max : int * int -> int
    val sign : int -> SMLSharp.Int.int
    val sameSign : int * int -> bool
    val fmt : StringCvt.radix -> int -> string
    val toString : int -> string
    val scan : StringCvt.radix
               -> (char, 'a) StringCvt.reader
               -> (int, 'a) StringCvt.reader
    val fromString : string -> int option
  end
  structure UInt32 =
  struct
    type word = Word32.word
    val wordSize : int
    val toLarge : word -> LargeWord.word
    val toLargeX : word -> LargeWord.word
    val toLargeWord : word -> LargeWord.word
    val toLargeWordX : word -> LargeWord.word
    val fromLarge : LargeWord.word -> word
    val fromLargeWord : LargeWord.word -> word
    val toLargeInt : word -> LargeInt.int
    val toLargeIntX : word -> LargeInt.int
    val fromLargeInt : LargeInt.int -> word
    val toInt : word -> int
    val toIntX : word -> int
    val fromInt : int -> word
    val andb : word * word -> word
    val orb : word * word -> word
    val xorb : word * word -> word
    val notb : word -> word
    val << : word * SMLSharp.Word.word -> word
    val >> : word * SMLSharp.Word.word -> word
    val ~>> : word * SMLSharp.Word.word -> word
    val + : word * word -> word
    val - : word * word -> word
    val * : word * word -> word
    val div : word * word -> word
    val mod : word * word -> word
    val compare : word * word -> order
    val < : word * word -> bool
    val <= : word * word -> bool
    val > : word * word -> bool
    val >= : word * word -> bool
    val ~ : word -> word
    val min : word * word -> word
    val max : word * word -> word
    val fmt : StringCvt.radix -> word -> string
    val toString : word -> string
    val scan : StringCvt.radix
               -> (char, 'a) StringCvt.reader
               -> (word, 'a) StringCvt.reader
    val fromString : string -> word option
  end
  structure SInt32 =
  struct
    type int = Int32.int
    val toLarge : int -> LargeInt.int
    val fromLarge : LargeInt.int -> int
    val toInt : int -> SMLSharp.Int.int
    val fromInt : SMLSharp.Int.int -> int
    val precision : SMLSharp.Int.int option
    val minInt : int option
    val maxInt : int option
    val + : int * int -> int
    val - : int * int -> int
    val * : int * int -> int
    val div : int * int -> int
    val mod : int * int -> int
    val quot : int * int -> int
    val rem : int * int -> int
    val compare : int * int -> order
    val < : int * int -> bool
    val <= : int * int -> bool
    val > : int * int -> bool
    val >= : int * int -> bool
    val ~ : int -> int
    val abs : int -> int
    val min : int * int -> int
    val max : int * int -> int
    val sign : int -> SMLSharp.Int.int
    val sameSign : int * int -> bool
    val fmt : StringCvt.radix -> int -> string
    val toString : int -> string
    val scan : StringCvt.radix
               -> (char, 'a) StringCvt.reader
               -> (int, 'a) StringCvt.reader
    val fromString : string -> int option
  end
  structure Real32 =
  struct
    type real = Real64.real
    structure Math =
    struct
      type real = real
      val pi : real
      val e : real
      val sqrt : real -> real
      val sin : real -> real
      val cos : real -> real
      val tan : real -> real
      val asin : real -> real
      val acos : real -> real
      val atan : real -> real
      val atan2 : real * real -> real
      val exp : real -> real
      val pow : real * real -> real
      val ln : real -> real
      val log10 : real -> real
      val sinh : real -> real
      val cosh : real -> real
      val tanh : real -> real
    end
    val radix : int
    val precision : int
    val maxFinite : real
    val minPos : real
    val minNormalPos : real
    val posInf : real
    val negInf : real
    val + : real * real -> real
    val - : real * real -> real
    val * : real * real -> real
    val / : real * real -> real
    val rem : real * real -> real
    val *+ : real * real * real -> real
    val *- : real * real * real -> real
    val ~ : real -> real
    val abs : real -> real
    val min : real * real -> real
    val max : real * real -> real
    val sign : real -> int
    val signBit : real -> bool
    val sameSign : real * real -> bool
    val copySign : real * real -> real
    val compare : real * real -> order
    val compareReal : real * real -> IEEEReal.real_order
    val < : real * real -> bool
    val <= : real * real -> bool
    val > : real * real -> bool
    val >= : real * real -> bool
    val == : real * real -> bool
    val != : real * real -> bool
    val ?= : real * real -> bool
    val unordered : real * real -> bool
    val isFinite : real -> bool
    val isNan : real -> bool
    val isNormal : real -> bool
    val class : real -> IEEEReal.float_class
    val toManExp : real -> {man : real, exp : int}
    val fromManExp : {man : real, exp : int} -> real
    val split : real -> {whole : real, frac : real}
    val realMod : real -> real
    val nextAfter : real * real -> real
    val checkFloat : real -> real
    val realFloor : real -> real
    val realCeil : real -> real
    val realTrunc : real -> real
    val realRound : real -> real
    val floor : real -> int
    val ceil : real -> int
    val trunc : real -> int
    val round : real -> int
    val toInt : IEEEReal.rounding_mode -> real -> int
    val toLargeInt : IEEEReal.rounding_mode -> real -> LargeInt.int
    val fromInt : int -> real
    val fromLargeInt : LargeInt.int -> real
    val toLarge : real -> LargeReal.real
    val fromLarge : IEEEReal.rounding_mode -> LargeReal.real -> real
    val fmt : StringCvt.realfmt -> real -> string
    val toString : real -> string
    val scan : (char, 'a) StringCvt.reader -> (real, 'a) StringCvt.reader
    val fromString : string -> real option
    val toDecimal : real -> IEEEReal.decimal_approx
    val fromDecimal : IEEEReal.decimal_approx -> real option
  end
  structure Real64 =
  struct
    type real = Real64.real
    structure Math =
    struct
      type real = real
      val pi : real
      val e : real
      val sqrt : real -> real
      val sin : real -> real
      val cos : real -> real
      val tan : real -> real
      val asin : real -> real
      val acos : real -> real
      val atan : real -> real
      val atan2 : real * real -> real
      val exp : real -> real
      val pow : real * real -> real
      val ln : real -> real
      val log10 : real -> real
      val sinh : real -> real
      val cosh : real -> real
      val tanh : real -> real
    end
    val radix : int
    val precision : int
    val maxFinite : real
    val minPos : real
    val minNormalPos : real
    val posInf : real
    val negInf : real
    val + : real * real -> real
    val - : real * real -> real
    val * : real * real -> real
    val / : real * real -> real
    val rem : real * real -> real
    val *+ : real * real * real -> real
    val *- : real * real * real -> real
    val ~ : real -> real
    val abs : real -> real
    val min : real * real -> real
    val max : real * real -> real
    val sign : real -> int
    val signBit : real -> bool
    val sameSign : real * real -> bool
    val copySign : real * real -> real
    val compare : real * real -> order
    val compareReal : real * real -> IEEEReal.real_order
    val < : real * real -> bool
    val <= : real * real -> bool
    val > : real * real -> bool
    val >= : real * real -> bool
    val == : real * real -> bool
    val != : real * real -> bool
    val ?= : real * real -> bool
    val unordered : real * real -> bool
    val isFinite : real -> bool
    val isNan : real -> bool
    val isNormal : real -> bool
    val class : real -> IEEEReal.float_class
    val toManExp : real -> {man : real, exp : int}
    val fromManExp : {man : real, exp : int} -> real
    val split : real -> {whole : real, frac : real}
    val realMod : real -> real
    val nextAfter : real * real -> real
    val checkFloat : real -> real
    val realFloor : real -> real
    val realCeil : real -> real
    val realTrunc : real -> real
    val realRound : real -> real
    val floor : real -> int
    val ceil : real -> int
    val trunc : real -> int
    val round : real -> int
    val toInt : IEEEReal.rounding_mode -> real -> int
    val toLargeInt : IEEEReal.rounding_mode -> real -> LargeInt.int
    val fromInt : int -> real
    val fromLargeInt : LargeInt.int -> real
    val toLarge : real -> LargeReal.real
    val fromLarge : IEEEReal.rounding_mode -> LargeReal.real -> real
    val fmt : StringCvt.realfmt -> real -> string
    val toString : real -> string
    val scan : (char, 'a) StringCvt.reader -> (real, 'a) StringCvt.reader
    val fromString : string -> real option
    val toDecimal : real -> IEEEReal.decimal_approx
    val fromDecimal : IEEEReal.decimal_approx -> real option
  end
  type UInt8 = Word8.word
  type SInt8 = Int.int
  type UInt16 = Word.word
  type SInt16 = Int.int
  type UInt24 = Word.word
  type SInt24 = Int.int
  type UInt32 = Word32.word
  type SInt32 = Int32.int
  type Real32 = Real32.real
  type Real64 = Real64.real
  val BytesOfUInt32 : UInt32
  val WordsOfReal64 : UInt32
  val SInt32ToSInt8 : SInt32 -> SInt8
  val SInt32ToSInt16 : SInt32 -> SInt16
  val SInt32ToSInt24 : SInt32 -> SInt24
  val SInt8ToSInt32 : SInt8 -> SInt32
  val SInt16ToSInt32 : SInt16 -> SInt32
  val SInt24ToSInt32 : SInt24 -> SInt32
  val UInt32ToUInt8 : UInt32 -> UInt8
  val UInt32ToUInt16 : UInt32 -> UInt16
  val UInt32ToUInt24 : UInt32 -> UInt24
  val UInt8ToUInt32 : UInt8 -> UInt32
  val UInt16ToUInt32 : UInt16 -> UInt32
  val UInt24ToUInt32 : UInt24 -> UInt32
  val SInt8ToUInt32 : SInt8 -> UInt32
  val SInt16ToUInt32 : SInt16 -> UInt32
  val SInt24ToUInt32 : SInt24 -> UInt32
  val SInt32ToUInt32 : SInt32 -> UInt32
  val UInt8ToSInt32 : UInt8 -> SInt32
  val UInt16ToSInt32 : UInt16 -> SInt32
  val UInt24ToSInt32 : UInt24 -> SInt32
  val UInt32ToSInt32 : UInt32 -> SInt32
  val IntToSInt8 : int -> SInt8
  val IntToSInt16 : int -> SInt16
  val IntToSInt24 : int -> SInt24
  val IntToSInt32 : int -> SInt32
  val SInt8ToInt : SInt8 -> int
  val SInt16ToInt : SInt16 -> int
  val SInt24ToInt : SInt24 -> int
  val SInt32ToInt : SInt32 -> int
  val IntToUInt8 : int -> UInt8
  val IntToUInt16 : int -> UInt16
  val IntToUInt24 : int -> UInt24
  val IntToUInt32 : int -> UInt32
  val UInt8ToInt : UInt8 -> int
  val UInt16ToInt : UInt16 -> int
  val UInt24ToInt : UInt24 -> int
  val UInt32ToInt : UInt32 -> int
  val WordToUInt8 : word -> UInt8
  val WordToUInt16 : word -> UInt16
  val WordToUInt24 : word -> UInt24
  val WordToUInt32 : word -> UInt32
  val UInt8ToWord : UInt8 -> word
  val UInt16ToWord : UInt16 -> word
  val UInt24ToWord : UInt24 -> word
  val UInt32ToWord : UInt32 -> word
  val WordToSInt8 : word -> SInt8
  val WordToSInt16 : word -> SInt16
  val WordToSInt24 : word -> SInt24
  val WordToSInt32 : word -> SInt32
  val SInt8ToWord : SInt8 -> word
  val SInt16ToWord : SInt16 -> word
  val SInt24ToWord : SInt24 -> word
  val SInt32ToWord : SInt32 -> word
  val RealToReal64 : real -> Real64
  val Real64ToReal : Real64 -> real
  val Real64ToSInt32 : Real64 -> SInt32
  val SInt32ToReal64 : SInt32 -> Real64
  val RealToReal32 : real -> Real64
  val Real32ToReal : Real64 -> real
  val Real32ToSInt32 : Real64 -> SInt32
  val SInt32ToReal32 : SInt32 -> Real64
  val StringLengthToPaddedUInt8ListLength : int -> int
  val StringToPaddedUInt8ListLength : string -> int
  val StringToPaddedUInt8List : string -> UInt8 list
  val UInt8ListToString : UInt8 list -> string
  val StringToUInt8Array : string -> Word8Array.array * UInt32
  val UInt8ArrayToString : Word8Array.array * UInt32 -> string
end
