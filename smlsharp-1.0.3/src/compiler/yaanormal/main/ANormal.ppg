(* -*- sml -*- *)
(**
 * A-Normal form
 * @copyright (c) 2006-2007, Tohoku University.
 * @author UENO Katsuhiro
 * @author NGUYEN Huu-Duc
 * @version $Id: ANormal.ppg,v 1.20 2008/08/06 17:23:41 ohori Exp $
 *)
structure YAANormal =
struct
  local
    fun format_ifCons (f, format) [] = []
      | format_ifCons (f, format) _ = format
    fun term s = SMLFormat.FormatExpression.Term (size s, s)
    fun format_ID id = [term (VarID.toString id)]
  in

  (*% @formatter(VarID.id) format_ID *)
  type id = VarID.id

  (*% @formatter(ClusterID.id) ClusterID.format_id *)
  type clusterId = ClusterID.id

  (*% @formatter(BoundTypeVarID.id) BoundTypeVarID.format_id *)
  type tyvarId =
      (*% @format(id) "t" id *)
      BoundTypeVarID.id

  (*%
   * @formatter(prepended) SmlppgUtil.formatPrependedOpt
   *)
  datatype ty =
      UINT
    | SINT
    | BYTE
    | BOXED
    | POINTER               (* type for C pointer *)
    | FUNENTRY              (* type for ANLABEL *)
    | CODEPOINT             (* type for ANLOCALCODE; general code pointer *)
    | FOREIGNFUN            (* type for C function pointer *)
    | FLOAT                 (* single-precision floating point *)
    | DOUBLE                (* double-precision floating point *)
    | (*% @format(tid) "GENERIC(" tid ")" *)
      GENERIC of tyvarId

  (*%
   * @params(id)
   *)
  datatype varKind =
      (*% @format "a" id *)
      ARG
    | (*% @format "la" id *)
      LOCALARG
    | (*% @format "v" id *)
      LOCAL

  (*% *)
  type varInfo =
      (*% @format({id, displayName, ty, varKind})  varKind()(id) *)
      {id: id, displayName: string, ty: ty, varKind: varKind}

  local
    (*% *)
    type varInfoWithType =
         (*%
          * @format({id, displayName, ty, varKind})
          * { varKind()(id) +d ":" +d ty }
          *)
         {id: id, displayName: string, ty: ty, varKind: varKind}
  in

  (*% @formatter(Loc.loc) Loc.format_loc *)
  type loc = Loc.loc

  (*% @formatter(ConstantTerm.constant) ConstantTerm.format_constant *)
  type constant = ConstantTerm.constant

  (*% @formatter(Absyn.ffiAttributes) Absyn.format_ffiAttributes *)
  type ffiAttributes = Absyn.ffiAttributes

  (*% *)
  datatype topSymbol =
      (*% @format(x) "local:" x *)
      TOP_LOCAL of id
    | (*% @format(x) "globl:" x *)
      TOP_GLOBAL of string
     

  (*% *)
  datatype topSymbolRef =
      (*% @format(x) "local:" x *)
      TOP_EXPORT of topSymbol
    | (*% @format(x) "extrn:" x *)
      TOP_EXTERN of string

  (*%
   * @formatter(BasicTypes.SInt32) BasicTypeFormatters.format_SInt32
   * @formatter(BasicTypes.UInt32) BasicTypeFormatters.format_UInt32
   * @formatter(Word8.word) TermFormat.format_Word8_hex_ML
   *)
  datatype anvalue =
      (*% @format(x) x *)
      ANINT of BasicTypes.SInt32
    | (*% @format(x) x *)
      ANWORD of BasicTypes.UInt32
    | (*% @format(x) "0b" x *)
      ANBYTE of Word8.word
    | (*% @format(x) "#\"" x "\"" *)
      ANCHAR of char
    | (*% @format "()" *)
      ANUNIT
    | (*% @format "NULLPOINTER" *)
      ANNULLPOINTER
    | (*% @format "NULLBOXED" *)
      ANNULLBOXED
    | (*% @format(v) v *)
      ANVAR of varInfo
    | (*% @format(id) "F" id *)
      (* general label of functions. type: FUNENTRY *)
      ANLABEL of id
    | (*% @format(id) "c" id *)
      (*
       * This term can indicate not only codeDecl but also funDecl.
       * Every function may LOCALCALL a function defined in the same cluster.
       *)
      ANLOCALCODE of id
    | (*% @format({name, ty}) name ":" ty *)
      ANTOPSYMBOL of
      {
        name: topSymbolRef,
        ty: ty     (* BOXED or FOREIGNFUN *)
      }
      (* EXCEPTIONTAG is compiled into ANGLOBALREF or ANVAR. *)
      (* SETGLOBAL is compiled into
       *   ANSETFIELD {array = ANGLOBALREF, offset = ANWORD 0w0, ...} *)
      (* GETGLOBAL is compiled into
       *   ANGETFIELD {array = ANGLOBALREF, offset = ANWORD 0w0, ...} *)
(*
      (*% @format(c) c *)
      (* except CT.STRING, CT.REAL, CT.FLOAT, and CT.LARGEINT.
       * These constants are too large as operands. *)
      ANCONSTANT of constant
    | (*% @format({globalName:gn gnopt, tag}) "<" gnopt(gn) "," tag ">" *)
      ANEXCEPTIONTAG of {globalName: globalName option, tag: globalTag}
*)

  (*%
   * @formatter(BasicTypes.UInt32) BasicTypeFormatters.format_UInt32
   * @formatter(enclosedList) SmlppgUtil.formatListWithEnclosureIfNotOne
   * @formatter(ifCons) format_ifCons
   * @formatter(BuiltinPrimitive.primitive) BuiltinPrimitive.format_primitive
   *)
  datatype anexp =
      (*% @format(v) v *)
      ANCONST of constant
    | (*% @format(v) v *)
      ANVALUE of anvalue
    | (*%
       * @format({function,
       *          argList: arg args,
       *          argTyList: argTy argTys:enclosedList,
       *          resultTyList: retTy retTys:enclosedList,
       *          attributes})
       * "_ffiapply" 2[ +d attributes +d function
       * +d "(" {args(arg)("," +)} ")"
       * +2 ":" +d { {argTys(argTy)("," +1, "(", ")")}
       *             +1 "->" +2 {retTys(retTy)("," +1, "(", ")")} } ]
       *)
      ANFOREIGNAPPLY of
      {
        function: anvalue,         (* CODEPOINT *)
        argList: anvalue list,
        argTyList: ty list,
        resultTyList: ty list,
        attributes: ffiAttributes
      }
    | (*%
       * @format({funLabel, env,
       *          argTyList: argTy argTys:enclosedList,
       *          resultTyList: retTy retTys:enclosedList,
       *          attributes})
       * "_CALLBACK" 2[ +d { "fun" "=" funLabel "," +1
       *                     "env" "=" env }
       * +2 ":" +d { {argTys(argTy)("," +1, "(", ")")}
       *            +1 "->" +2 {retTys(retTy)("," +1, "(", ")")} } ]
       *)
      ANCALLBACKCLOSURE of
      {
        funLabel: anvalue,       (* FUNENTRY *)
        env: anvalue,
        argTyList: ty list,
        resultTyList: ty list,
        attributes: ffiAttributes
      }
(*
    | ANGETGLOBAL of
      {
        id: ExVarID.id,
        globalName: globalName option,
        size: anvalue,
        ty: ty
      }
*)
    | (*%
       * @format({nestLevel, offset, size, ty})
       * { "ENV" "[" { nestLevel "/" +2 offset "," +1 size } "]" +1 ":" +2 ty }
       *)
      ANENVACC of
      {
        nestLevel: BasicTypes.UInt32,
        offset: BasicTypes.UInt32,
        size: anvalue,
        ty: ty
      }
    | (*%
       * @format({array, offset, size, ty, needBoundaryCheck})
       * { array "[" { offset "," +1 size } "]" +1 ":" +2 ty }
       *)
      ANGETFIELD of
      {
        array: anvalue,
        offset: anvalue,
        size: anvalue,
        ty: ty,
        needBoundaryCheck: bool
      }
    | (*%
       * @format({bitmap, totalSize, initialValue: v vo, elementTy, elementSize,
       *          isMutable})
       * "Array"
       * "(" { "bitmap" "=" bitmap "," +1
       *       "size" "=" totalSize "," +1
       *       "init" "=" { vo(v)
       *                    +2 ":" +d elementTy
       *                    +3 ":" +d elementSize }
       * } ")"
       *)
      ANARRAY of
      {
        bitmap: anvalue,
        totalSize: anvalue,
        initialValue: anvalue option,
        elementTy: ty,
        elementSize: anvalue,
        isMutable : bool
      }
    | (*%
       * @format({bitmaps: bm bms:enclosedList,
       *          totalSize,
       *          fieldList: value values:enclosedList,
       *          fieldSizeList: size sizes:enclosedList,
       *          fieldTyList: ty tys:enclosedList,
       *          fieldIndexList,
       *          isMutable, clearPad})
       * "Record"
       * "(" { "bitmap" "=" {bms(bm)("," +1, "(", ")")} "," +1
       *       "size" "=" totalSize "," +1
       *       "init" "=" { {values(value)("," +1, "(", ")")}
       *                    +3 ":" +d {tys(ty)("," +1, "(", ")")}
       *                    +2 ":" +d {sizes(size)("," 1+, "(", ")")} }
       * } ")"
       *)
      ANRECORD of
      {
        bitmaps: anvalue list,
        totalSize: anvalue,
        fieldList: anvalue list,
        fieldSizeList: anvalue list,
        fieldIndexList: anvalue list,
        fieldTyList: ty list,
        isMutable: bool,
        clearPad: bool
      }
    | (*%
       * @format({record, nestLevel, offset, size, ty})
       * { record "[" { nestLevel "/" offset "," +1 size } "]" +1 ":" +2 ty }
       *)
      ANSELECT of
      {
        record: anvalue,
        nestLevel: anvalue,
        offset: anvalue,
        size: anvalue,
        ty: ty
      }
    | (*%
       * @format({record, nestLevel, offset, value, valueTy, valueSize,
       *          valueTag})
       * record + "{"
       * 2[ 1 { "[" nestLevel "/" offset "]"
       *        +d "=" 2[ +2 value +3 ":" +d valueTy +4 ":" +d valueSize
       *                  +5 ":" +d valueTag ] }
       * ] 1 "}"
       *)
      ANMODIFY of
      {
        record: anvalue,
        nestLevel: anvalue,
        offset: anvalue,
        value: anvalue,
        valueTy: ty,
        valueSize: anvalue,
        valueTag: anvalue
      }
    | (*%
       * @format({prim,
       *          argList: arg args:enclosedList,
       *          argTyList: argTy argTys:enclosedList,
       *          resultTyList: retTy retTys:enclosedList,
       *          instSizeList: sz szs:enclosedList,
       *          instTagList: tag tags:enclosedList})
       * "_prim" 2[ +d prim +d {args(arg)("," +1, "(", ")")}
       * +2 ":" +d { {argTys(argTy)("," +1, "(", ")")}
       *             +1 "->" +2 {retTys(retTy)("," +1, "(", ")")} }
       * +3 "{" { {szs(sz)("," +1, "(", ")")} "," +1
       *          {tags(tag)("," +1, "(", ")")} "}" } ]
       *)
      ANPRIMAPPLY of
      {
        prim: BuiltinPrimitive.primitive,
        argList: anvalue list,
        argTyList: ty list,
        resultTyList: ty list,
        instSizeList: anvalue list,
        instTagList: anvalue list
      }
    | (*%
       * @format({funLabel, env})
       * "Closure" "(" { "fun" "=" funLabel "," +1
       *                 "env" "=" env } ")"
       *)
      ANCLOSURE of
      {
        funLabel: anvalue,       (* FUNENTRY *)
        env: anvalue
      }
    | (*%
       * @format({funLabel})
       * "RecClosure" "(" funLabel ")"
       *)
      (*
       * special version of ANCLOSURE; let env be current closure environment.
       *)
      ANRECCLOSURE of
      {
        funLabel: anvalue        (* FUNENTRY *)
      }
    | (*%
       * @format({closure,
       *          argList: arg args:enclosedList,
       *          argTyList: argTy argTys:enclosedList,
       *          resultTyList: retTy retTys:enclosedList})
       * closure 2[ +d {args(arg)("," +1, "(", ")")}
       * +2 ":" +d { {argTys(argTy)("," +1, "(", ")")}
       *             +1 "->" +2 {retTys(retTy)("," +1, "(", ")")} } ]
       *)
      ANAPPLY of
      {
        closure: anvalue,          (* closure *)
        argList: anvalue list,
        argTyList: ty list,
        resultTyList: ty list
      }
    | (*%
       * @format({funLabel,
       *          env,
       *          argList: arg args:enclosedList,
       *          argTyList: argTy argTys:enclosedList,
       *          resultTyList: retTy retTys:enclosedList})
       * funLabel 2[ +d "<" env ">" +d {args(arg)("," +1, "(", ")")}
       * +2 ":" +d { {argTys(argTy)("," +1, "(", ")")}
       *             +1 "->" +2 {retTys(retTy)("," +1, "(", ")")} } ]
       *)
      (*
       * special version of ANAPPLY; call without closure.
       *)
      ANCALL of
      {
        funLabel: anvalue,         (* FUNENTRY *)
        env: anvalue,
        argList: anvalue list,
        argTyList: ty list,
        resultTyList: ty list
      }
    | (*%
       * @format({funLabel,
       *          argList: arg args:enclosedList,
       *          argTyList: argTy argTys:enclosedList,
       *          resultTyList: retTy retTys:enclosedList})
       * "REC:" funLabel 2[ +d {args(arg)("," +1, "(", ")")}
       * +2 ":" +d { {argTys(argTy)("," +1, "(", ")")}
       *             +1 "->" +2 {retTys(retTy)("," +1, "(", ")")} } ]
       *)
      (*
       * special version of ANCALL; let env be current closure environment.
       *)
      ANRECCALL of
      {
        funLabel: anvalue,         (* FUNENTRY *)
        argList: anvalue list,
        argTyList: ty list,
        resultTyList: ty list
      }
    | (*%
       * @format({codeLabel,
       *          argList: arg args:enclosedList,
       *          argTyList: argTy argTys:enclosedList,
       *          resultTyList: retTy retTys:enclosedList,
       *          returnLabel, knownDestinations})
       * "LOCAL:" codeLabel 2[ +d {args(arg)("," +1, "(", ")")}
       * +2 ":" +d { {argTys(argTy)("," +1, "(", ")")}
       *             +1 "->" +2 {retTys(retTy)("," +1, "(", ")")} } ]
       *)
      ANLOCALCALL of
      {
        codeLabel: anvalue,        (* CODEPOINT *)
        argList: anvalue list,
        argTyList: ty list,
        resultTyList: ty list,
        (* unique label for each ANLOCALCALL.
         * This will be used as return address of this call. *)
        returnLabel: id,
        (* workspace for AIGeneration. initialize it with nil. *)
        knownDestinations: id list ref
      }

  (*%
   * @formatter(BasicTypes.UInt32) BasicTypeFormatters.format_UInt32
   * @formatter(withType) format_varInfoWithType
   * @formatter(enclosedList) SmlppgUtil.formatListWithEnclosureIfNotOne
   * @formatter(ifCons) format_ifCons
   *)
  datatype andecl =
(*
      (*%
       * @format({id, globalName:gn gnopt, size, ty, value, loc})
       * { "GLOBAL:" gnopt(gn) "<" id ">" +d "="
       *   4[ +2 value +3 ":" +d ty +4 ":" +d size ] }
       *)
      (* only appear in sequential compilation *)
      ANSETGLOBAL of
      {
        id: ExVarID.id,
        globalName: globalName option,
        size: anvalue,
        ty: ty,
        value: anvalue,
        loc: loc
      }
*)
      (*%
       * @format({array, offset, value, valueTy, valueSize, valueTag,
       *          setGlobal, needBoundaryCheck, loc})
       * { array "[" offset "]" +d "="
       *   4[ +2 value +3 ":" +d valueTy +4 ":" +d valueSize
       *      +5 ":" +d valueTag ] }
       *)
      ANSETFIELD of
      {
        array: anvalue,
        offset: anvalue,
        value: anvalue,
        valueTy: ty,
        valueSize: anvalue,
        valueTag: anvalue,
        setGlobal: bool,
        needBoundaryCheck: bool,
        loc: loc
      }
    | (*%
       * @format({record, nestLevel, offset, value, valueTy, valueSize,
       *          valueTag, loc})
       * { record "[" nestLevel "/" offset "]" +d "="
       *   4[ +2 value +3 ":" +d valueTy +4 ":" +d valueSize
       *      +5 ":" +d valueTag ] }
       *)
      ANSETTAIL of
      {
        record: anvalue,
        nestLevel: anvalue,
        offset: anvalue,
        value: anvalue,
        valueTy: ty,
        valueSize: anvalue,
        valueTag : anvalue,
        loc: loc
      }
    | (*%
       * @format({src, srcOffset, dst, dstOffset, length,
       *          elementTy, elementSize, elementTag, loc})
       * "CopyArray"
       * "(" { "src" "=" src "[" srcOffset "]" "," +1
       *       "dst" "=" dst "[" dstOffset "]" "," +1
       *       "length" "=" length "," +1
       *       "elem" "=" { +d elementTy +3 ":" +d elementSize +3
       *                    ":" +d elementTag }
       * } ")"
       *)
      ANCOPYARRAY of
      {
        src : anvalue,
        srcOffset : anvalue,
        dst : anvalue,
        dstOffset : anvalue,
        length : anvalue,
        elementTy : ty,
        elementSize : anvalue,
        elementTag : anvalue,
        loc: loc
      }
    | (*%
       * @format({closure,
       *          argList: arg args:enclosedList,
       *          argTyList: argTy argTys:enclosedList,
       *          resultTyList: retTy retTys:enclosedList,
       *          loc})
       * { "in" +d
       *   closure 2[ +d {args(arg)("," +1, "(", ")")}
       *   +2 ":" +d { {argTys(argTy)("," +1, "(", ")")}
       *                +1 "->" +2 {retTys(retTy)("," +1, "(", ")")} } ]
       * }
       *)
      ANTAILAPPLY of
      {
        closure: anvalue,          (* closure *)
        argList: anvalue list,
        argTyList: ty list,
        resultTyList: ty list,
        loc: loc
      }
    | (*%
       * @format({funLabel,
       *          env,
       *          argList: arg args:enclosedList,
       *          argTyList: argTy argTys:enclosedList,
       *          resultTyList: retTy retTys:enclosedList,
       *          loc})
       * { "in" +d
       *   funLabel 2[ +d "<" env ">" +d {args(arg)("," +1, "(", ")")}
       *   +2 ":" +d { {argTys(argTy)("," +1, "(", ")")}
       *               +1 "->" +2 {retTys(retTy)("," +1, "(", ")")} } ]
       * }
       *)
      (*
       * special version of ANTAILAPPLY; call without closure.
       *)
      ANTAILCALL of
      {
        funLabel: anvalue,         (* FUNENTRY *)
        env: anvalue,
        argList: anvalue list,
        argTyList: ty list,
        resultTyList: ty list,
        loc: loc
      }
    | (*%
       * @format({funLabel,
       *          argList: arg args:enclosedList,
       *          argTyList: argTy argTys:enclosedList,
       *          resultTyList: retTy retTys:enclosedList,
       *          loc})
       * { "in" +d
       *   "REC:" funLabel 2[ +d {args(arg)("," +1, "(", ")")}
       *   +2 ":" +d { {argTys(argTy)("," +1, "(", ")")}
       *               +1 "->" +2 {retTys(retTy)("," +1, "(", ")")} } ]
       * }
       *)
      (*
       * special version of ANTAILCALL; let env be current closure environment.
      *)
      ANTAILRECCALL of
      {
        funLabel: anvalue,         (* FUNENTRY *)
        argList: anvalue list,
        argTyList: ty list,
        resultTyList: ty list,
        loc: loc
      }
    | (*%
       * @format({codeLabel,
       *          argList: arg args:enclosedList,
       *          argTyList: argTy argTys:enclosedList,
       *          resultTyList: retTy retTys:enclosedList,
       *          loc, knownDestinations})
       * { "in" +d
       *   "LOCAL:" codeLabel 2[ +d {args(arg)("," +1, "(", ")")}
       *   +2 ":" +d { {argTys(argTy)("," +1, "(", ")")}
       *               +1 "->" +2 {retTys(retTy)("," +1, "(", ")")} } ]
       * }
       *)
      ANTAILLOCALCALL of
      {
        codeLabel: anvalue,        (* CODEPOINT *)
        argList: anvalue list,
        argTyList: ty list,
        resultTyList: ty list,
        loc: loc,
        (* workspace for AIGeneration. initialize it with nil. *)
        knownDestinations: id list ref
      }
    | (*%
       * @format({valueList: value values:enclosedList,
       *          tyList: ty tys:enclosedList,
       *          loc})
       * { "in" +d {values(value)("," +1, "(", ")")}
       *   +2 ":" +d {tys(ty)("," +1, "(", ")")} }
       *)
      ANRETURN of
      {
        valueList: anvalue list,
        tyList: ty list,
        loc: loc
      }
    | (*%
       * @format({valueList: value values:enclosedList,
       *          tyList: ty tys:enclosedList,
       *          loc, knownDestinations
       *          })
       * { "in localReturn" +d {values(value)("," +1, "(", ")")}
       *   +2 ":" +d {tys(ty)("," +1, "(", ")")} }
       *)
      ANLOCALRETURN of
      {
        valueList: anvalue list,
        tyList: ty list,
        loc: loc,
        (* workspace for AIGeneration. initialize it with nil. *)
        knownDestinations: id list ref
      }
    | (*%
       * @format({varList: var:withType vars:enclosedList,
       *          exp, loc})
       * { "let" +d {vars(var)("," +1, "(", ")")}
       *   +d "=" 4[ +1 exp ] }
       *)
      ANVAL of
      {
        varList: varInfo list,
        exp: anexp,
        loc: loc
      }
    | (*%
       * @format({
       *          codeList: entry entries:enclosedList,
       *          loc
       *         })
       *  2[
       *    "let code" +
       *    entries(entry)(~2[ +1 "and"] +, "", "")
       *   ]
       *)
      ANVALCODE of
      {
        codeList: codeDecl list,
        loc: loc
      }
    | (*%
       * @format({label, varList: var vars:enclosedList, loc})
       * { "in" +d
       *   "M" label 2[ +d ] {vars(var)("," +1, "(", ")")} }
       *)
      (*
       * let x = ...                             let x = ...
       * ..(A)..                                 ..(A)..
       * in switch x                             let m1 = fn z =>
       *     case 1 =>           is equal to                 let ..(C)..
       *       ..(B)..           ===========     in switch x
       *       let z = ..(D)..                        case 1 =>
       *       in MERGE:m1 z                            ..(B)..
       * MERGEPOINT:m1 z =>                             let z = ..(D)..
       * let ..(C)..                                    in m1 z
       *
       * The notion of MERGE is independent from LOCALCALL.
       * Since LOCALCALL comes from function, LOCALCALL may introduce
       * backedges. We need special care for LOCALCALL in order to make
       * clear CFG in AIGeneration.
       * In contrast MERGE comes from case branch so that MERGE never
       * introduce any backedges.
       *
       * Limitations of usage of MERGE:
       * - Every MERGEPOINT must appear after all MERGEs calling the
       *   MERGEPOINT.
       * - varList of MERGE must be always identical to varList of
       *   MERGEPOINT called by the MERGE.
       *
       * Note that ANMERGEPOINT may appear after any decl.
       *)
      ANMERGE of
      {
        label: id,
        varList: varInfo list,
        loc: loc
      }
    | (*%
       * @format({label, varList: var vars:enclosedList,
       *          leaveHandler, loc})
       * { "merge:" "M" label + vars(var)("," +, "(", ")") + "=>" }
       *)
      ANMERGEPOINT of
      {
        label: id,
        varList: varInfo list,
        (* If this merge point is the end of try clause of ANHANDLE,
         * leaveHandler is set to labels of ANHANDLE. *)
        leaveHandler: {handlerLabel: id, tryLabel: id} option,
        loc: loc
      }
    | (*%
       * @format({value, loc})
       * { "in" +d
       *   "raise" 2[ +d ] value }
       *)
      ANRAISE of
      {
        value: anvalue,
        loc: loc
      }
    | (*%
       * @format({try: try trys, exnVar, handler: handler handlers,
       *          labels, loc})
       * "in" +d
       * "try"
       * 2[ 1 trys(try)(1) ]
       * 1 { "handle" + exnVar + "=>" }
       * 2[ 1 handlers(handler)(1) ]
       *)
      ANHANDLE of
      {
        try: andecl list,
        exnVar: varInfo,
        handler: andecl list,
        (* labels for identifing each ANHANDLE structure. *)
        labels: {tryLabel: id, leaveLabel: id, handlerLabel: id},
        loc: loc
      }
    | (*%
       * @format({value, valueTy,
       *          branches: branch branches,
       *          default: default defaults,
       *          loc})
       * "in" +d
       * "switch" 2[ +d ] value
       * 2[ 1 branches(branch)(1) ]
       * 2[ 1 "default:"
       *    2[ 1 defaults(default)(1) ]
       *  ]
       *
       * @format:branch({constant, branch: branch branches})
       * "case" + constant ":"
       * 2[ 1 branches(branch)(1) ]
       *)
      ANSWITCH of
      {
        value: anvalue,
        valueTy: ty,
        branches: {constant: anexp,  (* ANCONST or ANVALUE (ANGLOBALREF) *)
                   branch: andecl list} list,
        default: andecl list,
        loc: loc
      }

  withtype codeDecl =
      (*%
       * @format({codeId,
       *          argVarList: arg:withType args,
       *          body: body bodies,
       *          resultTyList: retTy retTys,
       *          loc})
       * "code" + "L" codeId
       * 1 "{"
       * 2[ 1 { "arg" +d "=" +d "(" { args(arg)("," +1) ")" } }
       *    1 { "ret" +d ":" +d "(" { retTys(retTy)("," +1) ")" } }
       *    1 1 bodies(body)(1) ]
       * 1 "}"
       *)
      {
        codeId : id,
        argVarList : varInfo list,
        body : andecl list,
        resultTyList : ty list,
        loc:loc
      }

  (*%
   * @formatter(withType) format_varInfoWithType
   * @formatter(prepended) SmlppgUtil.formatPrependedOpt
   *)
  type funDecl =
      (*%
       * @format({codeId,
       *          argVarList: arg:withType args,
       *          body: body bodies,
       *          resultTyList: retTy retTys,
       *          ffiAttributes: att attopt:prepended,
       *          loc})
       * "function" + "L" codeId
       * 1 "{"
       * 2[ 1 { "arg" +d "=" +d "(" { args(arg)("," +1) ")" } }
       *    1 { "ret" +d ":" +d "(" { retTys(retTy)("," +1) ")" } }
       *    attopt(att)(1)
       *    1 1 bodies(body)(1) ]
       * 1 "}"
       *)
      {
        codeId: id,
        argVarList: varInfo list,
        body: andecl list,
        resultTyList: ty list,
        ffiAttributes: ffiAttributes option,
        loc: loc
      }

  (*% *)
  type frameInfo =
      (*%
       * @format({tyvars: tv tvs,
       *          bitmapFree,
       *          tagArgList: tag tags})
       * "{"
       * 2[ 1 { "tyvars" +d "=" +1 "(" {tvs(tv)("," +1)} ")" } ","
       *    1 { "bitmapFree" +d "=" +1 bitmapFree } ","
       *    1 { "tagArgs" +d "=" +1 "(" {tags(tag)("," +1)} ")" } ]
       * 1 "}"
       *)
      {
        tyvars: tyvarId list,
        bitmapFree: anexp,        (* ANVALUE or ANENVACC *)
        tagArgList: varInfo list
      }

  (*% *)
  type clusterDecl =
      (*%
       * @format({clusterId,
       *          frameInfo,
       *          entryFunctions: entry entries,
       *          hasClosureEnv,
       *          loc})
       * "cluster" + "C" clusterId
       * 1 "{"
       * 2[ 1 loc
       *    1 "frameInfo" + "=" + frameInfo
       *    1 "entryFunctions:"
       *    2[ 1 entries(entry)(1 1) ]
       * ]
       * 1 "}"
       *)
      {
        clusterId: clusterId,
        frameInfo: frameInfo,
        entryFunctions: funDecl list,
        hasClosureEnv: bool,
        loc: loc
      }

  (*%
   * @formatter(BasicTypes.UInt32) BasicTypeFormatters.format_UInt32
   * @formatter(enclosedList) SmlppgUtil.formatListWithEnclosureIfNotOne
   * @formatter(choice) SmlppgUtil.formatBinaryChoice
   *)
  (* all global names must be unique at least in a compile unit and
   * defined only once.
   * You may not override a global definition by another definition.
   *)
  datatype topdecl =
      (*%
       * @format(cluster) cluster ";"
       *)
      ANCLUSTER of clusterDecl
(*
     | (*%
       * @format({globalName: gn gnopt, id, ty})
       * { "globalvar" + gnopt(gn) "<" id ">"
       *   + ":" + ty }
       *)
      (* only appear in sequential compilation *)
      ANGLOBALVARDECL of
      {
        globalName: globalName option,
        id: ExVarID.id,
        ty: ty,
        loc: loc
      }
    | (*%
       * @format({globalName: gn gnopt, tag, description, loc})
       * { "exception" + gnopt(gn) "<" tag ">"
       *   + "=" + "\"" description "\"" ";" } 1
       *)
      ANEXCEPTIONDECL of
      {
        globalName: globalName option,
        tag: globalTag,
        description: string,
        loc: loc
      }
*)
    | (*%
       * @format({globalName, constant})
       * { globalName ":" + constant }
       *)
      ANTOPCONST of
      {
        globalName: topSymbol,
        constant: constant            (* LARGEINT, STRING, REAL, FLOAT *)
      }
    | (*%
       * @format({globalName,
       *          bitmaps:bm bms:enclosedList,
       *          totalSize,
       *          fieldList:value values:enclosedList,
       *          fieldTyList: ty tys:enclosedList,
       *          fieldSizeList:size sizes:enclosedList,
       *          isMutable})
       * { globalName ":"
       *   4[ +1 "Record" "("
       *      { "bitmaps" "=" { bms(bm)("," +1, "(", ")") } "," +1
       *        "size" "=" totalSize "," +1
       *        "init" "=" { {values(value)("," +1, "(", ")")}
       *                     +3 ":" +d {tys(ty)("," +1, "(", ")")}
       *                     +2 ":" +d {sizes(size)("," +1, "(", ")")} }
       * } ")" ] }
       *)
      ANTOPRECORD of
      {
        globalName: topSymbol,
        bitmaps: BasicTypes.UInt32 list,
        totalSize: BasicTypes.UInt32,
        fieldList: anvalue list,         (* ANVAR never occur *)
        fieldTyList: ty list,
        fieldSizeList: BasicTypes.UInt32 list,
        isMutable: bool
      }
    | (*%
       * @format({globalName,
       *          bitmap,
       *          totalSize,
       *          initialValues:init inits:enclosedList,
       *          elementTy, elementSize, isMutable})
       * { globalName ":"
       *   4[ +1 "Array" "("
       *         { "bitmap" "=" bitmap "," +1
       *           "size" "=" totalSize "," +1
       *           "init" "=" { inits(init)("," +1, "(", ")")
       *                        +2 ":" +d elementTy
       *                        +3 ":" +d elementSize }
       *         } ")" ] }
       *)
      ANTOPARRAY of
      {
        globalName: topSymbol,
        bitmap: BasicTypes.UInt32,
        totalSize: BasicTypes.UInt32,
        initialValues: anvalue list,      (* ANVAR never occur *)
        elementTy: ty,
        elementSize: BasicTypes.UInt32,
        isMutable : bool
      }
    | (*%
       * @format({globalName,
       *          initialValue:init initopt,
       *          elementTy, elementSize})
       * { globalName ":" +
       *   4[ +1 "GLOBALVAR" "("
       *         { initopt(init) +2 ":" +d elementTy
       *                         +3 ":" +d elementSize }
       *         ")" ] }
       *)
      ANTOPVAR of (* write once, always exported, no header array *)
      {
        globalName: topSymbol,
        initialValue: anvalue option,
        elementTy: ty,
        elementSize: BasicTypes.UInt32
      }
    | (*%
       * @format({globalName, funLabel, closureEnv})
       * { globalName ":"
       *   + "Closure" "(" funLabel "," + closureEnv ")" }
       *)
      ANTOPCLOSURE of
      {
        globalName: topSymbol,
        funLabel: id,                 (* FUNENTRY *)
        closureEnv: anvalue
      }
    | (*%
       * @format({globalName, originalGlobalName})
       * { globalName ":"
       *   + "alias" "(" originalGlobalName ")" }
       *)
      ANTOPALIAS of
      {
        globalName: topSymbol,
        originalGlobalName: topSymbol
      }
    | (*%
       * @format(id)
       * { "call" + "F" id ";" }
       *)
      (* only appear in sequential compilation *)
      ANENTERTOPLEVEL of id

  end
  end
end
