(* -*- sml -*- *)
(**
 * type checker for A-Normal.
 * @copyright (c) 2008, Tohoku University.
 * @author UENO Katsuhiro
 * @version $Id: ANormalTypeCheckError.ppg,v 1.1 2008/01/23 08:20:07 katsu Exp $
 *)
structure ANormalTypeCheckError =
struct

  (*%
   * @formatter (YAANormal.anexp) YAANormal.format_anexp
   * @formatter (YAANormal.varInfo) YAANormal.format_varInfo
   * @formatter (YAANormal.anvalue) YAANormal.format_anvalue
   * @formatter (YAANormal.ty) YAANormal.format_ty
   * @formatter (YAANormal.id) YAANormal.format_id
   *)
  exception
      (*%
       * @format(exp)
       * "invalid" +d "expression"
       * +1 exp
       *)
      InvalidExpression of YAANormal.anexp
  and
      (*%
       * @format({definition, reference})
       * "variable" +d "definition" +d "and" +d "reference" +d "don't"
       * +d "agree"
       * +1 "definition:" + definition
       * +1 "reference:" + reference
       *)
      VarMismatch of
      {definition: YAANormal.varInfo, reference: YAANormal.varInfo}
  and
      (*%
       * @format(v)
       * "unbound" +d "variable:" +d v
       *)
      VarNotFound of YAANormal.varInfo
  and
      (*%
       * @format(v)
       * "undefined" +d "function:" +d v
       *)
      FunNotFound of YAANormal.id
  and
      (*%
       * @format(v)
       * "undefined" +d "code:" +d v
       *)
      CodeNotFound of YAANormal.id
  and
      (*%
       * @format(label)
       * "undefined" +d "MERGEPOINT:" +d label
       *)
      MergePointNotFound of YAANormal.id
  and
      (*%
       * @format({argTyList: argTy argTys, actualTyList: actTy actTys})
       * "argument" +d "type" +d "annotations" +d "and" +d "argument"
       * +d "types" +d "don't" +d "agree"
       * +1 "annotations:" + argTys(argTy)(","+d)
       * +1 "actuals:" + actTys(actTy)(","+d)
       *)
      ArgTyListAndActualTyListMismatch of
      {argTyList: YAANormal.ty list, actualTyList: YAANormal.ty list}
  and
      (*%
       * @format({operatorTyList: argTy argTys, operandTyList: actTy actTys})
       * "opetator" +d "and" +d "operand" +d "don't" +d "agree"
       * +1 "operator:" + argTys(argTy)(","+d)
       * +1 "operand:" + actTys(actTy)(","+d)
       *)
      OperatorOperandMismatch of
      {operatorTyList: YAANormal.ty list, operandTyList: YAANormal.ty list}
  and
      (*%
       * @format({resultTyList: argTy argTys, actualTyList: actTy actTys})
       * "result" +d "type" +d "and" +d "return" +d "don't" +d "agree"
       * +1 "annotations:" + argTys(argTy)(","+d)
       * +1 "actuals:" + actTys(actTy)(","+d)
       *)
      ResultTyListAndActualTyListMismatch of
      {resultTyList: YAANormal.ty list, actualTyList: YAANormal.ty list}
  and
      (*%
       * @format({label, mergeVarList: mv mvs, mergePointVarList: mpv mpvs})
       * "MERGE" +d "and" +d "MERGEPOINT" +d "don't" +d "agree"
       * +1 "label:" + label
       * +1 "MERGE:" + mvs(mv)(","+d)
       * +1 "MERGEPOINT:" + mpvs(mpv)(","+d)
       *)
      MergeAndMergePointMismatch of
      {label: YAANormal.id, mergeVarList: YAANormal.varInfo list,
       mergePointVarList: YAANormal.varInfo list}
  and
      (*%
       * @format({getGlobal: getTy * getSize, setGlobal: setTy * setSize})
       * "global" +d "accesses" +d "don't" +d "agree"
       * +1 "set:" + setTy +d "with" +d "size" +d setSize
       * +1 "get:" + getTy +d "with" +d "size" +d getSize
       *)
      GlobalAccessTypeMismatch of
      {getGlobal: YAANormal.ty * YAANormal.anvalue,
       setGlobal: YAANormal.ty * YAANormal.anvalue}
  and
      (*%
       * @format({numInstSize, numInstTag})
       * "the" +d "number" +d "of" +d "instantiation" +d "of" +d "PRIMAPPLY"
       * "is" +d "not" +d "equal"
       * +1 "instSize:" + numInstSize
       * +1 "instTag:" + numInstTag
       *)
      PrimApplyNumInstMismatch of
      {numInstSize: int, numInstTag: int}
  and
      (*%
       * @format({knownDestinations: label labels})
       * "knownDestinations" +d "must" +d "be" +d "nil"
       * +1 "knownDestinations:" + labels(label)(","+d)
       *)
      KnownDestinationsMustBeNil of
      {knownDestinations: YAANormal.id list}
  and
      (*%
       * @format
       * "LOCALRETURN" +d "is" +d "not" +d "in" +d "local" +d "code"
       *)
      LocalReturnIsNotInLocalCode
  and
      (*%
       * @format(label)
       * "MERGEPOINT" +d "is" +d "not" +d "in" +d "top:" +d label
       *)
      MergePointIsNotInTop of YAANormal.id
  and
      (*%
       * @format
       * "dead" +d "code" +d "detected"
       *)
      DeadCode
  and
      (*%
       * @format
       * "declaration" +d "list" +d "is" +d "not" +d "terminated"
       *)
      NoTermination
  and
      (*%
       * @format({varList: var vars})
       * "illegal" +d "kind" +d "for" +d "local" +d "variable"
       * +1 "variables:" + vars(var)(","+d)
       *)
      LocalVarIsNotLocal of
      {varList: YAANormal.varInfo list}
  and
      (*%
       * @format({label, varList: var vars})
       * "illegal" +d "kind" +d "for" +d "arguments" +d "of" +d "MERGEPOINT"
       * +1 "label:" + label
       * +1 "arguments:" + vars(var)(","+d)
       *)
      MergePointArgIsNotLocal of
      {label: YAANormal.id, varList: YAANormal.varInfo list}
  and
      (*%
       * @format({label, varList: var vars})
       * "illegal" +d "kind" +d "for" +d "arguments" +d "of" +d "function"
       * +1 "label:" + label
       * +1 "arguments:" + vars(var)(","+d)
       *)
      CodeDeclArgIsNotLocalArg of
      {label: YAANormal.id, varList: YAANormal.varInfo list}
  and
      (*%
       * @format({label, varList: var vars})
       * "illegal" +d "kind" +d "for" +d "arguments" +d "of" +d "code"
       * +1 "label:" + label
       * +1 "arguments:" + vars(var)(","+d)
       *)
      FunDeclArgIsNotArg of
      {label: YAANormal.id, varList: YAANormal.varInfo list}
  and
      (*%
       * @format(var)
       * "illegal" +d "kind" +d "for" +d "exception" +d "variable"
       * +1 "variable:" + var
       *)
      ExnVarIsNotLocal of YAANormal.varInfo
  and
      (*%
       * @format(var)
       * "invalid" +d "tagArg:" +d var
       *)
      InvalidTagArg of YAANormal.varInfo

end
