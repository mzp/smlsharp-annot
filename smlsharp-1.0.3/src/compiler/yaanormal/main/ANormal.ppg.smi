_require "../../../basis.smi"
_require "../../../smlformat-lib.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "../../builtin/main/BuiltinPrimitive.ppg.smi"
_require "../../constantterm/main/ConstantTerm.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../systemdef/main/BasicTypes.smi"
_require "../../systemdef/main/BasicTypeFormatters.smi"
_require "../../util/main/SmlppgUtil.ppg.smi"
_require "../../util/main/TermFormat.smi"

structure YAANormal =
struct
  type id = VarID.id
  val format_id : VarID.id -> SMLFormat.FormatExpression.expression list
  type clusterId = ClusterID.id
  val format_clusterId : ClusterID.id
                         -> SMLFormat.FormatExpression.expression list
  type tyvarId = BoundTypeVarID.id
  val format_tyvarId : BoundTypeVarID.id
                       -> SMLFormat.FormatExpression.expression list
  datatype ty
    = BOXED
    | BYTE
    | CODEPOINT
    | DOUBLE
    | FLOAT
    | FOREIGNFUN
    | FUNENTRY
    | GENERIC of tyvarId
    | POINTER
    | SINT
    | UINT
  val format_ty : ty -> SMLFormat.FormatExpression.expression list
  datatype varKind = ARG | LOCAL | LOCALARG
  val format_varKind : SMLFormat.FormatExpression.expression list
                       -> varKind
                          -> SMLFormat.FormatExpression.expression list
  type varInfo =
    {displayName:string, id:id, ty:ty,
     varKind:varKind}
  val format_varInfo : {displayName:'a, id:VarID.id, ty:'b,
                        varKind:varKind}
                       -> SMLFormat.FormatExpression.expression list
  type loc = Loc.loc
  val format_loc : Loc.pos * Loc.pos
                   -> SMLFormat.FormatExpression.expression list
  type constant = ConstantTerm.constant
  val format_constant : ConstantTerm.constant
                        -> SMLFormat.FormatExpression.expression list
  type ffiAttributes = Absyn.ffiAttributes
  val format_ffiAttributes : Absyn.ffiAttributes
                             -> SMLFormat.FormatExpression.expression list
  datatype topSymbol = TOP_GLOBAL of string | TOP_LOCAL of id
  val format_topSymbol : topSymbol
                         -> SMLFormat.FormatExpression.expression list
  datatype topSymbolRef
    = TOP_EXPORT of topSymbol | TOP_EXTERN of string
  val format_topSymbolRef : topSymbolRef
                            -> SMLFormat.FormatExpression.expression list
  datatype anvalue
    = ANBYTE of Word8.word
    | ANCHAR of char
    | ANINT of BasicTypes.SInt32
    | ANLABEL of id
    | ANLOCALCODE of id
    | ANNULLBOXED
    | ANNULLPOINTER
    | ANTOPSYMBOL of {name:topSymbolRef, ty:ty}
    | ANUNIT
    | ANVAR of varInfo
    | ANWORD of BasicTypes.UInt32
  val format_anvalue : anvalue
                       -> SMLFormat.FormatExpression.expression list
  datatype anexp
    = ANAPPLY of {argList:anvalue list, argTyList:ty list,
                  closure:anvalue, resultTyList:ty list}
    | ANARRAY of {bitmap:anvalue, elementSize:anvalue,
                  elementTy:ty,
                  initialValue:anvalue option, isMutable:bool,
                  totalSize:anvalue}
    | ANCALL of {argList:anvalue list, argTyList:ty list,
                 env:anvalue, funLabel:anvalue,
                 resultTyList:ty list}
    | ANCALLBACKCLOSURE of {argTyList:ty list,
                            attributes:ffiAttributes,
                            env:anvalue, funLabel:anvalue,
                            resultTyList:ty list}
    | ANCLOSURE of {env:anvalue, funLabel:anvalue}
    | ANCONST of constant
    | ANENVACC of {nestLevel:BasicTypes.UInt32, offset:BasicTypes.UInt32,
                   size:anvalue, ty:ty}
    | ANFOREIGNAPPLY of {argList:anvalue list,
                         argTyList:ty list,
                         attributes:ffiAttributes,
                         function:anvalue,
                         resultTyList:ty list}
    | ANGETFIELD of {array:anvalue, needBoundaryCheck:bool,
                     offset:anvalue, size:anvalue,
                     ty:ty}
    | ANLOCALCALL of {argList:anvalue list,
                      argTyList:ty list,
                      codeLabel:anvalue,
                      knownDestinations:id list ref,
                      resultTyList:ty list,
                      returnLabel:id}
    | ANMODIFY of {nestLevel:anvalue, offset:anvalue,
                   record:anvalue, value:anvalue,
                   valueSize:anvalue, valueTag:anvalue,
                   valueTy:ty}
    | ANPRIMAPPLY of {argList:anvalue list,
                      argTyList:ty list,
                      instSizeList:anvalue list,
                      instTagList:anvalue list,
                      prim:BuiltinPrimitive.primitive,
                      resultTyList:ty list}
    | ANRECCALL of {argList:anvalue list,
                    argTyList:ty list, funLabel:anvalue,
                    resultTyList:ty list}
    | ANRECCLOSURE of {funLabel:anvalue}
    | ANRECORD of {bitmaps:anvalue list,
                   fieldIndexList:anvalue list,
                   fieldList:anvalue list,
                   fieldSizeList:anvalue list,
                   fieldTyList:ty list, isMutable:bool, clearPad:bool,
                   totalSize:anvalue}
    | ANSELECT of {nestLevel:anvalue, offset:anvalue,
                   record:anvalue, size:anvalue,
                   ty:ty}
    | ANVALUE of anvalue
  val format_anexp : anexp
                     -> SMLFormat.FormatExpression.expression list
  datatype andecl
    = ANCOPYARRAY of {dst:anvalue, dstOffset:anvalue,
                      elementSize:anvalue,
                      elementTag:anvalue, elementTy:ty,
                      length:anvalue, loc:loc,
                      src:anvalue, srcOffset:anvalue}
    | ANHANDLE of {exnVar:varInfo, handler:andecl list,
                   labels:{handlerLabel:id, leaveLabel:id,
                           tryLabel:id}, loc:loc,
                   try:andecl list}
    | ANLOCALRETURN of {knownDestinations:id list ref,
                        loc:loc, tyList:ty list,
                        valueList:anvalue list}
    | ANMERGE of {label:id, loc:loc,
                  varList:varInfo list}
    | ANMERGEPOINT of {label:id,
                       leaveHandler:{handlerLabel:id,
                                     tryLabel:id} option,
                       loc:loc, varList:varInfo list}
    | ANRAISE of {loc:loc, value:anvalue}
    | ANRETURN of {loc:loc, tyList:ty list,
                   valueList:anvalue list}
    | ANSETFIELD of {array:anvalue, loc:loc,
                     needBoundaryCheck:bool, offset:anvalue,
                     value:anvalue, valueSize:anvalue,
                     valueTag:anvalue, valueTy:ty, setGlobal: bool}
    | ANSETTAIL of {loc:loc, nestLevel:anvalue,
                    offset:anvalue, record:anvalue,
                    value:anvalue, valueSize:anvalue,
                    valueTag:anvalue, valueTy:ty}
    | ANSWITCH of {branches:{branch:andecl list,
                             constant:anexp} list,
                   default:andecl list, loc:loc,
                   value:anvalue, valueTy:ty}
    | ANTAILAPPLY of {argList:anvalue list,
                      argTyList:ty list, closure:anvalue,
                      loc:loc, resultTyList:ty list}
    | ANTAILCALL of {argList:anvalue list,
                     argTyList:ty list, env:anvalue,
                     funLabel:anvalue, loc:loc,
                     resultTyList:ty list}
    | ANTAILLOCALCALL of {argList:anvalue list,
                          argTyList:ty list,
                          codeLabel:anvalue,
                          knownDestinations:id list ref,
                          loc:loc, resultTyList:ty list}
    | ANTAILRECCALL of {argList:anvalue list,
                        argTyList:ty list,
                        funLabel:anvalue, loc:loc,
                        resultTyList:ty list}
    | ANVAL of {exp:anexp, loc:loc,
                varList:varInfo list}
    | ANVALCODE of {codeList:{argVarList:varInfo list,
                              body:andecl list,
                              codeId:id,
                              loc:loc,
                              resultTyList:ty list} list,
                    loc:loc}
  type codeDecl =
    {argVarList:varInfo list, body:andecl list,
     codeId:id, loc:loc, resultTyList:ty list}
  val format_andecl : andecl -> SMLFormat.BasicFormatters.expression list
  val format_codeDecl : codeDecl
                        -> SMLFormat.BasicFormatters.expression list
  type funDecl =
    {argVarList:varInfo list, body:andecl list,
     codeId:id, ffiAttributes:ffiAttributes option,
     loc:loc, resultTyList:ty list}
  val format_funDecl : {argVarList:{displayName:'a, id:VarID.id,
                                    ty:ty,
                                    varKind:varKind} list,
                        body:andecl list, codeId:VarID.id,
                        ffiAttributes:Absyn.ffiAttributes option, loc:'b,
                        resultTyList:ty list}
                       -> SMLFormat.FormatExpression.expression list
  type frameInfo =
    {bitmapFree:anexp, tagArgList:varInfo list,
     tyvars:tyvarId list}
  val format_frameInfo : {bitmapFree:anexp,
                          tagArgList:{displayName:'a, id:VarID.id,
                                      ty:'b, varKind:varKind} list,
                          tyvars:BoundTypeVarID.id list}
                         -> SMLFormat.FormatExpression.expression list
  type clusterDecl =
    {clusterId:clusterId, entryFunctions:funDecl list,
     frameInfo:frameInfo, hasClosureEnv:bool, loc:loc}
  val format_clusterDecl : {clusterId:ClusterID.id,
                            entryFunctions:{argVarList:{displayName:'a,
                                                        id:VarID.id,
                                                        ty:ty,
                                                        varKind:
                                                                  varKind}
                                                         list,
                                            body:andecl list,
                                            codeId:VarID.id,
                                            ffiAttributes:Absyn.ffiAttributes 
                                                            option, loc:'b,
                                            resultTyList:ty list} 
                                             list,
                            frameInfo:{bitmapFree:anexp,
                                       tagArgList:{displayName:'c,
                                                   id:VarID.id, ty:'d,
                                                   varKind:varKind} 
                                                    list,
                                       tyvars:BoundTypeVarID.id list},
                            hasClosureEnv:'e, loc:Loc.pos * Loc.pos}
                           -> SMLFormat.FormatExpression.expression list
  datatype topdecl
    = ANCLUSTER of clusterDecl
    | ANENTERTOPLEVEL of id
    | ANTOPALIAS of {globalName:topSymbol,
                     originalGlobalName:topSymbol}
    | ANTOPARRAY of {bitmap:BasicTypes.UInt32, elementSize:BasicTypes.UInt32,
                     elementTy:ty, globalName:topSymbol,
                     initialValues:anvalue list, isMutable:bool,
                     totalSize:BasicTypes.UInt32}
    | ANTOPCLOSURE of {closureEnv:anvalue, funLabel:id,
                       globalName:topSymbol}
    | ANTOPCONST of {constant:constant,
                     globalName:topSymbol}
    | ANTOPRECORD of {bitmaps:BasicTypes.UInt32 list,
                      fieldList:anvalue list,
                      fieldSizeList:BasicTypes.UInt32 list,
                      fieldTyList:ty list,
                      globalName:topSymbol, isMutable:bool,
                      totalSize:BasicTypes.UInt32}
    | ANTOPVAR of {elementSize:BasicTypes.UInt32, elementTy:ty,
                   globalName:topSymbol,
                   initialValue:anvalue option}
  val format_topdecl : topdecl
                       -> SMLFormat.FormatExpression.expression list
end
