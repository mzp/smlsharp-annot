(* -*- sml -*- *)
(**
 * @copyright (c) 2011, Tohoku University.
 * @author UENO Katsuhiro
 *)
structure BitmapANormal =
struct

  type loc = Loc.loc

  (*%
   * @formatter(AnnotatedTypes.ty) AnnotatedTypes.formatSimple_ty
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(AnnotatedTypes.ty) AnnotatedTypes.format_ty
   *)
  type ty = AnnotatedTypes.ty

  (*%
   * @formatter(BitmapCalc.varInfo) BitmapCalc.format_varInfo
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(BitmapCalc.varInfo) BitmapCalc.formatWithType_varInfo
   *)
  type varInfo = BitmapCalc.varInfo

  (*%
   * @formatter(BitmapCalc.exVarInfo) BitmapCalc.format_exVarInfo
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(BitmapCalc.exVarInfo) BitmapCalc.formatWithType_exVarInfo
   *)
  type exVarInfo = BitmapCalc.exVarInfo

  (*%
   * @formatter(BitmapCalc.primInfo) BitmapCalc.format_primInfo
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(BitmapCalc.primInfo) BitmapCalc.format_primInfo
   *)
  type primInfo = BitmapCalc.primInfo

  local
    open TermFormat.FormatComb SMLFormat.FormatExpression
    fun format_polyExp nestExp btvEnv =
        if BoundTypeVarID.Map.isEmpty btvEnv
        then nestExp
        else begin_
               text "["
               guard_ (SOME {cut=true, strength=0, direction=Neutral})
                 $(AnnotatedTypes.formatSimple_btvEnv btvEnv) text "." space
                 $nestExp text "]"
               end_
             end_
  in
  (*%
   * @params(nestExp)
   * @formatter(AnnotatedTypes.btvEnv) format_polyExp
   *)
  (*%
   * @prefix formatWithType_
   * @params(nestExp)
   * @formatter(AnnotatedTypes.btvEnv) format_polyExp
   *)
  type btvEnv =
      (*%
       * @format(btvEnv) btvEnv()(nestExp)
       *)
      (*%
       * @prefix formatWithType_
       * @format(btvEnv) btvEnv()(nestExp)
       *)
      AnnotatedTypes.btvEnv
  end (* local *)

  (*%
   * @formatter(ExnTagID.id) ExnTagID.format_id
   * @formatter(ConstantTerm.constant) ConstantTerm.format_constant
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(ExnTagID.id) ExnTagID.format_id
   * @formatter(ConstantTerm.constant) ConstantTerm.format_constant
   *)
  datatype baconst =
      (*%
       * @format(const) const
       *)
      (*%
       * @prefix formatWithType_
       * @format(const) const
       *)
      BACONSTANT of ConstantTerm.constant
    | (*%
       * @format({name, kind, ty}) name ":" ty
       *)
      (*%
       * @prefix formatWithType_
       * @format({name, kind, ty}) name ":" ty
       *)
      BAGLOBALSYMBOL of
      {
        name : string,
        kind : Absyn.globalSymbolKind,
        ty : ty
      }

  (*%
   * @formatter(ExnTagID.id) ExnTagID.format_id
   * @formatter(enclosedList) TermFormat.formatEnclosedList
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(ExnTagID.id) ExnTagID.format_id
   * @formatter(enclosedList) TermFormat.formatEnclosedList
   *)
  datatype bavalue =
      (*%
       * @format(const) const
       *)
      (*%
       * @prefix formatWithType_
       * @format(const) const
       *)
      BACONST of baconst
    | (*%
       * @format(varInfo) varInfo
       *)
      (*%
       * @prefix formatWithType_
       * @format(varInfo) varInfo
       *)
      BAVAR of varInfo
    | (*%
       * @format({exp, expTy, targetTy})
       * "cast" "(" exp ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({exp, expTy, targetTy})
       * "cast" "(" !L2{ L2{ exp +1 ":" +d expTy } +1 ":" +d targetTy} ")"
       *)
      BACAST of
      {
        exp : bavalue,
        expTy : ty,
        targetTy : ty
      }
    | (*%
       * @format({exp, expTy, instTyList: ty tys})
       * L8{ 2[ exp
       *        +1 tys:enclosedList(ty)("(",",",")") ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({exp, expTy, instTyList: ty tys})
       * L8{ 2[ L2{ exp +1 ":" +d expTy }
       *        +1 tys:enclosedList(ty)("(",",",")") ] }
       *)
      BATAPP of
      {
        exp : bavalue,
        expTy : ty,
        instTyList : ty list
      }

  (*%
   * @formatter(AnnotatedTypes.annotationLabel)
   * AnnotatedTypes.format_annotationLabel
   * @formatter(bool) SmlppgUtil.formatBinaryChoice
   * @formatter(appList) TermFormat.formatAppList
   * @formatter(enclosedList) TermFormat.formatEnclosedList
   * @formatter(ifCons) TermFormat.formatIfCons
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(AnnotatedTypes.annotationLabel)
   * AnnotatedTypes.format_annotationLabel
   * @formatter(bool) SmlppgUtil.formatBinaryChoice
   * @formatter(appList) TermFormat.formatAppList
   * @formatter(enclosedList) TermFormat.formatEnclosedList
   * @formatter(ifCons) TermFormat.formatIfCons
   *)
  datatype baprim =
      (*%
       * @format(value) value
       *)
      (*%
       * @prefix formatWithType_
       * @format(value) value
       *)
      BAVALUE of bavalue
    | (*%
       * @format({exVarInfo, varSize}) L2{ exVarInfo +1 "/i" +d varSize }
       *)
      (*%
       * @prefix formatWithType_
       * @format({exVarInfo, varSize}) L2{ exVarInfo +1 "/" +d varSize }
       *)
      BAEXVAR of {exVarInfo : exVarInfo, varSize : bavalue}
    | (*%
       * @format({primInfo, argExpList: arg args, instTyList: ty tys,
       *          instTagList: tag tags, instSizeList: size sizes})
       * L8{ 2[ "_PRIMAPPLY(" primInfo ")"
       *        tys:ifCons()(
       *          +1 L2{ tys:appList(ty)("(",",",")")
       *                 +1 "/t" +d tags:appList(tag)("(",",",")")
       *                 +1 "/s" +d sizes:appList(size)("(",",",")") }
       *        )
       *        +1 args:appList(arg)("(",",",")") ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({primInfo, argExpList: arg args, instTyList: ty tys,
       *          instTagList: tag tags, instSizeList: size sizes})
       * L8{ 2[ "_PRIMAPPLY(" primInfo ")"
       *        tys:ifCons()(
       *          +1 L2{ tys:appList(ty)("(",",",")")
       *                 +1 "/" +d tags:appList(tag)("(",",",")")
       *                 +1 "/" +d sizes:appList(size)("(",",",")") }
       *        )
       *        +1 args:appList(arg)("(",",",")") ] }
       *)
      BAPRIMAPPLY of
      {
        primInfo : primInfo,
        argExpList : bavalue list,
        instTyList : ty list,
        instTagList : bavalue list,
        instSizeList : bavalue list
      }
    | (*%
       * @format({fieldList: field fields,
       *          recordTy, annotation, isMutable, clearPad, totalSizeExp,
       *          bitmapExpList: bm bms})
       * L2{ fields:enclosedList(field)("{",",","}")
       *     +1 "/t" +d totalSizeExp
       *     +1 "/b" +d bms:appList(bm)("(",",",")") }
       * @format:field({fieldExp, fieldTy, fieldLabel, fieldSize, fieldIndex})
       * !R1{ L2{ "#" fieldLabel +1 "/i" +d fieldIndex +1 "/s" +d fieldSize }
       *      +d "=" +1 fieldExp }
       *)
      (*%
       * @prefix formatWithType_
       * @format({fieldList: field fields,
       *          recordTy, annotation, isMutable, clearPad, totalSizeExp,
       *          bitmapExpList: bm bms})
       * L2{ L2{ fields:enclosedList(field)("{",",","}")
       *         +1 "/t" +d totalSizeExp
       *         +1 "/" +d bms:appList(bm)("(",",",")") }
       *     +1 ":" +d recordTy }
       * @format:field({fieldExp, fieldTy, fieldLabel, fieldSize, fieldIndex})
       * !R1{ L2{ "#" fieldLabel +1 "/" +d fieldIndex +1 "/" +d fieldSize }
       *      +d "=" +1 L2{ fieldExp +1 ":" +d fieldTy } }
       *)
      BARECORD of
      {
        fieldList : {fieldExp : bavalue,
                     fieldTy : ty,
                     fieldLabel : string,
                     fieldSize : bavalue,
                     fieldIndex : bavalue} list,
        recordTy : ty,
        annotation : AnnotatedTypes.annotationLabel,
        isMutable : bool,
        clearPad : bool,
        totalSizeExp : bavalue,
        bitmapExpList : bavalue list
      }
    | (*%
       * @format({recordExp, indexExp, label, recordTy, resultTy, resultSize})
       * L2{
       *   L8{ 2[ L2{ "#" label +1 "/i" +d indexExp }
       *          +1 recordExp ] }
       *   +1 "/s" +d resultSize }
       *)
      (*%
       * @prefix formatWithType_
       * @format({recordExp, indexExp, label, recordTy, resultTy, resultSize})
       * L2{
       *   L8{ 2[ L2{ "#" label +1 "/" +d indexExp }
       *          +1 L2{ recordExp +1 ":" +d recordTy } ] }
       *   +1 ":" +d resultTy
       *   +1 "/" +d resultSize }
       *)
      BASELECT of
      {
        recordExp : bavalue,
        indexExp : bavalue,
        label : string,
        recordTy : ty,
        resultTy : ty,
        resultSize : bavalue
      }
    | (*%
       * @format({recordExp, recordTy, indexExp, label, valueExp, valueTy,
       *          valueTag, valueSize})
       * L8{ 2[ recordExp
       *        +1 "#" +d "{"
       *          !N0{ L2{ "#" label +1 "/i" +d indexExp } +d "="
       *               2[ +1 L2{ valueExp
       *                         +1 "/t" +d valueTag
       *                         +1 "/s" +d valueSize } ] } "}" ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({recordExp, recordTy, indexExp, label, valueExp, valueTy,
       *          valueTag, valueSize})
       * L8{ 2[ L2{ recordExp +1 ":" +d recordTy }
       *        +1 "#" +d "{"
       *          !N0{ L2{ "#" label +1 "/" +d indexExp } +d "="
       *               2[ +1 L2{ valueExp
       *                         +1 ":" +d valueTy
       *                         +1 "/" +d valueTag
       *                         +1 "/" +d valueSize } ] } "}" ] }
       *)
      BAMODIFY of
      {
        recordExp : bavalue,
        recordTy : ty,
        indexExp : bavalue,
        label : string,
        valueExp : bavalue,
        valueTy : ty,
        valueTag : bavalue,
        valueSize : bavalue
      }

  (*%
   * @formatter(AnnotatedTypes.foreignFunTy) AnnotatedTypes.format_foreignFunTy
   * @formatter(appList) TermFormat.formatAppList
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(AnnotatedTypes.foreignFunTy) AnnotatedTypes.format_foreignFunTy
   * @formatter(appList) TermFormat.formatAppList
   *)
  datatype bacall =
      (*%
       * @format({funExp, foreignFunTy, argExpList: arg args})
       * L8{ 2[
       *   "_FFIAPPLY"
       *   +1 funExp
       *   +1 args:appList(arg)("(",",",")")
       * ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({funExp, foreignFunTy, argExpList: arg args})
       * L8{ 2[
       *   "_FFIAPPLY"
       *   +1 L2{ funExp +1 "as" +d foreignFunTy }
       *   +1 args:appList(arg)("(",",",")")
       * ] }
       *)
      BAFOREIGNAPPLY of
      {
        funExp : bavalue,
        foreignFunTy : AnnotatedTypes.foreignFunTy,
        argExpList : bavalue list
      }
    | (*%
       * @format({funExp, funTy, argExpList: arg args})
       * L8{ 2[
       *   funExp
       *   +1 args:appList(arg)("(",",",")")
       * ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({funExp, funTy, argExpList: arg args})
       * L8{ 2[
       *   L2{ funExp +1 ":" +d funTy }
       *   +1 args:appList(arg)("(",",",")")
       * ] }
       *)
      BAAPPM of
      {
        funExp : bavalue,
        funTy : ty,
        argExpList : bavalue list
      }

  (*%
   * @formatter(listWithEnclosureOne) SmlppgUtil.formatListWithEnclosureOne
   * @formatter(AnnotatedTypes.annotationLabel)
   * AnnotatedTypes.format_annotationLabel
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(listWithEnclosureOne) SmlppgUtil.formatListWithEnclosureOne
   * @formatter(AnnotatedTypes.annotationLabel)
   * AnnotatedTypes.format_annotationLabel
   *)
  datatype bastatement =
      (*%
       * @format({exVarInfo, varSize, varTag, boundExp})
       * !R1{ "val" +d exVarInfo +d "="
       *      4[ +1 L2{ boundExp +1 "/t" +d varTag +1 "/s" +d varSize } ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({exVarInfo, varSize, varTag, boundExp})
       * !R1{ "val" +d exVarInfo +d "="
       *      4[ +1 L2{ boundExp +1 "/t" +d varTag +1 "/s" +d varSize } ] }
       *)
      BASETEXVAR of
      {
        exVarInfo : exVarInfo,
        varSize : bavalue,
        varTag : bavalue,
        boundExp : bavalue
      }

  (*%
   * @formatter(ConstantTerm.constant) ConstantTerm.format_constant
   * @formatter(AnnotatedTypes.foreignFunTy) AnnotatedTypes.format_foreignFunTy
   * @formatter(appList) TermFormat.formatAppList
   * @formatter(caseList) TermFormat.formatCaseList
   * @formatter(decList) TermFormat.formatDeclList
   * @formatter(option) SmlppgUtil.formatEnclosedOpt
   * @formatter(withType) BitmapCalc.formatWithSimpleType_varInfo
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(ConstantTerm.constant) ConstantTerm.format_constant
   * @formatter(AnnotatedTypes.foreignFunTy) AnnotatedTypes.format_foreignFunTy
   * @formatter(appList) TermFormat.formatAppList
   * @formatter(caseList) TermFormat.formatCaseList
   * @formatter(decList) TermFormat.formatDeclList
   * @formatter(option) SmlppgUtil.formatEnclosedOpt
   *)
  datatype baexp =
      (*%
       * @format({boundVar, boundExp, nextExp, loc})
       * !R1{ "let" +d boundVar:withType +d "=" 4[ +1 boundExp ] }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({boundVar, boundExp, nextExp, loc})
       * !R1{ "let" +d boundVar +d "=" 4[ +1 boundExp ] }
       * +1 "in" +d nextExp
       *)
      BAVAL of
      {
        boundVar : varInfo,
        boundExp : baprim,
        nextExp : baexp,
        loc : loc
      }
    | (*%
       * @format({resultVars: v vs, callExp, nextExp, loc})
       * !R1{ "let" +d vs:appList(v:withType)("(",",",")")
       *      +d "=" 4[ +1 callExp ] }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({resultVars: v vs, callExp, nextExp, loc})
       * !R1{ "let" +d vs:appList(v)("(",",",")") +d "=" 4[ +1 callExp ] }
       * +1 "in" +d nextExp
       *)
      BACALL of
      {
        resultVars : varInfo list,
        callExp : bacall,
        nextExp : baexp,
        loc : loc
      }
    | (*%
       * @format({exVarInfo, nextExp, loc})
       * !R1{ "extern" +d "val" +d exVarInfo }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({exVarInfo, nextExp, loc})
       * !R1{ "extern" +d "val" +d exVarInfo }
       * +1 "in" +d nextExp
       *)
      BAEXTERNVAR of
      {
        exVarInfo : exVarInfo,
        nextExp : baexp,
        loc : loc
      }
    | (*%
       * @format({varInfo, varSize, varTag, nextExp, loc})
       * !R1{ "export" +d "val"
       *      4[ +1 L2{ varInfo +1 "/t" +d varTag +1 "/s" +d varSize } ] }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({varInfo, varSize, varTag, nextExp, loc})
       * !R1{ "export" +d "val"
       *      4[ +1 L2{ varInfo +1 "/t" +d varTag +1 "/s" +d varSize } ] }
       * +1 "in" +d nextExp
       *)
      BAEXPORTVAR of
      {
        varInfo : varInfo,
        varSize : bavalue,
        varTag : bavalue,
        nextExp : baexp,
        loc : loc
      }
    | (*%
       * @format({boundVar, btvEnv, function, nextExp})
       * !R1{ "let" +d boundVar:withType +d "=" 4[ +1 btvEnv()(function) ] }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({boundVar, btvEnv, function, nextExp})
       * !R1{ "let" +d boundVar +d "=" 4[ +1 btvEnv()(function) ] }
       * +1 "in" +d nextExp
       *)
      BAFNM of
      {
        boundVar : varInfo,
        btvEnv : btvEnv,
        function : function,
        nextExp : baexp
      }
    | (*%
       * @format({boundVar, function, foreignFunTy, nextExp})
       * !R1{ "let" +d boundVar:withType +d "="
       *      4[ +1 "_CALLBACK"
       *         +1 function ] }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({boundVar, function, foreignFunTy, nextExp})
       * !R1{ "let" +d boundVar +d "="
       *      4[ +1 "_CALLBACK"
       *         +1 L2{ function +1 "as" +d foreignFunTy } ] }
       * +1 "in" +d nextExp
       *)
      BACALLBACKFNM of
      {
        boundVar : varInfo,
        function : function,
        foreignFunTy : AnnotatedTypes.foreignFunTy,
        nextExp : baexp
      }
    | (*%
       * @format({recbindList: bind binds, nextExp, loc})
       * "let" +d !R1{ binds:decList(bind)("rec" +d, +1 "and" +d) }
       * +1 "in" +d nextExp
       * @format:bind({boundVar, function})
       * boundVar:withType +d "=" 4[ +1 function ]
       *)
      (*%
       * @prefix formatWithType_
       * @format({recbindList: bind binds, nextExp, loc})
       * "let" +d !R1{ binds:decList(bind)("rec" +d, +1 "and" +d) }
       * +1 "in" +d nextExp
       * @format:bind({boundVar, function})
       * boundVar +d "=" 4[ +1 function ]
       *)
      BAVALREC of
      {
        recbindList : {boundVar : varInfo, function: function } list,
        nextExp : baexp,
        loc : loc
      }
    | (*%
       * @format({resultVars: v vs, tryExp, exnVar, handlerExp, nextExp, loc})
       * !R1{ "let" +d vs:appList(v)("(",",",")") +d "="
       *      4[ +1 "try"
       *            2[ +1 tryExp ]
       *            +1 "handle" +d { exnVar:withType +1 "=>" }
       *            2[ +1 handlerExp ]
       *            +1 "end" ] }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({resultVars: v vs, tryExp, exnVar, handlerExp, nextExp, loc})
       * !R1{ "let" +d vs:appList(v)("(",",",")") +d "="
       *      4[ +1 "try"
       *            2[ +1 tryExp ]
       *            +1 "handle" +d { exnVar +1 "=>" }
       *            2[ +1 handlerExp ]
       *            +1 "end" ] }
       * +1 "in" +d nextExp
       *)
      BAHANDLE of
      {
        resultVars : varInfo list,
        tryExp : baexp,
        exnVar : varInfo,
        handlerExp : baexp,
        nextExp : baexp,
        loc : loc
      }
    | (*%
       * @format({resultVars: v vs, switch, nextExp})
       * !R1{ "let" +d vs:appList(v:withType)("(",",",")") +d "=" 4[ +1 
       *   switch
       * ] }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({resultVars: v vs, switch, nextExp})
       * !R1{ "let" +d vs:appList(v)("(",",",")") +d "=" 4[ +1 switch ] }
       * +1 "in" +d nextExp
       *)
      BASWITCH of
      {
        resultVars : varInfo list,
        switch : switch,
        nextExp : baexp
      }
    | (*%
       * @format(switch) switch
       *)
      (*%
       * @prefix formatWithType_
       * @format(switch) switch
       *)
      BATAILSWITCH of switch
    | (*%
       * @format({resultVars: v vs, btvEnv, expTyWithoutTAbs, exp, nextExp,
       *          loc})
       * !R1{ "let" +d vs:appList(v:withType)("(",",",")") +d "=" 4[ +1 
       *   btvEnv()(!R1{exp})
       * ] }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({resultVars: v vs, btvEnv, expTyWithoutTAbs, exp, nextExp,
       *          loc})
       * !R1{ "let" +d vs:appList(v)("(",",",")") +d "=" 4[ +1 
       *   btvEnv()(L2{ R1{exp} +1 ":" +d expTyWithoutTAbs })
       * ] }
       * +1 "in" +d nextExp
       *)
      BAPOLY of
      {
        resultVars : varInfo list,
        btvEnv : btvEnv,
        expTyWithoutTAbs : ty,
        exp : baexp,
        nextExp : baexp,
        loc : loc
      }
(*
    | (*%
       * @format({resultVars: v vs, nestExp, nextExp})
       * !R1{ "let" +d vs:appList(v:withType)("(",",",")")
       *            +d "=" 4[ +1 nestExp ] }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({resultVars: v vs, nestExp, nextExp})
       * !R1{ "let" +d vs:appList(v)("(",",",")") +d "=" 4[ +1 nestExp ] }
       * +1 "in" +d nextExp
       *)
      BANEST of
      {
        resultVars : varInfo list,
        (* any branch in nestExp must be ended with BAMERGE. *)
        nestExp : baexp,
        nextExp : baexp
      }
*)
    | (*%
       * @format(v vs)
       * !R1{ "_MERGE" +d vs:appList(v)("(",",",")") }
       *)
      (*%
       * @prefix formatWithType_
       * @format(v vs)
       * !R1{ "_MERGE" +d vs:appList(v)("(",",",")") }
       *)
      BAMERGE of varInfo list
    | (*%
       * @format({resultVars: v vs, funTy, loc})
       * L8{ 2[ "_RETURN"
       *        +2 vs:appList(v)("(",",",")") ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({resultVars: v vs, funTy, loc})
       * L2{ L8{ 2[ "_RETURN"
       *            +2 vs:appList(v)("(",",",")") ] }
       *     +1 ":" +d funTy }
       *)
      BARETURN of
      {
        resultVars : varInfo list,
        funTy : ty,
        loc : loc
      }
    | (*%
       * @format({funExp, funTy, argExpList: arg args, loc})
       * L8{ "_TAILAPP"
       *     2[ +1 funExp
       *        +1 args:appList(arg)("(",",",")") ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({funExp, funTy, argExpList: arg args, loc})
       * L8{ "_TAILAPP"
       *     2[ +1 L2{ funExp +d ":" +1 funTy }
       *        +1 args:appList(arg)("(",",",")") ] }
       *)
      BATAILAPPM of
      {
        funExp : bavalue,
        funTy : ty,
        argExpList : bavalue list,
        loc : loc
      }
    | (*%
       * @format({argExp, loc})
       * !R1{ 2[ "raise" +1 argExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({argExp, loc})
       * !R1{ 2[ "raise" +1 argExp ] }
       *)
      BARAISE of
      {
        argExp : bavalue,
        loc : loc
      }

  withtype function =
      (*%
       * @format({argVarList: arg args, funTy,
       *          bodyExp, annotation, closureLayout, loc})
       * !R1{"fn" +d args:appList(arg:withType)("(",",",")") +d "=>"
       *     3[ +1 bodyExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({argVarList: arg args, funTy,
       *          bodyExp, annotation, closureLayout, loc})
       * L2{ R1{"fn" +d args:appList(arg)("(",",",")") +d "=>"
       *        3[ +1 bodyExp ] }
       *     +1 ":" +d funTy }
       *)
      {
        argVarList : varInfo list,
        funTy : ty,
        bodyExp : baexp,
        annotation : AnnotatedTypes.annotationLabel,
        closureLayout : BitmapCalc.closureLayout,
        loc : loc
      }

  and switch =
      (*%
       * @format({switchExp, expTy, branches: branch branches, defaultExp, loc})
       * !R1{
       *   { 2[ "case" +1 switchExp +1 "of" ] }
       *   branches:caseList(branch)(2[+1], +1 "|" +d,
       *                             !R1{ 2[ "_" +d "=>" +1 defaultExp ] })
       * }
       * @format:branch({constant, branchExp})
       * !R1{ 2[ constant +d "=>" +1 branchExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({switchExp, expTy, branches: branch branches, defaultExp, loc})
       * !R1{
       *   { 2[ "case" +1 L2{ switchExp +1 ":" +d expTy } +1 "of" ] }
       *   branches:caseList(branch)(2[+1], +1 "|" +d,
       *                             !R1{ 2[ "_" +d "=>" +1 defaultExp ] })
       * }
       * @format:branch({constant, branchExp})
       * !R1{ 2[ constant +d "=>" +1 branchExp ] }
       *)
      {
        switchExp : bavalue,
        expTy : ty,
        branches : {constant : ConstantTerm.constant, branchExp : baexp} list,
        defaultExp : baexp,
        loc : loc
      }

end
