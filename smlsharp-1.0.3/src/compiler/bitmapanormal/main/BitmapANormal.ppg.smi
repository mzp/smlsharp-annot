_require "../../../basis.smi"
_require "../../../smlformat-lib.smi"

_require "../../absyn/main/Absyn.ppg.smi"
_require "../../annotatedtypes/main/AnnotatedTypes.ppg.smi"
_require "../../bitmapcalc/main/BitmapCalc.ppg.smi"
_require "../../builtin/main/BuiltinPrimitive.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../constantterm/main/ConstantTerm.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../util/main/TermFormat.smi"

structure BitmapANormal =
struct
  type loc = Loc.loc
  type ty = AnnotatedTypes.ty
  val format_ty : AnnotatedTypes.ty
                  -> SMLFormat.FormatExpression.expression list
  val formatWithType_ty : AnnotatedTypes.ty
                          -> SMLFormat.FormatExpression.expression list
  type varInfo = BitmapCalc.varInfo
  val format_varInfo : {id:VarID.id, path:string list,
                        ty:AnnotatedTypes.ty}
                       -> SMLFormat.FormatExpression.expression list
  val formatWithType_varInfo : {id:VarID.id, path:string list,	
	                              ty:AnnotatedTypes.ty}
                               -> SMLFormat.FormatExpression.expression list
  type exVarInfo = BitmapCalc.exVarInfo
  val format_exVarInfo : {path:string list, ty:AnnotatedTypes.ty}
                         -> SMLFormat.FormatExpression.expression list
  val formatWithType_exVarInfo : {path:string list, ty:AnnotatedTypes.ty}
                                 -> SMLFormat.FormatExpression.expression list
  type primInfo = BitmapCalc.primInfo
  val format_primInfo : {primitive:BuiltinPrimitive.primitive,
                         ty:AnnotatedTypes.ty}
                        -> SMLFormat.FormatExpression.expression list
  val formatWithType_primInfo : {primitive:BuiltinPrimitive.primitive,
                                 ty:AnnotatedTypes.ty}
                                -> SMLFormat.FormatExpression.expression list
  type btvEnv = AnnotatedTypes.btvEnv
  val format_btvEnv : SMLFormat.FormatExpression.expression list
                      -> AnnotatedTypes.btvKind BoundTypeVarID.Map.map
                         -> SMLFormat.FormatExpression.expression list
  val formatWithType_btvEnv : SMLFormat.FormatExpression.expression list
                              -> AnnotatedTypes.btvKind BoundTypeVarID.Map.map
                                 -> SMLFormat.FormatExpression.expression list
  datatype baconst
    = BACONSTANT of ConstantTerm.constant
    | BAGLOBALSYMBOL of {kind:Absyn.globalSymbolKind, name:string,
                         ty:ty}
  val format_baconst : baconst
                       -> SMLFormat.FormatExpression.expression list
  val formatWithType_baconst : baconst
                               -> SMLFormat.FormatExpression.expression list
  datatype bavalue
    = BACAST of {exp:bavalue, expTy:ty,
                 targetTy:ty}
    | BACONST of baconst
    | BATAPP of {exp:bavalue, expTy:ty,
                 instTyList:ty list}
    | BAVAR of varInfo
  val format_bavalue : bavalue
                       -> SMLFormat.FormatExpression.expression list
  val formatWithType_bavalue : bavalue
                               -> SMLFormat.FormatExpression.expression list
  datatype baprim
    = BAEXVAR of {exVarInfo:exVarInfo,
                  varSize:bavalue}
    | BAMODIFY of {indexExp:bavalue, label:string,
                   recordExp:bavalue, recordTy:ty,
                   valueExp:bavalue,
                   valueSize:bavalue,
                   valueTag:bavalue, valueTy:ty}
    | BAPRIMAPPLY of {argExpList:bavalue list,
                      instSizeList:bavalue list,
                      instTagList:bavalue list,
                      instTyList:ty list,
                      primInfo:primInfo}
    | BARECORD of {annotation:AnnotatedTypes.annotationLabel,
                   bitmapExpList:bavalue list,
                   fieldList:{fieldExp:bavalue,
                              fieldIndex:bavalue,
                              fieldLabel:string,
                              fieldSize:bavalue,
                              fieldTy:ty} list, isMutable:bool,
                   clearPad:bool,
                   recordTy:ty,
                   totalSizeExp:bavalue}
    | BASELECT of {indexExp:bavalue, label:string,
                   recordExp:bavalue, recordTy:ty,
                   resultSize:bavalue,
                   resultTy:ty}
    | BAVALUE of bavalue
  val format_baprim : baprim
                      -> SMLFormat.FormatExpression.expression list
  val formatWithType_baprim : baprim
                              -> SMLFormat.FormatExpression.expression list
  datatype bacall
    = BAAPPM of {argExpList:bavalue list,
                 funExp:bavalue, funTy:ty}
    | BAFOREIGNAPPLY of {argExpList:bavalue list,
                         foreignFunTy:AnnotatedTypes.foreignFunTy,
                         funExp:bavalue}
  val format_bacall : bacall
                      -> SMLFormat.FormatExpression.expression list
  val formatWithType_bacall : bacall
                              -> SMLFormat.FormatExpression.expression list
  datatype bastatement
    = BASETEXVAR of {boundExp:bavalue,
                     exVarInfo:exVarInfo,
                     varSize:bavalue,
                     varTag:bavalue}
  val format_bastatement : bastatement
                           -> SMLFormat.FormatExpression.expression list
  val formatWithType_bastatement : bastatement
                                   -> SMLFormat.FormatExpression.expression list
  datatype baexp
    = BACALL of {callExp:bacall, loc:loc,
                 nextExp:baexp,
                 resultVars:varInfo list}
    | BACALLBACKFNM of {boundVar:varInfo,
                        foreignFunTy:AnnotatedTypes.foreignFunTy,
                        function:{annotation:AnnotatedTypes.annotationLabel,
                                  argVarList:varInfo list,
                                  bodyExp:baexp,
                                  closureLayout:BitmapCalc.closureLayout,
                                  funTy:ty,
                                  loc:loc},
                        nextExp:baexp}
    | BAEXPORTVAR of {loc:loc, nextExp:baexp,
                      varInfo:varInfo,
                      varSize:bavalue,
                      varTag:bavalue}
    | BAEXTERNVAR of {exVarInfo:exVarInfo,
                      loc:loc, nextExp:baexp}
    | BAFNM of {boundVar:varInfo, btvEnv:btvEnv,
                function:{annotation:AnnotatedTypes.annotationLabel,
                          argVarList:varInfo list,
                          bodyExp:baexp,
                          closureLayout:BitmapCalc.closureLayout,
                          funTy:ty,
                          loc:loc},
                nextExp:baexp}
    | BAHANDLE of {exnVar:varInfo,
                   handlerExp:baexp, loc:loc,
                   nextExp:baexp,
                   resultVars:varInfo list,
                   tryExp:baexp}
    | BAMERGE of varInfo list
    | BAPOLY of {btvEnv:btvEnv, exp:baexp,
                 expTyWithoutTAbs:ty, loc:loc,
                 nextExp:baexp,
                 resultVars:varInfo list}
    | BARAISE of {argExp:bavalue, loc:loc}
    | BARETURN of {funTy:ty, loc:loc,
                   resultVars:varInfo list}
    | BASWITCH of {nextExp:baexp,
                   resultVars:varInfo list,
                   switch:{branches:{branchExp:baexp,
                                     constant:ConstantTerm.constant} list,
                           defaultExp:baexp, expTy:ty,
                           loc:loc, switchExp:bavalue}}
    | BATAILAPPM of {argExpList:bavalue list,
                     funExp:bavalue, funTy:ty,
                     loc:loc}
    | BATAILSWITCH of {branches:{branchExp:baexp, constant:ConstantTerm.constant} list,
                       defaultExp:baexp, expTy:ty,
                       loc:loc, switchExp:bavalue}
    | BAVAL of {boundExp:baprim, boundVar:varInfo,
                loc:loc, nextExp:baexp}
    | BAVALREC of {loc:loc, nextExp:baexp,
                   recbindList:{boundVar:varInfo,
                                function:{annotation:AnnotatedTypes.annotationLabel,
                                          argVarList:varInfo list, bodyExp:baexp,
                                          closureLayout:BitmapCalc.closureLayout,
                                          funTy:ty,
                                          loc:loc}
                               } list
                  }
  type function =
    {annotation:AnnotatedTypes.annotationLabel,
     argVarList:varInfo list, bodyExp:baexp,
     closureLayout:BitmapCalc.closureLayout, funTy:ty,
     loc:loc}
  type switch =
    {branches:{branchExp:baexp, constant:ConstantTerm.constant} 
                list, defaultExp:baexp, expTy:ty,
     loc:loc, switchExp:bavalue}
  val format_baexp : baexp
                     -> SMLFormat.FormatExpression.expression list
  val format_function : function
                        -> SMLFormat.FormatExpression.expression list
  val format_switch : switch
                      -> SMLFormat.FormatExpression.expression list
  val formatWithType_baexp : baexp
                             -> SMLFormat.FormatExpression.expression list
  val formatWithType_function : function
                                -> SMLFormat.FormatExpression.expression list
  val formatWithType_switch : switch
                              -> SMLFormat.FormatExpression.expression list
end
