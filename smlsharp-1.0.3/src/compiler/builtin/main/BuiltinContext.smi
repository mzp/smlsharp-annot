(* If you change this file, edit BuiltinName.sml with respect to the change
 * of this file. *)

(*
infix  7 * / div mod
infix  6 + - ^
infixr 5 :: @
infix  4 = <> > >= < <=
infix  3 := o
infix  0 before
*)

datatype int    = _builtin datatype int
datatype word   = _builtin datatype word
datatype char   = _builtin datatype char
datatype string = _builtin datatype string
datatype real   = _builtin datatype real
datatype unit   = _builtin datatype unit
datatype ptr    = _builtin datatype ptr
datatype exn    = _builtin datatype exn

(* 2012-1-8 ohori: movde the followings at top-level *)
datatype array = _builtin datatype array
datatype vector = _builtin datatype vector

datatype bool = false | true
datatype 'a list = nil | :: of 'a * 'a list
datatype 'a option = NONE | SOME of 'a

(* 2012-1-8 ohori: order is added  *)
datatype order = LESS | EQUAL | GREATER

(* compiler deals with "ref" in a special way.  *)
datatype 'a ref = ref of 'a

val = = _builtin val Equal : ''a * ''a -> bool
val := = _builtin val Ref_assign : 'a ref * 'a -> unit
(* 2012-1-7 ohori: this must also be a primitive *)
val ! = _builtin val Ref_deref : 'a ref -> 'a

val exnName = _builtin val Exn_Name : exn -> string

exception Bind
exception Match
exception Subscript
exception Size
exception Overflow
exception Div
exception Domain
exception Fail of string
(* 2012-1-8 ohori: added the following 5 exceptions *)
exception Chr
exception Span
exception Empty
exception Option

structure SMLSharp =
struct
  datatype boxed = _builtin datatype boxed
  val identityEqual = _builtin val IdentityEqual : boxed * boxed -> bool

  (* The followings are provided for defining the Basis Library. *)

  structure PrimArray =
  struct
(* 2012-1-8 ohori: moved to top level
    datatype array = _builtin datatype array
    datatype vector = _builtin datatype vector
*)
    val allocArray = _builtin val Array_allocArray : int -> 'a array
    val sub = _builtin val Array_sub : 'a array * int -> 'a
    val update = _builtin val Array_update : 'a array * int * 'a -> unit
    val length = _builtin val Array_length : 'a array -> int

(* 2012-1-7 ohori: the followingaliases are for defining vector 
   efficiently.
*)
    val allocVector = _builtin val Array_allocVector : int -> 'a vector
    val sub_vector = _builtin val Array_sub : 'a vector * int -> 'a
    val update_vector = _builtin val Array_update : 'a vector * int * 'a -> unit
    val length_vector = _builtin val Array_length : 'a vector -> int
    val copy_unsafe_array_to_array =
        _builtin val Array_copy_unsafe
        : 'a array * int * 'a array * int * int -> unit
    val copy_unsafe_array_to_vector =
        _builtin val Array_copy_unsafe
        : 'a array * int * 'a vector * int * int -> unit
    val copy_unsafe_vector_to_array =
        _builtin val Array_copy_unsafe
        : 'a vector * int * 'a array * int * int -> unit
    val copy_unsafe_vector_to_vector =
        _builtin val Array_copy_unsafe
        : 'a vector * int * 'a vector * int * int -> unit
  end

  structure PrimString =
  struct
    val allocArray = _builtin val String_allocArray : int -> string
    val copy_unsafe =
        _builtin val String_copy_unsafe
        : string * int * string * int * int -> unit
    val size = _builtin val String_size : string -> int
    val allocVector = _builtin val String_allocVector : int -> string

    val compare = _builtin val String_compare : string * string -> int
    val toBoxed = _builtin val Cast : string -> boxed

    val sub_unsafe = _builtin val String_sub : string * int -> char
    val update_unsafe = _builtin val String_update : string * int * char -> unit
  end

(*
  structure String =
  struct
    type string = string
  end
*)

  structure Real =
  struct
    type real = real
    val equal = _builtin val Real_equal : real * real -> bool
    val unorderedOrEqual =
        _builtin val Real_unorderedOrEqual : real * real -> bool
    val fromInt = _builtin val Real_fromInt : int -> real
    val trunc_unsafe = _builtin val Real_trunc_unsafe_noov : real -> int
    val abs = _builtin val Real_abs : real -> real
    val add = _builtin val Real_add : real * real -> real
    val div = _builtin val Real_div : real * real -> real
    val gt = _builtin val Real_gt : real * real -> bool
    val gteq = _builtin val Real_gteq : real * real -> bool
    val lt = _builtin val Real_lt : real * real -> bool
    val lteq = _builtin val Real_lteq : real * real -> bool
    val mul = _builtin val Real_mul : real * real -> real
    val rem = _builtin val Float_rem : real * real -> real
    val neg = _builtin val Real_neg : real -> real
    val sub = _builtin val Real_sub : real * real -> real
  end

  structure Real32 =
  struct
    datatype real = _builtin datatype Real32_real
    val equal = _builtin val Float_equal : real * real -> bool
    val unorderedOrEqual =
        _builtin val Float_unorderedOrEqual : real * real -> bool
    val fromInt = _builtin val Float_fromInt : int -> real
    val fromReal = _builtin val Float_fromReal : Real.real -> real
    val toReal = _builtin val Float_toReal : real -> Real.real
    val trunc_unsafe = _builtin val Float_trunc_unsafe_noov : real -> int
    val abs = _builtin val Float_abs : real -> real
    val add = _builtin val Float_add : real * real -> real
    val div = _builtin val Float_div : real * real -> real
    val gt = _builtin val Float_gt : real * real -> bool
    val gteq = _builtin val Float_gteq : real * real -> bool
    val lt = _builtin val Float_lt : real * real -> bool
    val lteq = _builtin val Float_lteq : real * real -> bool
    val mul = _builtin val Float_mul : real * real -> real
    val rem = _builtin val Float_rem : real * real -> real
    val neg = _builtin val Float_neg : real -> real
    val sub = _builtin val Float_sub : real * real -> real
  end

  structure IntInf =
  struct
    datatype int = _builtin datatype IntInf_int
  end

  structure Char =
  struct
    type char = char
    val chr_unsafe = _builtin val Char_chr_unsafe : int -> char
    val ord = _builtin val Char_ord : char -> int
    val gt = _builtin val Char_gt : char * char -> bool
    val gteq = _builtin val Char_gteq : char * char -> bool
    val lt = _builtin val Char_lt : char * char -> bool
    val lteq = _builtin val Char_lteq : char * char -> bool
  end

  structure Int =
  struct
    type int = int
    val quot = _builtin val Int_quot_noov : int * int -> int
    val rem = _builtin val Int_rem_noov : int * int -> int
    val abs = _builtin val Int_abs_noov : int -> int
    val add = _builtin val Int_add_noov : int * int -> int
    val div = _builtin val Int_div_noov : int * int -> int
    val gt = _builtin val Int_gt : int * int -> bool
    val gteq = _builtin val Int_gteq : int * int -> bool
    val lt = _builtin val Int_lt : int * int -> bool
    val lteq = _builtin val Int_lteq : int * int -> bool
    val mod = _builtin val Int_mod_noov : int * int -> int
    val mul = _builtin val Int_mul_noov : int * int -> int
    val neg = _builtin val Int_neg_noov : int -> int
    val sub = _builtin val Int_sub_noov : int * int -> int
  end

  structure Word =
  struct
    type word = word
    val andb = _builtin val Word_andb : word * word -> word
    val arshift = _builtin val Word_arshift : word * word -> word
    val fromInt = _builtin val Word_fromInt : int -> word
    val lshift = _builtin val Word_lshift : word * word -> word
    val notb = _builtin val Word_notb : word -> word
    val neg = _builtin val Word_neg : word -> word
    val orb = _builtin val Word_orb : word * word -> word
    val rshift = _builtin val Word_rshift : word * word -> word
    val toIntX = _builtin val Word_toIntX : word -> int
    val xorb = _builtin val Word_xorb : word * word -> word
    val add = _builtin val Word_add : word * word -> word
    val div = _builtin val Word_div : word * word -> word
    val gt = _builtin val Word_gt : word * word -> bool
    val gteq = _builtin val Word_gteq : word * word -> bool
    val lt = _builtin val Word_lt : word * word -> bool
    val lteq = _builtin val Word_lteq : word * word -> bool
    val mod = _builtin val Word_mod : word * word -> word
    val mul = _builtin val Word_mul : word * word -> word
    val sub = _builtin val Word_sub : word * word -> word
  end

  structure Word8 =
  struct
    datatype word = _builtin datatype Word8_word
    val fromWord = _builtin val Byte_fromWord : Word.word -> word
    val toWord = _builtin val Byte_toWord : word -> Word.word
    val fromInt = _builtin val Byte_fromInt : int -> word
    val toInt = _builtin val Byte_toIntX : word -> int
    val toIntX = _builtin val Byte_toIntX : word -> int
    val add = _builtin val Byte_add : word * word -> word
    val div = _builtin val Byte_div : word * word -> word
    val gt = _builtin val Byte_gt : word * word -> bool
    val gteq = _builtin val Byte_gteq : word * word -> bool
    val lt = _builtin val Byte_lt : word * word -> bool
    val lteq = _builtin val Byte_lteq : word * word -> bool
    val mod = _builtin val Byte_mod : word * word -> word
    val mul = _builtin val Byte_mul : word * word -> word
    val sub = _builtin val Byte_sub : word * word -> word
    val fromChar = _builtin val Cast : char -> word
    val toChar = _builtin val Cast : word -> char

    val sub_unsafe = _builtin val String_sub : string * int -> word
    val update_unsafe = _builtin val String_update : string * int * word -> unit
  end

  structure Pointer =
  struct
    val toUnitPtr = _builtin val Cast : 'a ptr -> unit ptr
    val fromUnitPtr = _builtin val Cast : unit ptr -> 'a ptr
    val advance = _builtin val Ptr_advance : 'a ptr * int -> 'a ptr
    val deref_char = _builtin val Ptr_deref_char : char ptr -> char
    val deref_int = _builtin val Ptr_deref_int : int ptr -> int
    val deref_ptr = _builtin val Ptr_deref_ptr : 'b ptr ptr -> 'b ptr
    val deref_real = _builtin val Ptr_deref_real : real ptr -> real
    val deref_real32 =
        _builtin val Ptr_deref_real32 : Real32.real ptr -> Real32.real
    val deref_word = _builtin val Ptr_deref_word : word ptr -> word
    val deref_word8 =
        _builtin val Ptr_deref_word8 : Word8.word ptr -> Word8.word
    val store_char = _builtin val Ptr_store_char : char ptr * char -> unit
    val store_int = _builtin val Ptr_store_int : int ptr * int -> unit
    val store_ptr = _builtin val Ptr_store_ptr : 'b ptr ptr * 'b ptr -> unit
    val store_real = _builtin val Ptr_store_real : real ptr * real -> unit
    val store_real32 =
        _builtin val Ptr_store_real32 : Real32.real ptr * Real32.real -> unit
    val store_word = _builtin val Ptr_store_word : word ptr * word -> unit
    val store_word8 =
        _builtin val Ptr_store_word8 : Word8.word ptr * Word8.word -> unit
  end

  (* for SQL integration. compiler translates SQL terms into data construction
   * terms of the following datatypes. *)
  structure SQL =
  struct
    datatype 'a server =
      SERVER of
        string
        * (string * {colname: string, typename: string, isnull: bool} list) list
        * 'a
    datatype 'a dbi = DBI
    datatype ('a,'b) value = VALUE of (string * 'b dbi) * 'a
  end

end
