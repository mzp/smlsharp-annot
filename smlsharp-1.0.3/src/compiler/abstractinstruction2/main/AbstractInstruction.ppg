(* -*- sml -*- *)
(**
 * Abstract Instructions version 2.
 * @copyright (c) 2007-2009, Tohoku University.
 * @author UENO Katsuhiro
 * @version $Id: AbstractInstruction.ppg,v 1.12 2008/08/06 17:23:39 ohori Exp $
 *)

structure AbstractInstruction2 =
struct
  structure Target = TargetProperty(VMTarget)
  structure Formatter = TargetPlatformFormatter(Target)

  local
    fun format_word_asInt x =
        [SMLFormat.BasicFormatters.format_string (Word.fmt (StringCvt.DEC) x)]

    fun formatMap foldli formatKey (formatter,prefix,sep,suffix) map =
        foldli
            (fn (k,v,z) =>
                z @ prefix @ formatKey k @ sep @ formatter v @ suffix)
            nil map

    fun formatIDMap x y =
        formatMap VarID.Map.foldli VarID.format_id x y
    fun formatSEnv x y =
        formatMap SEnv.foldli SMLFormat.BasicFormatters.format_string x y
    fun formatIEnv x y =
        formatMap IEnv.foldli SMLFormat.BasicFormatters.format_int x y
  in

  (*% @formatter(Target.uint) Formatter.format_uint *)
  type targetUInt = Target.uint

  (*% @formatter(Target.sint) Formatter.format_sint *)
  type targetSInt = Target.sint

  (*% @formatter(Loc.loc) Loc.format_loc *)
  type loc = Loc.loc

  (*% @formatter(VarID.id) VarID.format_id *)
  type id = VarID.id

  (*% @formatter(Absyn.ffiAttributes) Absyn.format_ffiAttributes *)
  type ffiAttributes = Absyn.ffiAttributes

  (*% *)
  type label =
       (*% @format(id) "L" id *)
       id

  (*% @formatter(ClusterID.id) ClusterID.format_id *)
  type clusterId =
       (*% @format(id) "C" id *)
       ClusterID.id

  (*% @formatter(BoundTypeVarID.id) BoundTypeVarID.format_id *)
  type tid =
       (*% @format(x) "t" x *)
       BoundTypeVarID.id

  (* TODO: we need more types! *)
  (*% *)
  datatype ty =
      (*% @format(x) x *)
      GENERIC of tid      (* generic *)
    | UINT                (* unsigned int *)
    | SINT                (* singed int *)
    | BYTE                (* unsigned char < UINT *)
    | BOXED               (* pointer to heap (tagged for GC) *)
    | HEAPPOINTER         (* pointer to middle of heap *)
    | CODEPOINTER         (* pointer to code *)
    | CPOINTER            (* arbitrary pointer of C *)
    | ENTRY               (* pointer to cluster entry (clusterId * entryAddr) *)
    | FLOAT               (* single precision floating-point *)
    | DOUBLE              (* double precision floating-point *)

  (*%
   * @formatter(enclosedList) SmlppgUtil.formatListWithEnclosureIfMoreThanOne
   *)
  (*%
   * @prefix format_simple_
   *)
  type paramInfo =
      (*%
       * @format({index, argTys:argTy argTys,
       *          retTys:retTy retTys:enclosedList})
       * "(" { index "," +2
       *       { "(" { argTys(argTy)("," +3) } ")"
       *         +2 "->" + { retTys(retTy)("," +3, "(", ")") }} ")" }
       *)
      (*%
       * @prefix format_simple_
       * @format({index, argTys, retTys})
       * "(" index ")"
       *)
       {index: int, argTys: ty list, retTys: ty list}

  (*%
   * @formatter(enclosedList) SmlppgUtil.formatListWithEnclosureIfMoreThanOne
   *)
  datatype argKind =
      (*% @format(x) "Param" x *)
      Param of paramInfo
    | (*%
       * @format(arg) "Result" arg
       *)
      Result of paramInfo
    | (*%
       * @format(arg) "Arg" arg
       *)
      Arg of paramInfo
    | (*%
       * @format(arg) "Ret" arg
       *)
      Ret of paramInfo
(*
    | (*%
       * @format(arg) "TA" arg
       *)
      TailArg of paramInfo
*)
(*
    | (*% @format({argTys: argTy argTys, retTys: retTy retTys:enclosedList})
       * "Link(" { "(" { argTys(argTy)("," +3) } ")"
       *          +2 "->" + { retTys(retTy)("," +3, "(", ")") } ")" }
       *)
      Link of {argTys: ty list, retTys: ty list}
    | (* @format({argTys: argTy argTys, retTys: retTy retTys})
       * "TLink(" { "(" { argTys(argTy)("," +3) } ")"
       *          +2 "->" + { retTys(retTy)("," +3, "(", ")") } ")" }
       *)
      TailLink of {argTys: ty list, retTys: ty list}
*)
    | (* *)
      Env
    | (* *)
      Exn
    | (*% @format({index, argTys:ty tys, attributes})
       * "ExtParam(" index "," "{" { tys(ty)("," +2) "}" } ")"
       *)
      ExtParam of {index: int, argTys: ty list, attributes: ffiAttributes}
    | (*% @format({index, argTys:ty tys, attributes})
       * "ExtArg(" index "," "{" { tys(ty)("," +2) "}" } ")"
       *)
      ExtArg of {index: int, argTys: ty list, attributes: ffiAttributes}
    | (*% @format({index, retTys:ty tys, attributes})
       * "ExtRet(" index "," "{" { tys(ty)("," +2) "}" } ")"
       *)
      ExtRet of {index: int, retTys: ty list, attributes: ffiAttributes}

  (*% *)
  type argInfo =
      (*% @format({id, ty, argKind}) "a" id d ":" d argKind *)
      (*
       * special storages for transporting values between two clusters or
       * raise and handle.
       * Note that "id" identifies a live range of that storage.
       * Since the id is always unique, you may regard it as a name anyway.
       *)
      { id: id, ty: ty, argKind: argKind }

  and varInfo =
      (*%
       * @format({id, ty, displayName})
       * "v" id d ":" d ty
       *)
      { id: id, ty: ty, displayName: string }

(*
  (*%
   * @formatter(simple) format_simple_paramInfo
   *)
  datatype tag =
      (*% @format "1" *)
      Boxed
    | (*% @format "0" *)
      Unboxed
    | (*% @format(p:simple) p *)
      ParamTag of paramInfo
    | (*% @format({offset, bit}) "Env[" offset ":" bit "]" *)
      IndirectTag of {offset: targetUInt, bit: word}
(*
    | VarTag of varInfo

    All tag informations must be given from outside of cluster.
    This is due to restriction of bitmap calculation. If we allow
    polymorphic tail call between two functions in same cluster,
    such as polymorphic recursion and polymorphic inner functions,
    we need to allow to save tag information into local variables
    and modify it in cluster.
*)
*)

(*
  (*% *)
  type genericTyRep =
      (*%
       * @format({size, align, tag})
       * "{" { "size=" size ","
       *       +1 "align=" align ","
       *       +1 "tag=" tag "}" }
       *)
      {
        size: word,
        align: word,
        tag: tag
      }
*)

  (*% *)
  datatype objectType =
      Array
    | Vector
    | Record of {mutable:bool}

  (*% *)
  type globalLabel =
       string

  (*% *)
  datatype value =
      (*% @format(x) x "U" *)
      UInt of targetUInt
    | (*% @format(x) x *)
      SInt of targetSInt
    | (*% @format(x) x *)
      Byte of targetUInt
    | (*% @format(x) x *)
      Var of varInfo
    | (*% *)
      Nowhere                     (* null code pointer *)
    | (*% *)
      Null                        (* null C pointer *)
    | (*% *)
      Empty                       (* null data pointer *)
    | (*% @format(id) "c" id *)
      Const of id                 (* constant heap object : BOXED *)
    | (*% @format(id) "i" id *)
      Init of id                  (* data for initialization : HEAPPOINTER *)
    | (*% @format({clusterId, entry}) clusterId ":" entry *)
      (* entry address of ML function *)
      Entry of {clusterId: clusterId, entry: label}
    | (*% @format(label * ty) label "@GBL:" ty *)
      (* global label declared in same linkage unit *)
      Global of globalLabel * ty
    | (*% @format(label * ty) label "@EXT:" ty *)
      (* global label declared in other linkage unit *)
      Extern of globalLabel * ty
    | (*% @format(l) l *)
      (* local label *)
      Label of label
    | (*% @format(l) l "@CFUN" *)
      ExtFunLabel of string        (* reference to C function *)

  (*% *)
  datatype primData =
      (*% @format(x) x "U" *)
      UIntData of targetUInt
    | (*% @format(x) x *)
      SIntData of targetSInt
    | (*% @format(x) x "B" *)
      ByteData of targetUInt
    | (*% @format(x) x *)
      RealData of string
    | (*% @format(x) x *)
      FloatData of string
    | (*% @format({clusterId, entry}) clusterId ":" entry *)
      EntryData of {clusterId: clusterId, entry: label}
    | (*% @format(label) label "@EXT"*)
      ExternLabelData of globalLabel
    | (*% @format(label) "GLOBAL:" label *)
      GlobalLabelData of globalLabel
    | (*% @format(id) "c" id *)
      ConstData of id
    | (*% @format "NullPointer" *)
      NullPointerData
    | (*% @format "NullBoxed" *)
      NullBoxedData

  (*%
   * @formatter(BigInt.int) SmlppgUtil.format_BigInt
   * @formatter(str) Formatter.format_string_ML
   * @formatter(hex) Formatter.format_uint_hex
   *)
  datatype data =
      (*% @format(x) x *)
      PrimData of primData
    | (*% @format(x) x:str *)
      StringData of string
    | (*% @format(x) x *)
      IntInfData of BigInt.int
    | (*%
       * @format({objectType,
       *          bitmaps: bitmap bitmaps,
       *          payloadSize,
       *          fields: field fields})
       * { "(" { objectType ","
       *         +5 "bitmaps=[" { bitmaps(bitmap)("," +d) "]" } ","
       *         +5 "size=" payloadSize ","
       *         +4 fields(field)("," +4) } ")" }
       *
       * @format:field({size, value})
       * { size +1 ":" 2[ +2 value ] }
       *)
      ObjectData of
      {
        objectType: objectType,
        bitmaps: targetUInt list,
        payloadSize: targetUInt,
        fields: {size: targetUInt, value: primData} list
      }
    | (*%
       * @format({size, value: v vopt})
       * { "VAR(" { vopt(v) "," +1 "size=" size } ")" }
       *)
      VarSlot of
      {
        size: targetUInt,
        value: primData option
      }

  (*% @params(x) *)
  datatype op1 =
      (*% @format "-" x *)
      Neg
    | (*% @format "abs(" x ")" *)
      Abs
    | (*% @format "Cast(" x ")" *)
      (* data representation conversion *)
      Cast
    | (*% @format "SignExt(" x ")" *)
      (* data representation conversion with sign extension *)
      SignExt
    | (*% @format "ZeroExt(" x ")" *)
      (* data representation conversion with zero extension *)
      ZeroExt
    | (*% @format "~" x *)
      Notb
    | (*% @format "Size(" x ")" *)
      (* payload size of object in bytes *)
      PayloadSize

  (*% @params(x,y) *)
  datatype op2 =
      (*% @format L5{ x +1 "+" +2 y } *)
      Add
    | (*% @format L5{ x +1 "-" +2 y } *)
      Sub
    | (*% @format L6{ x +1 "*" +2 y } *)
      Mul
    | (*% @format L6{ x +1 "/" +2 y } *)
      Div
    | (*% @format L6{ x +1 "%" +2 y } *)
      Mod
    | (*% @format "div(" { x "," +2 y } ").quot" *)
      Quot
    | (*% @format "div(" { x "," +2 y } ").rem" *)
      Rem
    | (*% @format L2{ x +1 "<" +2 y } *)
      Lt
    | (*% @format L2{ x +1 ">" +2 y } *)
      Gt
    | (*% @format L2{ x +1 "<=" +2 y } *)
      Lteq
    | (*% @format L2{ x +1 ">=" +2 y } *)
      Gteq
    | (*% @format L2{ x +1 "==" +2 y } *)
      (* monomorphic equality *)
      MonoEqual
    | (*% @format L2{ x +1 "?=" +2 y } *)
      UnorderedOrEqual
    | (*% @format L3{ x +1 "&" +2 y } *)
      Andb
    | (*% @format L3{ x +1 "|" +2 y } *)
      Orb
    | (*% @format L3{ x +1 "^" +2 y } *)
      Xorb
    | (*% @format L3{ x +1 "<<" +2 y } *)
      LShift
    | (*% @format L3{ x +1 ">>" +2 y } *)
      RShift
    | (*% @format L3{ x +1 ">>>" +2 y } *)
      ArithRShift
    | (*% @format L3{ x +1 "++" +2 y } *)
      PointerAdvance

  (*% *)
  datatype barrier =
      (*% @format *)
      NoBarrier
    | (*% @format "," +5 "barriered" *)
      WriteBarrier
    | (*% @format "," +5 "global-barriered" *)
      GlobalWriteBarrier
    | (*% @format(v) "," +5 "barrier=" v *)
      BarrierTag of value

  (*%
   * @formatter(choice) SmlppgUtil.formatBinaryChoice
   *)
  (*% @prefix format_valof_
   * @formatter(choice) SmlppgUtil.formatBinaryChoice
   * @formatter(label) format_label
   * @formatter(varInfo) format_varInfo
   *)
  datatype handler =
      (*% @format *)
      (*% @prefix format_valof_ @format "NoHandler" *)
      NoHandler
    | (*%
       * @format(label)
       * 1 "#" + "handle" + "=>" + "goto" + label
       *)
      (*% @prefix format_valof_ @format(label) label *)
      StaticHandler of label
    | (*%
       * @format({outside, handlers: handler handlers})
       * 1 "#" + "handle" + "=>" + "goto"
       * + "(" { handlers(handler)("," +d)
       * outside:choice()("," +d "OUTSIDE",)
       * ")" }
       *)
      (*% @prefix format_valof_
       * @format({outside, handlers: handler handlers})
       * "(" { handlers(handler)("," +d)
       * outside:choice()("," +d "OUTSIDE",)
       * ")" }
       *)
      DynamicHandler of
      {
        outside: bool,           (* true if raise may go outside *)
        handlers: label list     (* handlers which may be available *)
      }

  (*% *)
  datatype handlerChange =
      (*% @format({popHandlerLabel})  "Push->" popHandlerLabel *)
      PushHandler of {popHandlerLabel: label}
    | (*% @format({pushHandlerLabel}) pushHandlerLabel "->Pop" *)
      PopHandler of {pushHandlerLabel: label}

  (*%
   * @formatter(word) format_word_asInt
   * @formatter(enclosedOpt) SmlppgUtil.formatEnclosedOpt
   * @formatter(enclosedList) SmlppgUtil.formatListWithEnclosureIfMoreThanOne
   * @formatter(choice) SmlppgUtil.formatBinaryChoice
   * @formatter(Target.Instruction.instruction)
   *            Target.Instruction.format_instruction
   * @formatter(handler') format_valof_handler
   *)
  datatype instruction =
      (*%
       * @format({dst, ty, value, loc})
       * { dst + "=" 4[ +3 value 4[ +2 "as" + ty ";" ] ] }
       *)
      Move of
      {
        dst: varInfo,
        ty: ty,              (* unnecessary? *)
        value: value,
        loc: loc
      }
    | (*%
       * @format({dst, ty, block, offset, size, loc})
       * { dst + "=" 4[ +3 block 4 "[" { offset "," +4 "size=" size "]" }
       * 4[ +2 "as" + ty ";" ] ] }
       *)
      (* FIXME: if ty is not an union type, size may be ignored. *)
      Load of
      {
        dst: varInfo,
        ty: ty,
        block: value,
        offset: value,
        size: value,
        loc: loc
      }
     | (*%
        * @format({block, offset, ty, size, value, barrier, loc})
        * { block "[" { offset "," +4 "size=" size barrier "]" } +d "="
        * 4[ +3 value 4[ +2 "as" + ty ";" ] ] }
        *)
      (* FIXME: if ty is not an union type, size may be ignored. *)
      Update of
      {
        block: value,
        offset: value,
        ty: ty,
        size: value,
        value: value,
        barrier: barrier,
        loc: loc
      }
    | (*%
       * @format({dst, ty, src, loc})
       * { dst + "=" 4[ +3 src 4[ +2 "as" + ty ";" ] ] }
       *)
      Get of
      {
        dst: varInfo,
        ty: ty,
        src: argInfo,
        loc: loc
      }
    | (*%
       * @format({dst, ty, value, loc})
       * { dst + "=" 4[ +3 value 4[ +2 "as" + ty ";" ] ] }
       *)
      Set of
      {
        dst: argInfo,
        ty: ty,
        value: value,
        loc: loc
      }
    | (*%
       * @format({dst, objectType, bitmaps: bitmap bitmaps,
       *          payloadSize, loc})
       * { dst + "=" 4[ +3 "Alloc("
       *    { objectType ","
       *      +4 "bitmaps=[" { bitmaps(bitmap)("," +d) "]" } ","
       *      +4 "size=" payloadSize ")" } ] }
       *)
      Alloc of
      {
        dst: varInfo,
        objectType: objectType,
        bitmaps: value list,
        payloadSize: value,
        loc: loc
      }
    | (*%
       * @format({dst, op1: op1 * ty1 * ty, arg, loc})
       * { dst + "=" 4[ +3 op1()(arg)
       *             4[ +2 "as" + {ty1 +4 "->" + ty} ";" ] ] }
       *)
      PrimOp1 of
      {
        dst: varInfo,
        op1: op1 * ty * ty,
        arg: value,
        loc: loc
      }
    | (*%
       * @format({dst, op2: op2 * ty1 * ty2 * ty, arg1, arg2, loc})
       * { dst + "=" 4[ +3 op2()(arg1, arg2)
       *             4[ +2 "as" + {"(" { ty1 "," +4 ty2 ")" }
       *                            +6 "->" +7 ty} ";" ] ] }
       *)
      PrimOp2 of
      {
        dst: varInfo,
        op2: op2 * ty * ty * ty,
        arg1: value,
        arg2: value,
        loc: loc
      }
    | (*%
       * @format({dstVarList: dst dsts:enclosedList,
       *          entry,
       *          attributes,
       *          argList: arg args,
       *          calleeTy: argTy argTys * retTy retTys:enclosedList,
       *          loc})
       * { 1[ dsts(dst)("," +4, "(", ")") ] + "="
       *     4[ +3 entry "(" { args(arg)("," +3) } ")"
       *       4[ +2 "as" + { "(" { argTys(argTy)("," +3) } ")"
       *          +2 "->" + { retTys(retTy)("," +3, "(", ")") } ";" } ] ] }
       *)
      CallExt of
      {
        dstVarList: argInfo list,     (* must be ExtRet *)
        entry: value,
        attributes: ffiAttributes,
        argList: argInfo list,        (* must be ExtArg *)
        calleeTy: ty list * ty list,
        loc: loc
      }
    | (*%
       * @format({dstVarList: dst dsts:enclosedList,
       *          entry, env,
       *          argList: arg args,
       *          argTyList: argTy argTys,
       *          resultTyList: retTy retTys,
       *          loc})
       * { 1[ dsts(dst)("," +4, "(", ")") ] + "="
       *     4[ +3 entry "<" env ">" "(" { args(arg)("," +3) } ")"
       *       4[ +2 "as" + { "(" { argTys(argTy)("," +3) } ")"
       *                      +2 "->" + "(" { retTys(retTy)("," +4) } ")" }
       *          ";" ] ] }
       *)
      Call of
      {
        dstVarList: argInfo list,    (* must be Ret *)
        entry: value,
        env: argInfo,                (* must be Env *)
        argList: argInfo list,       (* must be Arg *)
        argTyList: ty list,          (* unnecessary? *)
        resultTyList: ty list,       (* unnecessary? *)
        loc: loc
      }
    | (*%
       * @format({entry, env,
       *          argList: arg args,
       *          argTyList: argTy argTys,
       *          resultTyList: retTy retTys,
       *          loc})
       * { entry "<" env ">" "(" { args(arg)("," +3) } ")"
       *   4[ +2 "as" + { "(" { argTys(argTy)("," +3) } ")"
       *                  +2 "->" + "(" { retTys(retTy)("," +4) } ")" }
       *      ";" ] }
       *)
      (*
       * NOTE: TailCall should not be in a block which has a handler.
       *)
      TailCall of
      {
        entry: value,
        env: argInfo,                (* must be Env *)
        argList: argInfo list,       (* must be Arg *)
        argTyList: ty list,          (* unnecessary? *)
        resultTyList: ty list,       (* unnecessary? *)
        loc: loc
      }
    | (*%
       * @format({dst, entry, env,
       *          exportTy: argTy argTys * retTy retTys,
       *          attributes, loc})
       * { dst + "=" 4[ +3 "CallbackClosure(" entry "," + env ")"
       *             4[ +2 "as" + { "(" { argTys(argTy)("," +3) } ")"
       *                +2 "->" + "(" { retTys(retTy)("," +3) } ");" } ] ] }
       *)
      CallbackClosure of
      {
        dst: varInfo,
        entry: value,
        env: value,
        exportTy: ty list * ty list,
        attributes: ffiAttributes,
        loc: loc
      }
    | (*%
       * @format({varList: value values,
       *          argTyList: argTy argTys,
       *          retTyList: retTy retTys,
       *          loc})
       * { "return" + { values(value)("," +3) }
       * 4[ +2 "as" + { "(" { argTys(argTy)("," +3) } ")"
       *    +2 "->" + "(" { retTys(retTy)("," +3) } ");" } ] }
       *)
      Return of
      {
        varList: argInfo list,       (* must be Result *)
        argTyList: ty list,          (* arguments of this function *)
        retTyList: ty list,          (* unnecesarry? *)
        loc: loc
      }
    | (*%
       * @format({varList: value values,
       *          argTyList: argTy argTys,
       *          retTyList: retTy retTys,
       *          attributes,
       *          loc})
       * { "returnExt" + { values(value)("," +3) }
       * 4[ +2 "as" + { "(" { argTys(argTy)("," +3) } ")"
       *    +2 "->" + "(" { retTys(retTy)("," +3) } ");" }
       *    +2 attributes ] }
       *)
      ReturnExt of
      {
        varList: argInfo list,       (* must be Result *)
        argTyList: ty list,          (* arguments of this function *)
        retTyList: ty list,
        attributes: ffiAttributes,
        loc: loc
      }
    | (*%
       * @format({op2: op2 * ty1 * ty2 * ty, value1, value2,
       *          thenLabel, elseLabel, loc})
       * { "if" 4[ +3 op2()(value1, value2)
       *        4[ +2 "as" + {"(" { ty1 "," +4 ty2 ")" }
       *                        +6 "->" +7 ty} ] ]
       *   +1 "then" + "goto" + thenLabel
       *   +1 "else" + "goto" + elseLabel }
       *)
      If of
      {
        value1: value,           (* preferred for variable *)
        value2: value,           (* preferred for constant *)
        op2: op2 * ty * ty * ty,
        thenLabel: label,
        elseLabel: label,
        loc: loc
      }
    | (*%
       * @format({offset, size, objectSize, passLabel, failLabel, loc})
       * { "if" 4[ +3 offset "+" size "<" objectSize ]
       *   +1 "then" + "goto" + passLabel
       *   +1 "else" + "goto" + failLabel }
       *)
      (* CheckBoundary is equivalent to
       *   if (offset + size < objectSize)
       *   then goto passLabel
       *   else goto failLabel
       * except that the condition is calculated WITHOUT overflow.
       *)
      CheckBoundary of
      {
        offset: value,
        size: value,
        objectSize: value,
        passLabel: label,
        failLabel: label,
        loc: loc
      }
    | (*%
       * @format({exn, loc})
       * { "raise" + exn ";" }
       *)
      Raise of
      {
        exn: argInfo,            (* must be Exn *)
        loc: loc
      }
    | (*%
       * @format({exn, attributes, loc})
       * { "raiseExt" + exn ";" }
       *)
      RaiseExt of
      {
        exn: argInfo,            (* must be Exn *)
        attributes: ffiAttributes,
        loc: loc
      }
(*
    | (*%
       * @format({block, offset, passLabel, failLabel, loc})
       * { 4[ +3 "checkBoundary(" { "array=" block "," +3
       *                            "offset=" offset "," +3 ")" } ]
       *   +1 "pass" + "=>" + passLabel ","
       *   +1 "fail" + "=>" + failLabel }
       *)
      (* If offset >= length(block), then goto passLabel,
       * else goto failLabel. *)
      CheckBoundary of
      {
        block: value,
        offset: value,
        passLabel: label,
        failLabel: label,
        loc: loc
      }
*)
    | (*%
       * @format({label, knownDestinations: dest dests, loc})
       * { "goto" +d label ";" }
       * 5[ +1 "-->" +d {dests(dest)("," +1)} ]
       *)
      Jump of
      {
        label: value,
        knownDestinations: label list,
        loc: loc
      }
    | (*%
       * @format({change: ch, previousHandler, newHandler, tryBlock, loc})
       * { "ChangeHandler" + ch +2 "from" + previousHandler:handler'
       *                        +2 "to" + newHandler:handler'
       *                        +2 "; goto" + tryBlock }
       *)
      ChangeHandler of
      {
        change: handlerChange,
        previousHandler: handler,
        newHandler: handler,
        tryBlock: label,
        loc: loc
      }

  (*%
   * @formatter(enclosedOpt) SmlppgUtil.formatEnclosedOpt
   *)
  datatype blockKind =
      (* just an ordinary basic block *)
      Basic
    | (* *)
      Branch
    | (* *)
      Merge
    | (* loop header *)
      Loop
    | (* continuation of local call *)
      LocalCont
    | (*%
       * @format(arg)
       * "Handler" + arg
       *)
      Handler of argInfo
    | (*%
       * @format({argTyList, resultTyList, env: env envopt:enclosedOpt,
                  argVarList: param params})
       * "FunEntry" 2[ +1
       * "#" + { envopt(env)("env = ", "," +1)
       *         "params = (" 4[ 2 params(param)("," +2) ] 2 ")" } ]
       *)
      FunEntry of {argTyList: ty list, resultTyList: ty list,
                   env: argInfo option, argVarList: argInfo list}
    | (* *)
      CodeEntry
    | (*%
       * @format({argTyList, resultTyList, env: env envopt:enclosedOpt,
       *          argVarList: param params, attributes})
       * "ExtFunEntry" 2[ +1
       * "#" + { envopt(env)("env = ", "," +1)
       *         "params = (" 4[ 2 params(param)("," +2) ] 2 ")"} +1
       * "#" + attributes ]
       *)
      ExtFunEntry of {argTyList: ty list, resultTyList: ty list,
                      env: argInfo option, argVarList: argInfo list,
                      attributes: ffiAttributes}
    | (* *)
      CheckFailed

  (*%
   * @formatter(VarID.Map.map) formatIDMap
   *)
  type basicBlock =
      (*%
       * @format({label,
       *          blockKind,
       *          handler,
       *          instructionList: insn insns,
       *          loc})
       * (* loc 1 *)
       * "BEGIN" + label + ":" + blockKind
       * 2[ + handler
       *    1 insns(insn)(1)
       *  ]
       *)
      {
        label: label,
        blockKind: blockKind,
        handler: handler,
        instructionList: instruction list,
        loc: loc
      }

  (*% *)
  datatype frameBitmapSource =
      (*% @format(x) x *)
      BitParam of argInfo
    | (*% @format(env * off) env "[" off "]" *)
      EnvBitmap of argInfo * word

  (*% @formatter(option) SmlppgUtil.formatOptWithDefault *)
  type frameBitmap =
      (*%
       * @format({source, bits:bit bits})
       * source ":[" { bits(bit)("," +d) "]" }
       * @format:bit(bi bo) bo(bi)("_")
       *)
      {
        source: frameBitmapSource,
        (* bits makes correspondence between tid and bit of frame bitmap.
         * If a tid is n-th (starting with 0) element of bits, frame bit
         * of that tid is n-th bit (LSB is 0) of source.
         * NONE means that there is no tid corresponding to this bit.
         *)
        bits: tid option list
      }

  (*%
   * @formatter(IEnv.map) formatIEnv
   * @formatter(enclosedList) SmlppgUtil.formatListWithEnclosureIfMoreThanOne
   *)
  type cluster =
       (*%
        * @format({frameBitmap: bitmap bitmaps:enclosedList,
        *          name,
        *          body: block blocks,
        *          loc})
        * +1 "cluster" + name +1
        * "{"
        *    2[
        *       +1 "loc" + "=" + loc
        *       +1 "bitmap:"
        *       2[ bitmaps(bitmap)(,1,) ]
        *       +1 1 blocks(block)(1 1)
        *     ] 1
        * "}"
        *)
       {
         frameBitmap: frameBitmap list,
         name: clusterId,
         body: basicBlock list,
         loc: loc
       }

  (*% *)
  datatype global =
      (*% @format(l) ".alias" + l *)
      GlobalAlias of globalLabel
    | (*% @format(x) x *)
      GlobalData of data

  (*%
   * @formatter(VarID.Map.map) formatIDMap
   * @formatter(SEnv.map) formatSEnv
   * @formatter(option) SmlppgUtil.formatOptWithDefault
   *)
  type program =
       (*%
        * @format({toplevel: toplevel tpopt,
        *          clusters: cluster clusters,
        *          constants: const consts,
        *          globals: global globals})
        * "Toplevel:" tpopt(toplevel)("NONE") 1
        * "Clusters:"
        * 2[ clusters(cluster)(+1) ]
        * +1 1 "Constants:"
        * 2[ consts(const)(1 "c",+ "=" +,";") ]
        * +1 1 "Globals:"
        * 2[ globals(global)(1, ":" +,) ]
        *
        * @format:toplevel({clusterId, entry})
        * "(" clusterId "," + entry ")"
        *)
       {
         toplevel: {clusterId: clusterId, entry: label} option,
         clusters: cluster list,
         constants: data VarID.Map.map,  (* constId -> data *)
         globals: global SEnv.map             (* globalLabel -> global *)
       }

  end
end
