_require "../../../basis.smi"
_require "../../../reifiedterm/main/ReifiedTerm.ppg.smi"
_require "../../../smlformat-lib.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"

_require "../../types/main/BuiltinEnv.smi"
_require "../../types/main/Types.ppg.smi"
_require "../../types/main/IDCalc.ppg.smi"
_require "../../types/main/EvalIty.smi"
_require "../../typedcalc/main/TypedCalc.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../control/main/Control.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../util/main/TermFormat.smi"
_require "../../nameevaluation/main/NameEvalEnv.ppg.smi"

structure ReifiedTermData =
struct
  val reifiedTerm : Types.ty option ref
  val idstatus : Types.ty option ref
  val tstr : Types.ty option ref
  val varE : Types.ty option ref
  val tyE : Types.ty option ref
  val env : Types.ty option ref
  val strentry : Types.ty option ref
  val funE : Types.ty option ref
  val sigentry : Types.ty option ref
  val sigE : Types.ty option ref
  val topEnv : Types.ty option ref
  val makeArrayTerm : (TypedCalc.tpexp * Types.ty) option ref
  val makeListTerm : (TypedCalc.tpexp * Types.ty) option ref
  val makeConsTerm : (TypedCalc.tpexp * Types.ty) option ref
  val makeFieldTerm : (TypedCalc.tpexp * Types.ty) option ref
  val makeConsField : (TypedCalc.tpexp * Types.ty) option ref
  val fieldNil : (TypedCalc.tpexp * Types.ty) option ref
  val reifiedTermNil : (TypedCalc.tpexp * Types.ty) option ref
  val makeEXVAR : (TypedCalc.tpexp * Types.ty) option ref
  val makeEXEXN : (TypedCalc.tpexp * Types.ty) option ref
  val makeEXEXNREP : (TypedCalc.tpexp * Types.ty) option ref
  val makeTstr : (TypedCalc.tpexp * Types.ty) option ref
  val idstatusNil : (TypedCalc.tpexp * Types.ty) option ref
  val idstatusCons : (TypedCalc.tpexp * Types.ty) option ref
  val tstrNil : (TypedCalc.tpexp * Types.ty) option ref
  val tstrCons : (TypedCalc.tpexp * Types.ty) option ref
  val makeENV : (TypedCalc.tpexp * Types.ty) option ref
  val makeStrentry : (TypedCalc.tpexp * Types.ty) option ref
  val strentryNil : (TypedCalc.tpexp * Types.ty) option ref
  val strentryCons : (TypedCalc.tpexp * Types.ty) option ref
  val stringNil : (TypedCalc.tpexp * Types.ty) option ref
  val stringCons : (TypedCalc.tpexp * Types.ty) option ref
  val makeSigentry : (TypedCalc.tpexp * Types.ty) option ref
  val sigentryNil : (TypedCalc.tpexp * Types.ty) option ref
  val sigentryCons : (TypedCalc.tpexp * Types.ty) option ref
  val makeReifiedTopenv : (TypedCalc.tpexp * Types.ty) option ref
  val format_topEnv : (TypedCalc.tpexp * Types.ty) option ref
  val printTopEnv : (TypedCalc.tpexp * Types.ty) option ref
  val INTtyRep : Types.conInfo option ref
  val INTINFtyRep : Types.conInfo option ref
  val WORDtyRep : Types.conInfo option ref
  val WORD8tyRep : Types.conInfo option ref
  val CHARtyRep : Types.conInfo option ref
  val STRINGtyRep : Types.conInfo option ref
  val REALtyRep : Types.conInfo option ref
  val REAL32tyRep : Types.conInfo option ref
  val UNITtyRep : Types.conInfo option ref
  val FUNtyRep : Types.conInfo option ref
  val RECORDtyRep : Types.conInfo option ref
  val TUPLEtyRep : Types.conInfo option ref
  val LISTtyRep : Types.conInfo option ref
  val ARRAYtyRep : Types.conInfo option ref
  val CONSTRUCTtyRep : Types.conInfo option ref
  val EXNtyRep : Types.conInfo option ref
  val PTRtyRep : Types.conInfo option ref
  val UNPRINTABLERep : Types.conInfo option ref
  val BUILTINRep : Types.conInfo option ref
  val EXVAR : Types.conInfo option ref
  val EXEXN : Types.conInfo option ref
  val EXEXNREP : Types.conInfo option ref
  val ENV : Types.conInfo option ref
  val init : NameEvalEnv.topEnv -> unit
  val mkConTerm : Types.conInfo * TypedCalc.tpexp option -> TypedCalc.tpexp
  val unprintable : unit -> TypedCalc.tpexp
  val builtin : unit -> TypedCalc.tpexp
  val mkINTtyRepTerm : TypedCalc.tpexp -> TypedCalc.tpexp
  val mkBOOLtyRepTerm : TypedCalc.tpexp -> TypedCalc.tpexp
  val mkINTINFtyRepTerm : TypedCalc.tpexp -> TypedCalc.tpexp
  val mkWORDtyRepTerm : TypedCalc.tpexp -> TypedCalc.tpexp
  val mkWORD8tyRepTerm : TypedCalc.tpexp -> TypedCalc.tpexp
  val mkCHARtyRepTerm : TypedCalc.tpexp -> TypedCalc.tpexp
  val mkSTRINGtyRepTerm : TypedCalc.tpexp -> TypedCalc.tpexp
  val mkREALtyRepTerm : TypedCalc.tpexp -> TypedCalc.tpexp
  val mkREAL32tyRepTerm : TypedCalc.tpexp -> TypedCalc.tpexp
  val mkUNITtyRepTerm : unit -> TypedCalc.tpexp
  val mkFUNtyRepTerm : unit -> TypedCalc.tpexp
  val mkRECORDtyRepTerm : TypedCalc.tpexp -> TypedCalc.tpexp
  val mkTUPLEtyRepTerm : TypedCalc.tpexp -> TypedCalc.tpexp
  val mkLISTtyRepTerm : TypedCalc.tpexp -> TypedCalc.tpexp
  val mkARRAYtyRepTerm : TypedCalc.tpexp -> TypedCalc.tpexp
  val mkCONSTRUCTtyRepTerm : TypedCalc.tpexp -> TypedCalc.tpexp
  val mkEXNtyRepTerm : unit -> TypedCalc.tpexp
  val mkPTRtyRepTerm : unit -> TypedCalc.tpexp
end
