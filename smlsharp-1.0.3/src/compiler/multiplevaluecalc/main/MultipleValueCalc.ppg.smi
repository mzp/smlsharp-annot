_require "../../../basis.smi"
_require "../../../smlformat-lib.smi"

_require "../../absyn/main/Absyn.ppg.smi"
_require "../../annotatedcalc/main/AnnotatedCalc.ppg.smi"
_require "../../annotatedtypes/main/AnnotatedTypes.ppg.smi"
_require "../../constantterm/main/ConstantTerm.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../util/main/SmlppgUtil.ppg.smi"

structure MultipleValueCalc =
struct

  type loc = Loc.loc

  type ty = AnnotatedTypes.ty
  val format_ty
      : ty -> SMLFormat.FormatExpression.expression list

  type varInfo = AnnotatedCalc.varInfo
  val format_varInfo
      : varInfo -> SMLFormat.FormatExpression.expression list

  type exVarInfo = AnnotatedCalc.exVarInfo
  val format_exVarInfo
      : exVarInfo -> SMLFormat.FormatExpression.expression list

  type primInfo = AnnotatedCalc.primInfo
  val format_primInfo
      : primInfo -> SMLFormat.FormatExpression.expression list
  val typedprimInfo
      : primInfo -> SMLFormat.FormatExpression.expression list

  type annotationLabel = AnnotatedTypes.annotationLabel
  val format_annotationLabel
      : annotationLabel -> SMLFormat.FormatExpression.expression list
  val typedannotationLabel
      : annotationLabel -> SMLFormat.FormatExpression.expression list

  type funStatus = AnnotatedTypes.funStatus
  val format_funStatus
      : funStatus -> SMLFormat.FormatExpression.expression list

  type btvEnv = AnnotatedTypes.btvEnv
  val format_btvEnv
      : btvEnv -> SMLFormat.FormatExpression.expression list

  datatype constant = datatype ConstantTerm.constant
  val format_constant
      : constant -> SMLFormat.FormatExpression.expression list

  datatype mvexp =
      MVFOREIGNAPPLY of
      {
        funExp : mvexp,
        foreignFunTy : AnnotatedTypes.foreignFunTy,
        argExpList : mvexp list,
        loc : loc
      }
    | MVEXPORTCALLBACK of
      {
        funExp : mvexp,  (* must be MVFNM *)
        foreignFunTy : AnnotatedTypes.foreignFunTy,
        loc: loc
      }
    | MVTAGOF of {ty : ty, loc : loc}
    | MVSIZEOF of {ty : ty, loc : loc}
    | MVINDEXOF of {label : string, recordTy : ty, loc : loc}
    | MVCONSTANT of {value : constant, loc : loc}
    | MVGLOBALSYMBOL of
      {name:string, kind:Absyn.globalSymbolKind, ty:ty, loc:loc}
    | MVVAR of {varInfo : varInfo, loc : loc}
    | MVEXVAR of {exVarInfo : exVarInfo, loc : loc}
    | MVPRIMAPPLY of
      {
        primInfo : primInfo,
        argExpList : mvexp list,
        instTyList : ty list,
        loc : loc
      }
    | MVAPPM of
      {
        funExp : mvexp,
        funTy : ty,
        argExpList : mvexp list,
        loc : loc
      }
    | MVLET of
      {
        localDeclList : mvdecl list,
        mainExp : mvexp,
        loc : loc
      }
    | MVMVALUES of {expList : mvexp list, tyList : ty list, loc : loc}
    | MVRECORD of
      {
        fields : {label: string, fieldExp: mvexp} list,
        recordTy : ty,
        annotation : annotationLabel,
        isMutable : bool,
        loc : loc
      }
    | MVSELECT of
      {
        recordExp : mvexp,
        indexExp : mvexp,
        label : string,
        recordTy : ty,
        resultTy : ty,
        loc : loc
      }
    | MVMODIFY of
      {
        recordExp : mvexp,
        recordTy : ty,
        indexExp : mvexp,
        label : string,
        valueExp : mvexp,
        valueTy : ty,
        loc : loc
      }
    | MVRAISE of
      {
        argExp : mvexp,
        resultTy : ty,
        loc : loc
      }
    | MVHANDLE of
      {
        exp : mvexp,
        exnVar : varInfo,
        handler : mvexp,
        loc : loc
      }
    | MVFNM of
      {
        argVarList : varInfo list,
        funTy : ty,
        bodyExp : mvexp,
        annotation : annotationLabel,
        loc : loc
      }
    | MVPOLY of
      {
        btvEnv : btvEnv,
        expTyWithoutTAbs : ty,
        exp : mvexp,
        loc : loc
      }
    | MVTAPP of
      {
        exp : mvexp,
        expTy : ty,
        instTyList : ty list,
        loc : loc
      }
    | MVSWITCH of
      {
        switchExp : mvexp,
        expTy : ty,
        branches : {constant : constant , exp : mvexp} list,
        defaultExp : mvexp,
        loc : loc
      }
    | MVCAST of {exp : mvexp, expTy : ty, targetTy : ty, loc : loc}

  and mvdecl =
      MVVAL of
      {
        boundVars : varInfo list,
        boundExp : mvexp,
        loc : loc
      }
    | MVVALREC of
      {
        recbindList : {boundVar : varInfo, boundExp : mvexp } list,
        loc : loc
      }
    | MVEXPORTVAR of {varInfo: varInfo, loc: loc}
    | MVEXTERNVAR of {exVarInfo: exVarInfo, loc: loc}

  val format_mvexp
      : mvexp -> SMLFormat.FormatExpression.expression list
  val typedmvexp
      : mvexp -> SMLFormat.FormatExpression.expression list
  val format_mvdecl
      : mvdecl -> SMLFormat.FormatExpression.expression list
  val typedmvdecl
      : mvdecl-> SMLFormat.FormatExpression.expression list
end
