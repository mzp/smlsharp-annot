structure MVTypeCheckError =
struct

  (***************************************************************************)

  local
    structure AT = AnnotatedTypes
    type longid = Absyn.longid
    structure UE = UserError
    val errorQueue = UE.createQueue ()
  in

  (*%
   * @formatter(AT.ty) AT.format_ty
   *)
  exception
  (*%
   * @format({polyArity, numTyargs})
   * "polytype" +d "arity" +d "and" +d "instance" +d "types" +d "mismatch"
     +1
     "polyArity:" + polyArity
     +1
     "number" +d "of" + "instance" + "types:" + numTyargs
   *)
   InstanceArityMismatch of {polyArity : int, numTyargs:int}
   
   and
  (*%
   * @format({annotation, expType})
   * "expression" + "type" +d "and" +d "annotation" +d "don't" +d "agree"
     +1
     "expression" + "type:" + expType
     +1
     "annotation:" + annotation
   *)
   TypeAndAnnotationMismatch of {annotation: AT.ty, expType : AT.ty }

   and
  (*%
   * @format({consExpTy, newTailExpTy, listTy })
   * "SetTail" + "mismatch."
     +1
     "consExpTy:" + consExpTy
     +1
     "newTailExpTy:" + newTailExpTy
     +1
     "listTy" + listTy
   *)
   SetTailMismatch of {consExpTy: AT.ty, newTailExpTy : AT.ty, listTy:AT.ty }

   and
  (*%
   * @format({funTy, argTyList:argTy argTys})
   * "opetator" +d "and" +d "operand" +d "don't" +d "agree" 
     +1
     "operator" +d "type:" + funTy
     +1
     "operand" +d "types:" + argTys(argTy)(","+d) +d
   *)
   OperatorOperandMismatch of {funTy: AT.ty, argTyList : AT.ty list }

   and
  (*%
   * @format({numArgs, numArgTys})
   * "number" +d "of" +d "arguments" +d "and" +d "arity" +d "don't" +d "agree"
     +1
     "arguments:" + numArgs
     +1
     "arity:" + numArgTys
   *)
   ArgNumAndArgTyListMismatch of {numArgs:int, numArgTys:int}

   and
  (*%
   * @format({argTyList: argTy argTys, argExpTyList:argExpTy argExpTys})
   * "argument" +d "type" +d "annotations" +d "and" +d "argument" +d "types" +d "don't" +d "agree"
     +1
     "annotations:" + argTys(argTy)(","+d)
     +1
     "actuals:" + argExpTys(argExpTy)(","+d)
   *)
   ArgTyListAndArgExpTyListMismatch of {argTyList : AT.ty list, argExpTyList:AT.ty list}
  
   and
   (*%
    * @format(ty) ty + "must" +d "be" +d "a" +d "record" + "type"
    *)
   RecordTermDoNotHaveARecordType of AT.ty

   and
   (*%
    * @format({recordTy, field}) "field" +d field +d "not" +d "found" +d
    *                            "in" + "record" +d "type:" recordTy
    *)
   RecordFieldNotFound of {recordTy:AT.ty, field:string}

   and
   (*%
    * @format({selectorType, recordTy}) "record" +d "type" +d "and" +d "selector" +d
    *                            "type" + "don't" +d "agree:" 
    * +1 "selector:" + selectorType
    * +1 "record" +d "type:" + recordTy
    *)
  InconsistentFieldSelector of {selectorType:AT.ty, recordTy:AT.ty}

   and
   (*%
    * @format({source, target}) "Type" +d "cast" +d "is"  +d "performed"
    * +1 "from:" + source
    * +1 "to:" + target
    *)
   CompilerCast of {source:AT.ty, target:AT.ty}

   and
   (*%
    * @format({tyList:ty tys}) "Single" +d "type" +d "list"  +d "is" +d "incorrect"
    * +1 "Type list:" + tys(ty)(","+d)
    *)
   InvalidSingleTypeList of {tyList : AT.ty list}

   and
   (*%
    * @format({numArgs}) "Multiple" +d "value" +d "expression"  +d "has" +d "too" +d "few" +d "elements"
    * +1 "number of elements:" + numArgs
    *)
   MultipleValueExpHasTooFewElements of {numArgs : int}

  fun initializeTypecheckError () = UE.clearQueue errorQueue
  fun getDiagnoses () = UE.getDiagnoses errorQueue
  val enqueueDiagnosis = UE.enqueueDiagnosis errorQueue

end
end
