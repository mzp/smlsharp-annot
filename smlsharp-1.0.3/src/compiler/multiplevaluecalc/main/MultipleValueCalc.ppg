(**
 * @copyright (c) 2006, Tohoku University.
 * @author Huu-Duc Nguyen
 * @version $Id: MultipleValueCalc.ppg,v 1.31 2008/08/06 17:23:40 ohori Exp $
 *)

structure MultipleValueCalc =
struct

  type loc = Loc.loc

  (*%
   * @formatter(AnnotatedTypes.ty) AnnotatedTypes.format_ty
   *)
  (*%
   * @prefix typed
   * @formatter(AnnotatedTypes.ty) AnnotatedTypes.format_ty
   *)
  type ty = AnnotatedTypes.ty

  (*%
   * @formatter(AnnotatedCalc.varInfo) AnnotatedCalc.format_varInfo
   *)
  (*%
   * @prefix typed
   * @formatter(AnnotatedCalc.varInfo) AnnotatedCalc.format_varInfo
   *)
  type varInfo = AnnotatedCalc.varInfo

  (*%
   * @formatter(AnnotatedCalc.exVarInfo) AnnotatedCalc.format_exVarInfo
   *)
  (*%
   * @prefix typed
   * @formatter(AnnotatedCalc.exVarInfo) AnnotatedCalc.format_exVarInfo
   *)
  type exVarInfo = AnnotatedCalc.exVarInfo

  (*%
   * @formatter(AnnotatedCalc.primInfo) AnnotatedCalc.format_primInfo
   *)
  (*%
   * @prefix typed
   * @formatter(AnnotatedCalc.primInfo) AnnotatedCalc.formatWithType_primInfo
   *)
  type primInfo = AnnotatedCalc.primInfo

  (*%
   * @formatter(AnnotatedTypes.annotationLabel)
   * AnnotatedTypes.format_annotationLabel
   *)
  (*%
   * @prefix typed
   * @formatter(AnnotatedTypes.annotationLabel)
   * AnnotatedTypes.format_annotationLabel
   *)
  type annotationLabel = AnnotatedTypes.annotationLabel

  (*%
   * @formatter(AnnotatedTypes.funStatus) AnnotatedTypes.format_funStatus
   *)
  (*%
   * @prefix typed
   * @formatter(AnnotatedTypes.funStatus) AnnotatedTypes.format_funStatus
   *)
  type funStatus = AnnotatedTypes.funStatus

  (*%
   * @formatter(AnnotatedTypes.btvEnv) AnnotatedTypes.format_btvEnv
   *)
  (*%
   * @prefix typed
   * @formatter(AnnotatedTypes.btvEnv) AnnotatedTypes.format_btvEnv
   *)
  type btvEnv = AnnotatedTypes.btvEnv

  (*%
   * @formatter(ConstantTerm.constant) ConstantTerm.format_constant
   *)
  (*%
   * @prefix typed
   * @formatter(ConstantTerm.constant) ConstantTerm.format_constant
   *)
  datatype constant = datatype ConstantTerm.constant

  (*%
   * @formatter(listWithEnclosureOne) SmlppgUtil.formatListWithEnclosureOne
   * @formatter(bool) SmlppgUtil.formatBinaryChoice
   * @formatter(AnnotatedTypes.foreignFunTy) AnnotatedTypes.format_foreignFunTy
   *)
  (*%
   * @prefix typed
   * @formatter(listWithEnclosureOne) SmlppgUtil.formatListWithEnclosureOne
   * @formatter(listWithEnclosure) SmlppgUtil.formatListWithEnclosure
   * @formatter(bool) SmlppgUtil.formatBinaryChoice
   * @formatter(recordTy) TermFormat.formatRecordTy
   * @formatter(AnnotatedTypes.foreignFunTy) AnnotatedTypes.format_foreignFunTy
   *)
  datatype mvexp =
      (*%
       * @format({funExp,
       *          foreignFunTy,
       *          argExpList: arg args:listWithEnclosureOne,
       *          loc:loc})
       * L9{
       *   "FOREIGNAPPLY(" !N0{ funExp } ")"
       *   2[ +1 args(arg)("," +2, "{", "}") ]
       * }
       *)
      (*%
       * @prefix typed
       * @format({funExp,
       *          foreignFunTy,
       *          argExpList: arg args:listWithEnclosureOne,
       *          loc:loc})
       * L9{
       *   L2{
       *     "FOREIGNAPPLY(" !N0{ funExp } ")"
       *     +1 "as" +d foreignFunTy
       *   }
       *   2[ +1 args(arg)("," +2, "{", "}") ]
       * }
       *)
      MVFOREIGNAPPLY of
      {
        funExp : mvexp,
        foreignFunTy : AnnotatedTypes.foreignFunTy,
        argExpList : mvexp list,
        loc : loc
      }
    | (*%
       * @format({funExp, foreignFunTy, loc})
       * "EXPORTCALLBACK(" !N0{ funExp } ")"
       *)
      (*%
       * @prefix typed
       * @format({funExp, foreignFunTy, loc})
       * L2{
       *   "EXPORTCALLBACK(" !N0{ funExp } ")"
       *   +1 "as" +d foreignFunTy
       * }
       *)
      MVEXPORTCALLBACK of
      {
        funExp : mvexp,  (* must be MVFNM *)
        foreignFunTy : AnnotatedTypes.foreignFunTy,
        loc: loc
      }
    | (*%
       * @format({ty, loc}) "_tagof(" !N0{ ty } ")"
       *)
      (*%
       * @prefix typed
       * @format({ty, loc}) "_tagof(" !N0{ ty } ")"
       *)
      MVTAGOF of {ty : ty, loc : loc}
    | (*%
       * @format({ty, loc}) "_sizeof(" !N0{ ty } ")"
       *)
      (*%
       * @prefix typed
       * @format({ty, loc}) "_sizeof(" !N0{ ty } ")"
       *)
      MVSIZEOF of {ty : ty, loc : loc}
    | (*%
       * @format({label, recordTy, loc})
       * "_indexof(" !N0{ label ")" }
       *)
      (*% @prefix typed
       * @format({label, recordTy, loc})
       * "_indexof(" !N0{ label "," +1 recordTy ")" }
       *)
      MVINDEXOF of {label : string, recordTy : ty, loc : loc}
    | (*%
       * @format({value, loc}) value
       *)
      (*%
       * @prefix typed
       * @format({value, loc}) value
       *)
      MVCONSTANT of {value : constant, loc : loc}
    | (*%
       * @format({name, kind, ty, loc}) name ":" ty
       *)
      (*%
       * @prefix typed
       * @format({name, kind, ty, loc}) ty
       *)
      MVGLOBALSYMBOL of
      {name:string, kind:Absyn.globalSymbolKind, ty:ty, loc:loc}
    | (*%
       * @format({varInfo, loc}) varInfo
       *)
      (*%
       * @prefix typed
       * @format({varInfo, loc}) varInfo
       *)
      MVVAR of {varInfo : varInfo, loc : loc}
    | (*%
       * @format({exVarInfo, loc}) exVarInfo
       *)
      (*%
       * @prefix typed
       * @format({exVarInfo, loc}) exVarInfo
       *)
      MVEXVAR of {exVarInfo : exVarInfo, loc : loc}
    | (*%
       * @format({primInfo,
       *          argExpList:arg args,
       *          instTyList:ty tys:listWithEnclosure,
       *          loc})
       * L9{ primInfo
       *     2[ 1 "(" !N0{ args(arg)("," +2) } ")" ]
       * }
       *)
      (*%
       * @prefix typed
       * @format({primInfo,
       *          argExpList:arg args,
       *          instTyList:ty tys:listWithEnclosure,
       *          loc})
       * L9{ primInfo
       *     2[ 1 "(" !N0{ tys(ty)("," +2, "{", "}" "," +1)
       *              !N0{ args(arg)("," +2) } } ")"
       *      ] }
       *)
      MVPRIMAPPLY of
      {
        primInfo : primInfo,
        argExpList : mvexp list,
        instTyList : ty list,
        loc : loc
      }
    | (*%
       * @format({funExp, funTy,
       *          argExpList:arg args:listWithEnclosureOne, loc})
       * L9{ funExp 2[ +1 args(arg)("," +2, "{", "}") ] }
       *)
      (*%
       * @prefix typed
       * @format({funExp, funTy,
       *          argExpList:arg args:listWithEnclosureOne, loc})
       * L9{ funExp 2[ +1 args(arg)("," +2, "{", "}") ] }
       *)
      MVAPPM of
      {
        funExp : mvexp,
        funTy : ty,
        argExpList : mvexp list,
        loc : loc
      }
    | (*%
       * @format({localDeclList : dec decs, mainExp, loc})
       * N1{ !N0{
       *   "let"
       *   2[ +1 decs(dec)(+1) ]
       *   +1 "in"
       *   2[ +1 mainExp ]
       *   +1 "end"
       * } }
       *)
      (*%
       * @prefix typed
       * @format({localDeclList : dec decs, mainExp, loc})
       * N1{ !N0{
       *   "let"
       *   2[ +1 decs(dec)(+1) ]
       *   +1 "in"
       *   2[ +1 mainExp ]
       *   +1 "end"
       * } }
       *)
      MVLET of
      {
        localDeclList : mvdecl list,
        mainExp : mvexp,
        loc : loc
      }
    | (*%
       * @format({expList:field fields, tyList, loc})
       * { "{" 2[ 1 !N0{ fields(field)("," +1) } ] 1 "}" }
       *)
      (*%
       * @prefix typed
       * @format({expList:field fields, tyList, loc})
       * { "{" 2[ 1 !N0{ fields(field)("," +1) } ] 1 "}" }
       *)
      MVMVALUES of {expList : mvexp list, tyList : ty list, loc : loc}
    | (*%
       * @format({fields:field fields, recordTy, annotation, isMutable, loc})
       * !N0{ "(" 2[ 1 fields(field)("," +1) ] 1 ")"
       *          d "^" annotation }
       * @format:field({label, fieldExp})
       * label "=" fieldExp
       *)
      (*%
       * @prefix typed
       * @format({fields:field fields, recordTy, annotation, isMutable, loc})
       * L2{ !N0{ "(" 2[ 1 fields(field)("," +1) ] 1 ")"
       *          d "^" annotation }
       *    +1 ":" +d recordTy }
       * @format:field({label, fieldExp})
       * label "=" fieldExp
       *)
      MVRECORD of
      {
        fields : {label: string, fieldExp: mvexp} list,
        recordTy : ty,
        annotation : annotationLabel,
        isMutable : bool,
        loc : loc
      }
    | (*%
       * @format({recordExp, indexExp, label, recordTy, resultTy, loc})
       * L9{ recordExp 2[ 1 "[" indexExp "]" ] }
       *)
      (*%
       * @prefix typed
       * @format({recordExp, indexExp, label, recordTy, resultTy, loc})
       * L2{
       *   L9{ recordExp 2[ 1 "[" indexExp "]" ] }
       *   +1 ":" +d resultTy
       * }
       *)
      MVSELECT of
      {
        recordExp : mvexp,
        indexExp : mvexp,
        label : string,
        recordTy : ty,
        resultTy : ty,
        loc : loc
      }
    | (*%
       * @format({recordExp, recordTy, indexExp, label, valueExp, valueTy,
       *          loc})
       * L9{
       *   recordExp
       *   2[ +1 "#" +d
       *      !N0{ "{"
       *           2[ 1 indexExp + "=" 2[ +1 valueExp ] ]
       *           1 "}" } ]
       * }
       *)
      (*%
       * @prefix typed
       * @format({recordExp, recordTy, indexExp, label, valueExp, valueTy,
       *          loc})
       * L9{
       *   recordExp
       *   2[ +1 "#" +d
       *      !N0{ "{"
       *           2[ 1 indexExp + "=" 2[ +1 valueExp ] ]
       *           1 "}" } ]
       * }
       *)
      MVMODIFY of
      {
        recordExp : mvexp,
        recordTy : ty,
        indexExp : mvexp,
        label : string,
        valueExp : mvexp,
        valueTy : ty,
        loc : loc
      }
    | (*%
       * @format({argExp, resultTy, loc})
       * N1{ "raise" 2[ +1 argExp ] }
       *)
      (*%
       * @prefix typed
       * @format({argExp, resultTy, loc})
       * L2{
       *   N1{ "raise" 2[ +1 argExp ] }
       *   +1 ":" +d resultTy
       * }
       *)
      MVRAISE of
      {
        argExp : mvexp,
        resultTy : ty,
        loc : loc
      }
    | (*%
       * @format({exp, exnVar, handler, loc})
       * N1{ !N0{
       *   "try"
       *   2[ +1 exp ]
       *   +1 R1{ "handle" +d !N0{ exnVar } +d "=>" 2[ +1 handler ] }
       * } }
       *)
      (*%
       * @prefix typed
       * @format({exp, exnVar, handler, loc})
       * N1{ !N0{
       *   "try"
       *   2[ +1 exp ]
       *   +1 R1{ "handle" +d !N0{ exnVar } +d "=>" 2[ +1 handler ] }
       * } }
       *)
      MVHANDLE of
      {
        exp : mvexp,
        exnVar : varInfo,
        handler : mvexp,
        loc : loc
      }
    | (*%
       * @format({argVarList: arg args:listWithEnclosureOne,
       *         funTy, bodyExp, annotation, loc})
       * R1{
       *   "fn"
       *   +d args(arg)("," +2, "{", "}")
       *   +d "=>"
       *   2[ +1 bodyExp ]
       * }
       *)
      (*%
       * @prefix typed
       * @format({argVarList: arg args,
       *         funTy, bodyExp, annotation, loc})
       * R1{
       *   "fn" "^" annotation
       *   2[ +1 ":" +d N10{ funTy } ]
       *   +1 "{" !N0{ args(arg)("," +2) } "}"
       *   +d "=>"
       *   2[ +1 bodyExp ]
       * }
       *)
      MVFNM of
      {
        argVarList : varInfo list,
        funTy : ty,
        bodyExp : mvexp,
        annotation : annotationLabel,
        loc : loc
      }
    | (*%
       * @format({btvEnv:btvEnv, expTyWithoutTAbs, exp, loc})
       * !N0{ "POLY[" 2[ 1 exp ] 1 "]" }
       *)
      (*%
       * @prefix typed
       * @format({btvEnv:btvEnv, expTyWithoutTAbs, exp, loc})
       * !N0{ "[" btvEnv "." 2[ 1 exp ] 1 "]" }
       *)
      MVPOLY of
      {
        btvEnv : btvEnv,
        expTyWithoutTAbs : ty,
        exp : mvexp,
        loc : loc
      }
    | (*%
       * @format({exp, expTy,
       *          instTyList:tyArg tyArgs:listWithEnclosureOne,
       *          loc})
       * L9{ exp 2[ +1 "{TAPP}" ] }
       *)
      (*%
       * @prefix typed
       * @format({exp, expTy,
       *          instTyList:tyArg tyArgs:listWithEnclosureOne,
       *          loc})
       * L9{ exp 2[ +1 tyArgs(tyArg)("," +2, "{", "}") ] }
       *)
      MVTAPP of
      {
        exp : mvexp,
        expTy : ty,
        instTyList : ty list,
        loc : loc
      }
    | (*%
       * @format({switchExp, expTy, branches:rule rules, defaultExp, loc})
       * N1{ !N0{
       *   { "switch" 2[ +1 switchExp ] }
       *   +1 "of" +d rules(rule)(+1 " |" +d)
       *   +1 " |" +d R1{ "_" +d "=>" +1 defaultExp }
       * } }
       *
       * @format:rule({constant, exp})
       * R1{ constant +d "=>" +1 exp }
       *)
      (*%
       * @prefix typed
       * @format({switchExp, expTy, branches:rule rules, defaultExp, loc})
       * N1{ !N0{
       *   { "switch" 2[ +1 switchExp ] }
       *   +1 "of" +d rules(rule)(+1 " |" +d)
       *   +1 " |" +d R1{ "_" +d "=>" +1 defaultExp }
       * } }
       *
       * @format:rule({constant, exp})
       * R1{ constant +d "=>" +1 exp }
       *)
      MVSWITCH of
      {
        switchExp : mvexp,
        expTy : ty,
        branches : {constant : constant , exp : mvexp} list,
        defaultExp : mvexp,
        loc : loc
      }
    | (*%
       * @format({exp, expTy, targetTy, loc})
       * "cast" "(" !N0{ exp } ")"
       *)
      (*%
       * @prefix typed
       * @format({exp, expTy, targetTy, loc})
       * L2{
       *   "cast" "(" !N0{ exp } ")"
       *   2[ +1 "to" +d targetTy ]
       * }
       *)
      MVCAST of {exp : mvexp, expTy : ty, targetTy : ty, loc : loc}

  and mvdecl =
      (*%
       * @format({boundVars:var vars:listWithEnclosureOne, boundExp, loc})
       * !N0{ "val" +d { vars(var)("," +1, "{", "}") +d "=" }
       *      2[ +1 boundExp ] }
       *)
      (*%
       * @prefix typed
       * @format({boundVars:var vars:listWithEnclosureOne, boundExp, loc})
       * !N0{ "val" +d { vars(var)("," +1, "{", "}") +d "=" }
       *      2[ +1 boundExp ] }
       *)
      MVVAL of
      {
        boundVars : varInfo list,
        boundExp : mvexp,
        loc : loc
      }
    | (*%
       * @format({recbindList:bind binds,loc})
       * !N0{ "val" +d "rec" +d binds(bind)(+1 "and" +d) }
       *
       * @format:bind({boundVar, boundExp})
       * { boundVar +d "=" }
       * 2[ +1 boundExp ]
       *)
      (*%
       * @prefix typed
       * @format({recbindList:bind binds,loc})
       * !N0{ "val" +d "rec" +d binds(bind)(+1 "and" +d) }
       *
       * @format:bind({boundVar, boundExp})
       * { boundVar +d "=" }
       * 2[ +1 boundExp ]
       *)
      MVVALREC of
      {
        recbindList : {boundVar : varInfo, boundExp : mvexp } list,
        loc : loc
      }
    | (*%
       * @format({varInfo, loc})
       * "export" +d "val" +d varInfo
       *)
      MVEXPORTVAR of {varInfo: varInfo, loc: loc}
    | (*%
       * @format({exVarInfo, loc})
       * "extern" +d "val" +d exVarInfo
       *)
      MVEXTERNVAR of {exVarInfo: exVarInfo, loc: loc}

end
