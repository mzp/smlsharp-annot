(**
 * @copyright (c) 2006, Tohoku University.
 * @author Huu-Duc Nguyen
 * @version $Id: AnnotatedCalc.ppg,v 1.24 2008/08/06 17:23:39 ohori Exp $
 *)

structure AnnotatedCalc =
struct

  type loc = Loc.loc

  (*%
   * @formatter(tyformat) AnnotatedTypes.format_ty
   *)
  type ty =
      (*%
       * @format(ty:tyformat) ty
       *)
      AnnotatedTypes.ty

  (*%
   * @formatter(IDCalc.path) IDCalc.format_path
   * @formatter(VarID.id) VarID.format_id
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(IDCalc.path) IDCalc.format_path
   * @formatter(VarID.id) VarID.format_id
   * @formatter(ty) format_ty
   *)
  type varInfo =
      (*%
       * @format({path, id, ty}) path "(" id ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({path, id, ty}) L2{ path "(" id ")" +1 ":" +d ty }
       *)
      {path: IDCalc.path, id: VarID.id, ty: ty}

  (*%
   * @formatter(IDCalc.path) IDCalc.format_path
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(IDCalc.path) IDCalc.format_path
   * @formatter(ty) format_ty
   *)
  type exVarInfo =
      (*%
       * @format({path, ty}) path
       *)
      (*%
       * @prefix formatWithType_
       * @format({path, ty}) L2{ path +1 ":" +d ty }
       *)
      {path: IDCalc.path, ty: ty}

  (*%
   * @formatter(BuiltinPrimitive.primitive) BuiltinPrimitive.format_primitive
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(BuiltinPrimitive.primitive) BuiltinPrimitive.format_primitive
   * @formatter(ty) format_ty
   *)
  type primInfo =
      (*%
       * @format({primitive, ty}) primitive
       *)
      (*%
       * @prefix formatWithType_
       * @format({primitive, ty})
       * L2{ primitive +1 ":" +d ty }
       *)
      {primitive : BuiltinPrimitive.primitive, ty : ty}

  (*%
   * @prefix formatWithType_
   * @formatter(AnnotatedTypes.annotationLabel)
   * AnnotatedTypes.format_annotationLabel
   *)
  type annotationLabel =
      (*%
       * @format(value) value
       *)
      AnnotatedTypes.annotationLabel

  (*%
   * @formatter(AnnotatedTypes.btvEnv) AnnotatedTypes.format_btvEnv
   *)
  type btvEnv =
      AnnotatedTypes.btvEnv

  (*%
   * @formatter(ConstantTerm.constant) ConstantTerm.format_constant
   *)
  datatype constant = datatype ConstantTerm.constant

  (*%
   * @formatter(appList) TermFormat.formatAppList
   * @formatter(decList) TermFormat.formatDeclList
   * @formatter(caseList) TermFormat.formatCaseList
   * @formatter(enclosedList) TermFormat.formatEnclosedList
   * @formatter(ifCons) TermFormat.formatIfCons
   * @formatter(formatRecordExp) TermFormat.formatRecordExp
(*
   * @formatter(withType) formatWithType_varInfo
*)
   * @formatter(withType) format_varInfo
   * @formatter(extendBtvEnv) TermFormat.extendBtvEnv
   * @formatter(AnnotatedTypes.foreignFunTy) AnnotatedTypes.format_foreignFunTy
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(appList) TermFormat.formatAppList
   * @formatter(decList) TermFormat.formatDeclList
   * @formatter(caseList) TermFormat.formatCaseList
   * @formatter(enclosedList) TermFormat.formatEnclosedList
   * @formatter(ifCons) TermFormat.formatIfCons
   * @formatter(formatRecordExp) TermFormat.formatRecordExp
   * @formatter(extendBtvEnv) TermFormat.extendBtvEnv
   * @formatter(ty) format_ty
   * @formatter(constant) format_constant
   * @formatter(btvEnv) format_btvEnv
   * @formatter(AnnotatedTypes.foreignFunTy) AnnotatedTypes.format_foreignFunTy
   *)
  datatype acexp =
      (*%
       * @format({funExp, foreignFunTy, argExpList: arg args, loc})
       * L8{ 2[
       *   "_FFIAPPLY"
       *   +1 funExp
       *   +1 args:appList(arg)("(",",",")")
       * ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({funExp, foreignFunTy, argExpList: arg args, loc})
       * L8{ 2[
       *   "_FFIAPPLY"
       *   +1 L2{ funExp +1 "as" +d foreignFunTy }
       *   +1 args:appList(arg)("(",",",")")
       * ] }
       *)
      ACFOREIGNAPPLY of
      {
        funExp : acexp,
        foreignFunTy : AnnotatedTypes.foreignFunTy,
        argExpList : acexp list,
        loc : loc
      }
    | (*%
       * @format({funExp, foreignFunTy, loc})
       * L8{ 2[ "_CALLBACK" +1 funExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({funExp, foreignFunTy, loc})
       * L8{ 2[ "_CALLBACK"
       *        +1 L2{ funExp +1 "as" +d foreignFunTy } ] }
       *)
      ACEXPORTCALLBACK of
      {
        funExp : acexp,  (* must be ACFNM *)
        foreignFunTy : AnnotatedTypes.foreignFunTy,
        loc: loc
      }
    | (*%
       * @format({ty, loc})
       * "_tagof(" ty ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({ty, loc})
       * "_tagof(" ty ")"
       *)
      ACTAGOF of {ty : ty, loc : loc}
    | (*%
       * @format({ty, loc})
       * "_sizeof(" ty ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({ty, loc})
       * "_sizeof(" ty ")"
       *)
      ACSIZEOF of {ty : ty, loc : loc}
    | (*%
       * @format({label, recordTy, loc})
       * "_indexof(" !N0{ label "," +1 recordTy ")" }
       *)
      (*%
       * @prefix formatWithType_
       * @format({label, recordTy, loc})
       * "_indexof(" !N0{ label "," +1 recordTy ")" }
       *)
      ACINDEXOF of {label : string, recordTy : ty, loc : loc}
    | (*%
       * @format({value, loc}) value
       *)
      (*%
       * @prefix formatWithType_
       * @format({value, loc}) value
       *)
      ACCONSTANT of {value : constant, loc : loc}
    | (*%
       * @format({name, kind, ty, loc})
       * "_GLOBALSYMBOL(" !N0{ name +1 ":" +d ty } ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({name, kind, ty, loc})
       * "_GLOBALSYMBOL(" !N0{ name +1 ":" +d ty } ")"
       *)
      ACGLOBALSYMBOL of
      {name:string, kind:Absyn.globalSymbolKind, ty:ty, loc:loc}
    | (*%
       * @format({varInfo, loc}) varInfo
       *)
      (*%
       * @prefix formatWithType_
       * @format({varInfo, loc}) varInfo
       *)
      ACVAR of {varInfo : varInfo, loc : loc}
    | (*%
       * @format({exVarInfo, loc}) "EXVAR(" !N0{ exVarInfo } ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({exVarInfo, loc}) "EXVAR(" !N0{ exVarInfo } ")"
       *)
      ACEXVAR of {exVarInfo : exVarInfo, loc : loc}
(*
    | (*%
       * @format({arrayExp, indexExp, elementTy, loc})
       * "arraySub(" arrayExp "," indexExp ")" ":" elementTy
       *)
      ACGETFIELD of
      {
        arrayExp : acexp,
        indexExp : acexp,
        elementTy : ty,
        loc : loc
      }
    | (*%
       * @format({valueExp, arrayExp, indexExp, elementTy, loc})
       * "SetField"
       * + arrayExp "[" indexExp "]" "=" valueExp
       *)
      ACSETFIELD of
      {
        valueExp : acexp,
        arrayExp : acexp,
        indexExp : acexp,
        elementTy : ty,
        loc: loc
      }
    | (*%
       * @format({consExp, newTailExp, listTy, consRecordTy, tailLabel, loc})
       * "SetTail"
       * + consExp ":" consRecordTy  "[" tailLabel "]" "=" newTailExp
       *)
      ACSETTAIL of
      {
        consExp : acexp,
        newTailExp : acexp,
        listTy : ty,
        consRecordTy : ty,
        tailLabel : string,
        loc: loc
      }
    | (*%
       * @format({sizeExp, initialValue, elementTy, isMutable, loc})
       * !N0 {
       *       elementTy "[" 2[1 sizeExp ] 1"]" "{" initialValue "}"
       *	 }
       *)
      ACARRAY of
      {
        sizeExp : acexp,
        initialValue : acexp,
        elementTy : ty,
        isMutable : bool,
        loc : loc
      }
    | (*%
       * @format({srcExp, srcIndexExp, dstExp, dstIndexExp, lengthExp,
       *          elementTy, loc})
       * "CopyArray"
       * + srcExp "[" srcIndexExp "]" "<="
       *   dstExp "[" dstIndexExp "]"
       *   "(" lengthExp ")"
       *)
      ACCOPYARRAY of
      {
        srcExp : acexp,
        srcIndexExp : acexp,
        dstExp : acexp,
        dstIndexExp : acexp,
        lengthExp : acexp,
        elementTy : ty,
        loc: loc
      }
*)
    | (*%
       * @format({primInfo, argExpList: arg args, instTyList: ty tys, loc})
       * L8{ 2[ "_PRIMAPPLY(" primInfo ")"
       *        tys:ifCons()( +1 tys:appList(ty)("{",",","}") )
       *        +1 args:appList(arg)("(",",",")") ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({primInfo, argExpList: arg args, instTyList: ty tys, loc})
       * L8{ 2[ "_PRIMAPPLY(" primInfo ")"
       *        tys:ifCons()( +1 tys:appList(ty)("(",",",")") )
       *        +1 args:appList(arg)("(",",",")") ] }
       *)
      ACPRIMAPPLY of
      {
        primInfo : primInfo,
        argExpList : acexp list,
        instTyList : ty list,
        loc : loc
      }
    | (*%
       * @format({funExp, funTy, argExpList: arg args, loc})
       * L8{ 2[
       *   funExp
       *   +1 args:appList(arg)("{",",","}")
       * ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({funExp, funTy, argExpList: arg args, loc})
       * L8{ 2[
       *   L2{ funExp +1 ":" +d funTy }
       *   +1 args:appList(arg)("{",",","}")
       * ] }
       *)
      ACAPPM of
      {
        funExp : acexp,
        funTy : ty,
        argExpList : acexp list,
        loc : loc
      }
    | (*%
       * @format({localDeclList : dec decs, mainExp, loc})
       * L2{ !N0{
       *   "let" 2[ decs:decList(dec)(+1,+1) ]
       *   +1 "in" 2[ +1 !N0{ mainExp } ]
       *   +1 "end"
       * } }
       *)
      (*%
       * @prefix formatWithType_
       * @format({localDeclList : dec decs, mainExp, loc})
       * L2{ !N0{
       *   "let" 2[ decs:decList(dec)(+1,+1) ]
       *   +1 "in" 2[ +1 !N0{ mainExp } ]
       *   +1 "end"
       * } }
       *)
      ACLET of
      {
        localDeclList : acdecl list,
        mainExp : acexp,
        loc : loc
      }
    | (*%
       * @format({fields:field fields, recordTy, annotation, isMutable, loc})
       * fields:enclosedList(field)("{",",","}")
       * @format:field({label, fieldExp})
       * label "=" 2[ +1 fieldExp ]
       *)
      (*%
       * @prefix formatWithType_
       * @format({fields:field fields, recordTy, annotation, isMutable, loc})
       * L2{ fields:enclosedList(field)("{",",","}")
       *     "^" annotation
       *     +1 ":" +d recordTy }
       * @format:field({label, fieldExp})
       * label "=" 2[ +1 fieldExp ]
       *)
      ACRECORD of
      {
        fields : {label: string, fieldExp: acexp} list,
        recordTy : ty,
        annotation : annotationLabel,
        isMutable : bool,
        loc : loc
      }
    | (*%
       * @format({recordExp, indexExp, label, recordTy, resultTy, loc})
       * L8{ 2[ "#" label
       *        +1 indexExp
       *        +1 recordExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({recordExp, indexExp, label, recordTy, resultTy, loc})
       * L2{
       * L8{ 2[ "#" label
       *        +1 indexExp
       *        +1 L2{ recordExp
       *               +1 ":" +d recordTy } ] }
       * +1 ":" +d resultTy }
       *)
      ACSELECT of
      {
        recordExp : acexp,
        indexExp : acexp,
        label : string,
        recordTy : ty,
        resultTy:ty,
        loc : loc
      }
    | (*%
       * @format({recordExp, recordTy, indexExp, label, valueExp, valueTy, loc})
       * L8{ 2[ recordExp
       *        +1 "#" +d "{"
       *          !N0{ L2{ label +1 "/" +d indexExp } +d "="
       *               2[ +1 valueExp ] } "}" ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({recordExp, recordTy, indexExp, label, valueExp, valueTy, loc})
       * L8{ 2[ L2{ recordExp +1 ":" +d recordTy }
       *        +1 "#" +d "{"
       *          !N0{ L2{ label +1 "/" +d indexExp } +d "="
       *               2[ +1 L2{ valueExp
       *                         +1 ":" +d valueTy } ] } "}" ] }
       *)
      ACMODIFY of
      {
        recordExp : acexp,
        recordTy : ty,
        indexExp : acexp,
        label : string,
        valueExp : acexp,
        valueTy : ty,
        loc : loc
      }
    | (*%
       * @format({argExp, resultTy, loc})
       * R1{ 2[ "raise" +1 argExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({argExp, resultTy, loc})
       * L2{ R1{ 2[ "raise" +1 argExp ] }
       *     +1 ":" +d resultTy }
       *)
      ACRAISE of
      {
        argExp : acexp,
        resultTy : ty,
        loc : loc
      }
    | (*%
       * @format({exp, exnVar, handler, loc})
       * R1{ "_try"
       *     2[ +1 exp ]
       *     +1 "handle" +d { exnVar:withType +1 "=>" }
       *     2[ +1 handler ]
       *     +1 "end" }
       *)
      (*%
       * @prefix formatWithType_
       * @format({exp, exnVar, handler, loc})
       * R1{ "_try"
       *     2[ +1 exp ]
       *     +1 "handle" +d { exnVar +1 "=>" }
       *     2[ +1 handler ]
       *     +1 "end" }
       *)
      ACHANDLE of
      {
        exp : acexp,
        exnVar : varInfo,
        handler : acexp,
        loc : loc
      }
    | (*%
       * @format({argVarList: arg args, funTy, bodyExp, annotation, loc})
       * R1{ "fn" +d args:appList(arg:withType)("{",",","}") +d "=>"
       *     3[ +1 bodyExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({argVarList: arg args, funTy, bodyExp, annotation, loc})
       * L2{
       * R1{ "fn" +d args:appList(arg)("{",",","}") +d "=>"
       *     3[ +1 bodyExp ] }
       * "^" annotation
       * +1 ":" +d funTy }
       *)
      ACFNM of
      {
        argVarList : varInfo list,
        funTy : ty,
        bodyExp : acexp,
        annotation : annotationLabel,
        loc : loc
      }
    | (*%
       * @format({btvEnv:btv, expTyWithoutTAbs, exp, loc})
       * "[" !N0{ btv "."
       *          +1 exp } "]"
       *)
      (*%
       * @prefix formatWithType_
       * @format({btvEnv:btv, expTyWithoutTAbs, exp, loc})
       * "[" !N0{
       *   btv "."
       *   +1 L2{ exp
       *          +1 ":" +d expTyWithoutTAbs }
       * } "]"
       *)
      ACPOLY of
      {
        btvEnv : btvEnv,
        expTyWithoutTAbs : ty,
        exp : acexp,
        loc : loc
      }
    | (*%
       * @format({exp, expTy, instTyList: ty tys, loc})
       * L8{ 2[ exp
       *        +1 tys:enclosedList(ty)("{",",","}") ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({exp, expTy, instTyList: ty tys, loc})
       * L8{ 2[ L2{ exp +1 ":" +d expTy }
       *        +1 tys:enclosedList(ty)("{",",","}") ] }
       *)
      ACTAPP of
      {
        exp : acexp,
        expTy : ty,
        instTyList : ty list,
        loc : loc
      }
    | (*%
       * @format({switchExp, expTy, branches: branch branches, defaultExp, loc})
       * R1{
       *   { 2[ "case" +1 switchExp +1 "of" ] }
       *   branches:caseList(branch)
       *     (2[+1], +1 "|" +d, 2[ "_" +d "=>" +1 defaultExp ])
       * }
       * @format:branch({constant, exp})
       * 2[ constant +d "=>" +1 exp ]
       *)
      (*%
       * @prefix formatWithType_
       * @format({switchExp, expTy, branches: branch branches, defaultExp, loc})
       * R1{
       *   { 2[ "case" +1 L2{ switchExp +1 ":" +d expTy }
       *        +1 "of" ] }
       *   branches:caseList(branch)
       *     (2[+1], +1 "|" +d, 2[ "_" +d "=>" +1 defaultExp ])
       * }
       * @format:branch({constant, exp})
       * 2[ constant +d "=>" +1 exp ]
       *)
      ACSWITCH of
      {
        switchExp : acexp,
        expTy : ty,
        branches : {constant : constant , exp : acexp} list,
        defaultExp : acexp,
        loc : loc
      }
    | (*%
       * @format({exp, expTy, targetTy, loc})
       * "cast" "(" !N0{ exp } ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({exp, expTy, targetTy, loc})
       * "cast" "(" !N0{ L2{ exp +1 ":" +d expTy } +1 ":" +d targetTy } ")"
       *)
      ACCAST of {exp : acexp, expTy : ty, targetTy : ty, loc : loc}

  and acdecl =
      (*%
       * @format({boundVar, boundExp, loc})
       * "val" +d boundVar:withType +d "="
       *   4[ +1 boundExp ]
       *)
      (*%
       * @prefix formatWithType_
       * @format({boundVar, boundExp, loc})
       * "val" +d boundVar +d "="
       *   4[ +1 boundExp ]
       *)
      ACVAL of
      {
        boundVar : varInfo,
        boundExp : acexp,
        loc : loc
      }
    | (*%
       * @format({recbindList: bind binds, loc})
       * binds:decList(bind)("val" +d "rec" +d, +1 "and" +d)
       * @format:bind({boundVar, boundExp})
       * boundVar:withType +d "=" 4[ +1 boundExp ]
       *)
      (*%
       * @prefix formatWithType_
       * @format({recbindList: bind binds, loc})
       * binds:decList(bind)("val" +d "rec" +d, +1 "and" +d)
       * @format:bind({boundVar, boundExp})
       * boundVar +d "=" 4[ +1 boundExp ]
       *)
      ACVALREC of
      {
        recbindList : {boundVar : varInfo, boundExp : acexp } list,
        loc : loc
      }
    | (*%
       * @format({varInfo, loc})
       * "export" +d "val" +d varInfo
       *)
      (*%
       * @prefix formatWithType_
       * @format({varInfo, loc})
       * "export" +d "val" +d varInfo
       *)
      ACEXPORTVAR of {varInfo: varInfo, loc: loc}
    | (*%
       * @format({exVarInfo, loc})
       * "extern" +d "val" +d exVarInfo
       *)
      (*%
       * @prefix formatWithType_
       * @format({exVarInfo, loc})
       * "extern" +d "val" +d exVarInfo
       *)
      ACEXTERNVAR of {exVarInfo: exVarInfo, loc: loc}

end
