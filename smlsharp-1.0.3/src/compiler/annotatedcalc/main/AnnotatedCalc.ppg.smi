_require "../../../basis.smi"
_require "../../../smlformat-lib.smi"

_require "../../absyn/main/Absyn.ppg.smi"
_require "../../annotatedtypes/main/AnnotatedTypes.ppg.smi"
_require "../../builtin/main/BuiltinPrimitive.ppg.smi"
_require "../../constantterm/main/ConstantTerm.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../types/main/IDCalc.ppg.smi"
_require "../../util/main/TermFormat.smi"

structure AnnotatedCalc =
struct
  type loc = Loc.loc
  type ty = AnnotatedTypes.ty
  val format_ty : AnnotatedTypes.ty -> SMLFormat.FormatExpression.expression list
  type varInfo = {id:VarID.id, path:IDCalc.path, ty:ty}
  val format_varInfo : {id:VarID.id, path:string list, ty:'a}
                       -> SMLFormat.BasicFormatters.expression list
  val formatWithType_varInfo : {id:VarID.id, path:string list,
                                ty:AnnotatedTypes.ty}
                               -> SMLFormat.FormatExpression.expression list
  type exVarInfo = {path:IDCalc.path, ty:ty}
  val format_exVarInfo : {path:string list, ty:'a}
                         -> SMLFormat.BasicFormatters.expression list
  val formatWithType_exVarInfo : {path:string list, ty:AnnotatedTypes.ty}
                                 -> SMLFormat.FormatExpression.expression list
  type primInfo = {primitive:BuiltinPrimitive.primitive, ty:ty}
  val format_primInfo : {primitive:BuiltinPrimitive.primitive, ty:'a}
                        -> SMLFormat.FormatExpression.expression list
  val formatWithType_primInfo : {primitive:BuiltinPrimitive.primitive,
                                 ty:AnnotatedTypes.ty}
                                -> SMLFormat.FormatExpression.expression list
  type annotationLabel = AnnotatedTypes.annotationLabel
  val formatWithType_annotationLabel : AnnotationLabelID.id
                                       -> SMLFormat.FormatExpression.expression 
                                            list
  type btvEnv = AnnotatedTypes.btvEnv
  val format_btvEnv : AnnotatedTypes.btvKind BoundTypeVarID.Map.map
                      -> SMLFormat.FormatExpression.expression list
  datatype constant = datatype ConstantTerm.constant
  val format_constant : ConstantTerm.constant
                        -> SMLFormat.FormatExpression.expression list
  datatype acexp
    = ACAPPM of {argExpList:acexp list,
                 funExp:acexp, funTy:ty,
                 loc:loc}
    | ACCAST of {exp:acexp, expTy:ty,
                 loc:loc, targetTy:ty}
    | ACCONSTANT of {loc:loc, value:ConstantTerm.constant}
    | ACEXPORTCALLBACK of {foreignFunTy:AnnotatedTypes.foreignFunTy,
                           funExp:acexp, loc:loc}
    | ACEXVAR of {exVarInfo:exVarInfo, loc:loc}
    | ACFNM of {annotation:annotationLabel,
                argVarList:varInfo list,
                bodyExp:acexp, funTy:ty,
                loc:loc}
    | ACFOREIGNAPPLY of {argExpList:acexp list,
                         foreignFunTy:AnnotatedTypes.foreignFunTy,
                         funExp:acexp, loc:loc}
    | ACGLOBALSYMBOL of {kind:Absyn.globalSymbolKind, loc:loc,
                         name:string, ty:ty}
    | ACHANDLE of {exnVar:varInfo, exp:acexp,
                   handler:acexp, loc:loc}
    | ACINDEXOF of {label:string, loc:loc,
                    recordTy:ty}
    | ACLET of {loc:loc,
                localDeclList:acdecl list,
                mainExp:acexp}
    | ACMODIFY of {indexExp:acexp, label:string,
                   loc:loc, recordExp:acexp,
                   recordTy:ty, valueExp:acexp,
                   valueTy:ty}
    | ACPOLY of {btvEnv:btvEnv, exp:acexp,
                 expTyWithoutTAbs:ty, loc:loc}
    | ACPRIMAPPLY of {argExpList:acexp list,
                      instTyList:ty list, loc:loc,
                      primInfo:primInfo}
    | ACRAISE of {argExp:acexp, loc:loc,
                  resultTy:ty}
    | ACRECORD of {annotation:annotationLabel,
                   fields:{fieldExp:acexp, label:string} list,
                   isMutable:bool, loc:loc,
                   recordTy:ty}
    | ACSELECT of {indexExp:acexp, label:string,
                   loc:loc, recordExp:acexp,
                   recordTy:ty, resultTy:ty}
    | ACSIZEOF of {loc:loc, ty:ty}
    | ACSWITCH of {branches:{constant:ConstantTerm.constant,
                             exp:acexp} list,
                   defaultExp:acexp, expTy:ty,
                   loc:loc, switchExp:acexp}
    | ACTAGOF of {loc:loc, ty:ty}
    | ACTAPP of {exp:acexp, expTy:ty,
                 instTyList:ty list, loc:loc}
    | ACVAR of {loc:loc, varInfo:varInfo}
  and acdecl
	  = ACEXPORTVAR of {loc:loc, varInfo:varInfo}
    | ACEXTERNVAR of {exVarInfo:exVarInfo,
                      loc:loc}
    | ACVAL of {boundExp:acexp, boundVar:varInfo,
                loc:loc}
    | ACVALREC of {loc:loc,
                   recbindList:{boundExp:acexp,
                                boundVar:varInfo} list}
  val format_acexp : acexp -> TermFormat.format
  val format_acdecl : acdecl -> TermFormat.format
  val formatWithType_acexp : acexp
                             -> SMLFormat.FormatExpression.expression list
  val formatWithType_acdecl : acdecl -> TermFormat.format
end
