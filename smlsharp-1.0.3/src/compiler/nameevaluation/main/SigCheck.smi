_require "../../../basis.smi"
_require "../../../compiler-utils/env/main/SEnv.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"

_require "../../name/main/LocalID.smi"
_require "../../usererror/main/UserErrorUtils.smi"
_require "../../control/main/Control.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "../../patterncalc/main/PatternCalc.ppg.smi"
_require "../../patterncalc/main/PatternCalcInterface.ppg.smi"
_require "../../types/main/IDCalc.ppg.smi"
_require "../../types/main/tvarMap.smi"
_require "../../types/main/BuiltinEnv.smi"
_require "../../types/main/EvalIty.smi"
_require "EvalSig.smi"
_require "EvalTy.smi"
_require "FunctorUtils.smi"
_require "NameEvalError.ppg.smi"
_require "NameEvalUtils.smi"
_require "NameEvalEnv.ppg.smi"
_require "NormalizeTy.smi"
_require "SetLiftedTys.smi"
_require "Subst.smi"
_require "TfunVars.smi"

structure SigCheck =
struct
  exception SIGCHECK
  datatype mode = Opaque | Trans
  type sigCheckParam =
    {loc:Loc.loc, mode:mode, specEnv:NameEvalEnv.env,
     strEnv:NameEvalEnv.env, strPath:string list}
  type sigCheckResult = NameEvalEnv.env * IDCalc.icdecl list
  val sigCheck : sigCheckParam -> sigCheckResult
  val refreshEnv : TypID.Set.set * Subst.exnIdSubst
                   -> NameEvalEnv.env
                      -> (Subst.tfvSubst * Subst.conIdSubst) * NameEvalEnv.env
end
