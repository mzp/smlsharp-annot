_require "../../../basis.smi"
_require "../../../compiler-utils/env/main/SEnv.smi"
_require "../../../compiler-utils/env/main/PathEnv.smi"

_require "../../control/main/Loc.ppg.smi"
_require "../../control/main/Control.ppg.smi"
_require "../../types/main/BuiltinEnv.smi"
_require "../../builtin/main/BuiltinType.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "../../patterncalc/main/PatternCalc.ppg.smi"
_require "../../usererror/main/UserErrorUtils.smi"
_require "../../types/main/IDCalc.ppg.smi"
_require "../../types/main/tvarMap.smi"
_require "../../util/main/utils.smi"
_require "EvalSig.smi"
_require "NameEvalEnv.ppg.smi"
_require "NameEvalUtils.smi"
_require "NormalizeTy.smi"
_require "SetLiftedTys.smi"
_require "TfunVars.smi"

structure FunctorUtils =
struct
  val evalFunArg : NameEvalEnv.topEnv * PatternCalc.plsigexp * Loc.loc
                   -> {argStrEntry : NameEvalEnv.strEntry, 
                       argSig : NameEvalEnv.env,
                       dummyIdfunArgTy : IDCalc.ty option,
                       exnTagDecls : IDCalc.icdecl list,
                       extraTvars : IDCalc.tvar list,
                       firstArgPat : (IDCalc.varInfo * IDCalc.ty list) option,
                       polyArgPats : (IDCalc.varInfo * IDCalc.ty) list, 
                       tfvDecls : IDCalc.icdecl list}
  val varsInEnv : ExnID.Set.set
                  -> Loc.loc
                  -> string list
                  -> (string list * IDCalc.icexp) list
                  -> NameEvalEnv.env
                  -> (string list * IDCalc.icexp) list * ExnID.Set.set
  val makeBodyEnv : NameEvalEnv.env
                    -> Loc.loc
                       -> {allVars:(string list * IDCalc.icexp) list,
                           exnIdSet:ExnID.Set.set, typidSet:TypID.Set.set}
  val eqEnv : {specEnv:NameEvalEnv.env, implEnv:NameEvalEnv.env} -> bool
  val eqSize : NameEvalEnv.env * NameEvalEnv.env -> bool
  val makeFunctorArgs : Loc.loc -> string list list -> NameEvalEnv.env -> IDCalc.icexp list
end
