_require "../../../basis.smi"
_require "../../../compiler-utils/env/main/SEnv.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"

_require "../../control/main/Control.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../types/main/BuiltinEnv.smi"
_require "../../usererror/main/UserErrorUtils.smi"
_require "../../util/main/utils.smi"
_require "../../types/main/IDCalc.ppg.smi"
_require "../../types/main/tvarMap.smi"
_require "../../patterncalc/main/PatternCalc.ppg.smi"
_require "NameEvalEnv.ppg.smi"
_require "NameEvalError.ppg.smi"
_require "NameEvalUtils.smi"
_require "NormalizeTy.smi"
_require "SetLiftedTys.smi"

structure EvalTy =
struct
  type tvarEnv = IDCalc.tvar SEnv.map
  val emptyTvarEnv : tvarEnv
  val genTvar : tvarEnv -> Absyn.tvar -> tvarEnv * IDCalc.tvar
  val genTvarList : tvarEnv -> Absyn.tvar list -> tvarEnv * IDCalc.tvar list
  val evalTy : tvarEnv -> NameEvalEnv.env -> Absyn.ty -> IDCalc.ty
  val evalTvar : Loc.loc -> tvarEnv -> Absyn.tvar -> IDCalc.tvar
  val evalFfity : tvarEnv -> NameEvalEnv.env -> PatternCalc.ffiTy -> IDCalc.ffiTy
  val emptyScopedTvars : IDCalc.scopedTvars
  val evalScopedTvars : 
      Loc.loc -> tvarEnv 
              -> NameEvalEnv.env
              -> PatternCalc.scopedTvars
              -> tvarEnv * IDCalc.kindedTvar list
  val evalDatatype :
      IDCalc.path -> NameEvalEnv.env
                   -> PatternCalc.datbind list * Loc.loc
                   -> NameEvalEnv.env * 'a list
end
