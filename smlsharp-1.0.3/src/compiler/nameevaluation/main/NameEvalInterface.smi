_require "../../../basis.smi"
_require "../../../compiler-utils/env/main/SEnv.smi"
_require "../../../compiler-utils/env/main/PathEnv.smi"

_require "../../control/main/Control.ppg.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "../../absyn/main/AbsynInterface.ppg.smi"
_require "../../builtin/main/BuiltinPrimitive.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../types/main/BuiltinEnv.smi"
_require "../../types/main/EvalIty.smi"
_require "../../types/main/Types.ppg.smi"
_require "../../types/main/IDCalc.ppg.smi"
_require "../../types/main/tvarMap.smi"
_require "../../usererror/main/UserErrorUtils.smi"
_require "../../util/main/utils.smi"
_require "../../patterncalc/main/PatternCalc.ppg.smi"
_require "../../patterncalc/main/PatternCalcInterface.ppg.smi"
_require "EvalSig.smi"
_require "EvalTy.smi"
_require "FunctorUtils.smi"
_require "NameEvalEnv.ppg.smi"
_require "NameEvalError.ppg.smi"
_require "NameEvalUtils.smi"
_require "NormalizeTy.smi"
_require "SigCheck.smi"
_require "SetLiftedTys.smi"
_require "Subst.smi"
_require "TfunVars.smi"

structure NameEvalInterface =
struct
  type interfaceEnv = {decls: IDCalc.icdecl list,
                       source: PatternCalcInterface.pitopdec list,
                       topEnv: NameEvalEnv.topEnv} InterfaceID.Map.map
  val evalPitopdecList : NameEvalEnv.topEnv
                         -> PathSet.set * PatternCalcInterface.pitopdec list
                         -> PathSet.set * NameEvalEnv.topEnv * IDCalc.icdecl list
  val evalPistr : string list
                  -> NameEvalEnv.topEnv
                     -> PathSet.set * PatternCalcInterface.pistrexp
                        -> PathSet.set * NameEvalEnv.env * IDCalc.icdecl list
  val internalizeEnv : NameEvalEnv.env -> NameEvalEnv.env
  val evalInterfaces : NameEvalEnv.topEnv
                       -> PatternCalcInterface.interfaceDec list
                          -> interfaceEnv
end
