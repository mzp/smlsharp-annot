_require "../../../basis.smi"
_require "../../../smlformat-lib.smi"

_require "../../absyn/main/Absyn.ppg.smi"
_require "../../annotatedtypes/main/AnnotatedTypes.ppg.smi"
_require "../../constantterm/main/ConstantTerm.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../multiplevaluecalc/main/MultipleValueCalc.ppg.smi"
_require "../../multiplevaluecalc/main/MultipleValueCalcUtils.smi"
_require "../../name/main/LocalID.smi"
_require "../../types/main/IDCalc.ppg.smi"
_require "../../util/main/TermFormat.smi"

structure BitmapCalc =
struct
  type loc = Loc.loc
  type ty = AnnotatedTypes.ty
  val format_ty
      : ty -> SMLFormat.FormatExpression.expression list
  val formatWithType_ty
      : ty -> SMLFormat.FormatExpression.expression list

  type path = IDCalc.path
  val format_path
      : path -> SMLFormat.FormatExpression.expression list
  val formatWithType_path
      : path -> SMLFormat.FormatExpression.expression list

  type varInfo =
      {path : path, ty : ty, id : VarID.id}
  val format_varInfo
      : varInfo -> SMLFormat.FormatExpression.expression list
  val formatWithSimpleType_varInfo
      : varInfo -> SMLFormat.FormatExpression.expression list
  val formatWithType_varInfo
      : varInfo -> SMLFormat.FormatExpression.expression list

  type exVarInfo =
      {path : path, ty : ty}
  val format_exVarInfo
      : exVarInfo -> SMLFormat.FormatExpression.expression list
  val formatWithSimpleType_exVarInfo
      : exVarInfo -> SMLFormat.FormatExpression.expression list
  val formatWithType_exVarInfo
      : exVarInfo -> SMLFormat.FormatExpression.expression list

  type primInfo = MultipleValueCalc.primInfo
  val format_primInfo
      : primInfo -> SMLFormat.FormatExpression.expression list
  val formatWithType_primInfo
      : primInfo -> SMLFormat.FormatExpression.expression list

  type btvEnv = AnnotatedTypes.btvEnv
  val format_btvEnv
      : btvEnv -> SMLFormat.FormatExpression.expression list
  val formatWithType_btvEnv
      : btvEnv -> SMLFormat.FormatExpression.expression list

  datatype bcexp =
      BCFOREIGNAPPLY of
      {
        funExp : bcexp,
        foreignFunTy : AnnotatedTypes.foreignFunTy,
        argExpList : bcexp list,
        loc : loc
      }
    | BCEXPORTCALLBACK of
      {
        funExp : bcexp,  (* must be BCFNM *)
        foreignFunTy : AnnotatedTypes.foreignFunTy,
        loc: loc
      }
    | BCCONSTANT of {value : ConstantTerm.constant, loc : loc}
    | BCGLOBALSYMBOL of
      {
        name : string,
        kind : Absyn.globalSymbolKind,
        ty : ty,
        loc : loc
      }
    | BCVAR of {varInfo : varInfo, loc : loc}
    | BCEXVAR of {exVarInfo : exVarInfo, varSize : bcexp, loc : loc}
    | BCPRIMAPPLY of
      {
        primInfo : primInfo,
        argExpList : bcexp list,
        instTyList : ty list,
        instTagList : bcexp list,
        instSizeList : bcexp list,
        loc : loc
      }
    | BCAPPM of
      {
        funExp : bcexp,
        funTy : ty,
        argExpList : bcexp list,
        loc : loc
      }
    | BCLET of
      {
        localDeclList : bcdecl list,
        mainExp : bcexp,
        loc : loc
      }
    | BCMVALUES of {expList : bcexp list, tyList : ty list, loc : loc}
    | BCRECORD of
      {
        fieldList : {fieldExp : bcexp,
                     fieldTy : ty,
                     fieldLabel : string,
                     fieldSize : bcexp,
                     fieldIndex : bcexp} list,
        recordTy : ty,
        annotation : AnnotatedTypes.annotationLabel,
        isMutable : bool,
        clearPad : bool,
        totalSizeExp : bcexp,
        bitmapExpList : bcexp list,
        loc : loc
      }
    | BCSELECT of
      {
        recordExp : bcexp,
        indexExp : bcexp,
        label : string,
        recordTy : ty,
        resultTy : ty,
        resultSize : bcexp,
        loc : loc
      }
    | BCMODIFY of
      {
        recordExp : bcexp,
        recordTy : ty,
        indexExp : bcexp,
        label : string,
        valueExp : bcexp,
        valueTy : ty,
        valueTag : bcexp,
        valueSize : bcexp,
        loc : loc
      }
    | BCRAISE of
      {
        argExp : bcexp,
        resultTy : ty,
        loc : loc
      }
    | BCHANDLE of
      {
        tryExp : bcexp,
        exnVar : varInfo,
        handlerExp : bcexp,
        loc : loc
      }
    | BCFNM of
      {
        argVarList : varInfo list,
        funTy : ty,
        bodyExp : bcexp,
        annotation : AnnotatedTypes.annotationLabel,
        closureLayout : {
        	recordSize : int,
					recordBitmap : word,
					codeAddressIndex : int,
					closureEnvIndex : int
					},
        loc : loc
      }
    | BCPOLY of
      {
        btvEnv : btvEnv,
        expTyWithoutTAbs : ty,
        exp : bcexp,
        loc : loc
      }
    | BCTAPP of
      {
        exp : bcexp,
        expTy : ty,
        instTyList : ty list,
        loc : loc
      }
    | BCSWITCH of
      {
        switchExp : bcexp,
        expTy : ty,
        branches : {constant : ConstantTerm.constant, branchExp : bcexp} list,
        defaultExp : bcexp,
        loc : loc
      }
    | BCCAST of
      {
        exp : bcexp,
        expTy : ty,
        targetTy : ty,
        loc : loc
      }

  and bcdecl =
      BCVAL of
      {
        boundVars : varInfo list,
        boundExp : bcexp,
        loc : loc
      }
    | BCVALREC of
      {
        recbindList : {boundVar : varInfo, boundExp: bcexp } list,
        loc : loc
      }
    | BCEXTERNVAR of
      {
        exVarInfo: exVarInfo,
        loc: loc
      }
    | BCEXPORTVAR of
      {
        varInfo : varInfo,
        varSize : bcexp,
        varTag : bcexp,
        loc : loc
      }

  type closureLayout =
      {
        recordSize : int,
        recordBitmap : word,
        codeAddressIndex : int,
        closureEnvIndex : int
      }
  val format_bcexp
      : bcexp -> SMLFormat.FormatExpression.expression list
  val format_bcdecl
      : bcdecl -> SMLFormat.FormatExpression.expression list
  val format_closureLayout
      : closureLayout -> SMLFormat.FormatExpression.expression list
  val formatWithType_bcexp
      : bcexp -> SMLFormat.FormatExpression.expression list
  val formatWithType_bcdecl
      : bcdecl -> SMLFormat.FormatExpression.expression list
  val formatWithType_closureLayout
      : closureLayout -> SMLFormat.FormatExpression.expression list

end
