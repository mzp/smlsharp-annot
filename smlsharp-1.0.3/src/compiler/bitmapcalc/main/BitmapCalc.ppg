(* -*- sml -*- *)
(**
 * @copyright (c) 2011, Tohoku University.
 * @author UENO Katsuhiro
 * @author Huu-Duc Nguyen
 *)
structure BitmapCalc =
struct

  type loc = Loc.loc

  (*%
   * @formatter(AnnotatedTypes.ty) AnnotatedTypes.formatSimple_ty
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(AnnotatedTypes.ty) AnnotatedTypes.format_ty
   *)
  type ty = AnnotatedTypes.ty

  (*%
   * @formatter(IDCalc.path) IDCalc.format_path
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(IDCalc.path) IDCalc.format_path
   *)
  type path = IDCalc.path

  (*%
   * @formatter(VarID.id) VarID.format_id
   *)
  (*%
   * @prefix formatWithSimpleType_
   * @formatter(VarID.id) VarID.format_id
   * @formatter(ty) AnnotatedTypes.formatSimple_ty
   * @formatter(path) format_path
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(VarID.id) VarID.format_id
   *)
  type varInfo =
      (*%
       * @format({path, ty, id})
       * path "(v" id ")"
       *)
      (*%
       * @prefix formatWithSimpleType_
       * @format({path, ty, id})
       * L2{ path "(v" id ")" +1 ":" +d ty }
       *)
      (*%
       * @prefix formatWithType_
       * @format({path, ty, id})
       * L2{ path "(v" id ")" +1 ":" +d ty }
       *)
      {path : path, ty : ty, id : VarID.id}

  (*%
   *)
  (*%
   * @prefix formatWithSimpleType_
   * @formatter(ty) AnnotatedTypes.formatSimple_ty
   * @formatter(path) format_path
   *)
  (*%
   * @prefix formatWithType_
   *)
  type exVarInfo =
      (*%
       * @format({path, ty})
       * "_EXVAR(" path ")"
       *)
      (*%
       * @prefix formatWithSimpleType_
       * @format({path, ty})
       * "_EXVAR(" !L2{ path +1 ":" +d ty } ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({path, ty})
       * "_EXVAR(" !L2{ path +1 ":" +d ty } ")"
       *)
      {path : path, ty : ty}

  (*%
   * @formatter(MultipleValueCalc.primInfo) MultipleValueCalc.format_primInfo
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(MultipleValueCalc.primInfo) MultipleValueCalc.format_primInfo
   *)
  type primInfo = MultipleValueCalc.primInfo

  (*%
   * @formatter(AnnotatedTypes.btvEnv) AnnotatedTypes.formatSimple_btvEnv
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(AnnotatedTypes.btvEnv) AnnotatedTypes.format_btvEnv
   *)
  type btvEnv = AnnotatedTypes.btvEnv

  (*%
   * @formatter(bool) SmlppgUtil.formatBinaryChoice
   * @formatter(ConstantTerm.constant) ConstantTerm.format_constant
   * @formatter(AnnotatedTypes.annotationLabel)
   * AnnotatedTypes.format_annotationLabel
   * @formatter(AnnotatedTypes.foreignFunTy) AnnotatedTypes.format_foreignFunTy
   * @formatter(enclosedList) TermFormat.formatEnclosedList
   * @formatter(appList) TermFormat.formatAppList
   * @formatter(caseList) TermFormat.formatCaseList
   * @formatter(decList) TermFormat.formatDeclList
   * @formatter(ifCons) TermFormat.formatIfCons
   * @formatter(withType) formatWithSimpleType_varInfo
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(bool) SmlppgUtil.formatBinaryChoice
   * @formatter(ConstantTerm.constant) ConstantTerm.format_constant
   * @formatter(AnnotatedTypes.annotationLabel)
   * AnnotatedTypes.format_annotationLabel
   * @formatter(AnnotatedTypes.foreignFunTy) AnnotatedTypes.format_foreignFunTy
   * @formatter(enclosedList) TermFormat.formatEnclosedList
   * @formatter(appList) TermFormat.formatAppList
   * @formatter(caseList) TermFormat.formatCaseList
   * @formatter(decList) TermFormat.formatDeclList
   * @formatter(ifCons) TermFormat.formatIfCons
   *)
  datatype bcexp =
      (*%
       * @format({funExp, foreignFunTy, argExpList: arg args, loc})
       * L8{ 2[
       *   "_FFIAPPLY"
       *   +1 funExp
       *   +1 args:appList(arg)("(",",",")")
       * ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({funExp, foreignFunTy, argExpList: arg args, loc})
       * L8{ 2[
       *   "_FFIAPPLY"
       *   +1 L2{ funExp +1 "as" +d foreignFunTy }
       *   +1 args:appList(arg)("(",",",")")
       * ] }
       *)
      BCFOREIGNAPPLY of
      {
        funExp : bcexp,
        foreignFunTy : AnnotatedTypes.foreignFunTy,
        argExpList : bcexp list,
        loc : loc
      }
    | (*%
       * @format({funExp, foreignFunTy, loc})
       * L8{ 2[ "_CALLBACK" +1 funExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({funExp, foreignFunTy, loc})
       * L8{ 2[ "_CALLBACK"
       *        +1 L2{ funExp +1 "as" +d foreignFunTy } ] }
       *)
      BCEXPORTCALLBACK of
      {
        funExp : bcexp,  (* must be BCFNM *)
        foreignFunTy : AnnotatedTypes.foreignFunTy,
        loc: loc
      }
    | (*%
       * @format({value, loc}) value
       *)
      (*%
       * @prefix formatWithType_
       * @format({value, loc}) value
       *)
      BCCONSTANT of {value : ConstantTerm.constant, loc : loc}
    | (*%
       * @format({name, kind, ty, loc}) name ":" ty
       *)
      (*%
       * @prefix formatWithType_
       * @format({name, kind, ty, loc}) name ":" ty
       *)
      BCGLOBALSYMBOL of
      {
        name : string,
        kind : Absyn.globalSymbolKind,
        ty : ty,
        loc : loc
      }
    | (*%
       * @format({varInfo, loc}) varInfo
       *)
      (*%
       * @prefix formatWithType_
       * @format({varInfo, loc}) varInfo
       *)
      BCVAR of {varInfo : varInfo, loc : loc}
    | (*%
       * @format({exVarInfo, varSize, loc}) L2{ exVarInfo +1 "/i" +d varSize }
       *)
      (*%
       * @prefix formatWithType_
       * @format({exVarInfo, varSize, loc}) L2{ exVarInfo +1 "/" +d varSize }
       *)
      BCEXVAR of {exVarInfo : exVarInfo, varSize : bcexp, loc : loc}
(*
    | (*%
       * @format({arrayExp, indexExp, elementTy, elementSize, loc})
       * L2{ L8{ 2[ "_GETFIELD" +1 arrayExp +1 indexExp ] }
       *     +1 "/s" +d elementSize }
       *)
      (*%
       * @prefix formatWithType_
       * @format({arrayExp, indexExp, elementTy, elementSize, loc})
       * L2{ L8{ 2[ "_GETFIELD" +1 arrayExp +1 indexExp ] }
       *     +1 ":" +d elementTy
       *     +1 "/" +d elementSize }
       *)
      BCGETFIELD of
      {
        arrayExp : bcexp,
        indexExp : bcexp,
        elementTy : ty,
        elementSize : bcexp,
        loc : loc
      }
    | (*%
       * @format({valueExp, arrayExp, indexExp, elementTy,
       *          elementSize, elementTag, loc})
       * L8{ 2[
       *   "_SETFIELD"
       *   +1 arrayExp
       *   +1 indexExp
       *   +1 L2{ valueExp +1 "/t" +d elementTag
       *                   +1 "/s" +d elementSize }
       * ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({valueExp, arrayExp, indexExp, elementTy,
       *          elementSize, elementTag, loc})
       * L8{ 2[
       *   "_SETFIELD"
       *   +1 arrayExp
       *   +1 indexExp
       *   +1 L2{ valueExp +1 ":" +d elementTy
       *                   +1 "/" +d elementTag
       *                   +1 "/" +d elementSize }
       * ] }
       *)
      BCSETFIELD of
      {
        valueExp : bcexp,
        arrayExp : bcexp,
        indexExp : bcexp,
        elementTy : ty,
        elementTag : bcexp,
        elementSize : bcexp,
        loc: loc
      }
    | (*%
       * @format({consExp, newTailExp, listTy, consRecordTy, tailLabel,
       *          listTag, listSize, tailLabelIndex, loc})
       * L8{ 2[
       *   "_SETTAIL"
       *   +1 consExp
       *   +1 L2{ "#" tailLabel +1 "/i" +d tailLabelIndex }
       *   +1 L2{ newTailExp +1 "/t" +d listTag
       *                     +1 "/s" +d listSize }
       * ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({consExp, newTailExp, listTy, consRecordTy, tailLabel,
       *          listTag, listSize, tailLabelIndex, loc})
       * L8{ 2[
       *   "_SETTAIL"
       *   +1 L2{ consExp +1 ":" +d consRecordTy }
       *   +1 L2{ "#" tailLabel +1 "/" +d tailLabelIndex }
       *   +1 L2{ newTailExp +1 ":" +d listTy
       *                     +1 "/" +d listTag
       *                     +1 "/" +d listSize }
       * ] }
       *)
      BCSETTAIL of
      {
        consExp : bcexp,
        newTailExp : bcexp,
        tailLabel : string,
        listTy : ty,
        consRecordTy : ty,
        listTag : bcexp,
        listSize : bcexp,
        tailLabelIndex : bcexp,
        loc: loc
      }
    | (*%
       * @format({sizeExp, initialValue, elementTy, isMutable,
       *          elementTag, elementSize, loc})
       * L8{ 2[ "_ARRAY" isMutable()("(mutable)",) +1 sizeExp
       *        +1 L2{ initialValue
       *               +1 "/t" +d elementTag
       *               +1 "/s" +d elementSize } ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({sizeExp, initialValue, elementTy, isMutable,
       *          elementTag, elementSize, loc})
       * L8{ 2[ "_ARRAY" isMutable()("(mutable)",) +1 sizeExp
       *        +1 L2{ initialValue
       *               +1 ":" +d elementTy
       *               +1 "/" +d elementTag
       *               +1 "/" +d elementSize } ] }
       *)
      BCARRAY of
      {
        sizeExp : bcexp,
        initialValue : bcexp,
        elementTy : ty,
        elementTag : bcexp,
        elementSize : bcexp,
        isMutable : bool,
        loc : loc
      }
    | (*%
       * @format({srcExp, srcIndexExp, dstExp, dstIndexExp, lengthExp,
       *          elementTy, elementTag, elementSize, loc})
       * L8{ 2[
       *   "_COPYARRAY"
       *   "(" !L2{ "/t" +d elementTag +1 "/s" +d elementSize } ")"
       *   +1 srcExp
       *   +1 srcIndexExp
       *   +1 dstExp
       *   +1 dstIndexExp
       *   +1 lengthExp
       * ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({srcExp, srcIndexExp, dstExp, dstIndexExp, lengthExp,
       *          elementTy, elementTag, elementSize, loc})
       * L8{ 2[
       *   "_COPYARRAY"
       *   "(" !L2{ elementTy +1 "/" +d elementTag +1 "/" +d elementSize } ")"
       *   +1 srcExp
       *   +1 srcIndexExp
       *   +1 dstExp
       *   +1 dstIndexExp
       *   +1 lengthExp
       * ] }
       *)
      BCCOPYARRAY of
      {
        srcExp : bcexp,
        srcIndexExp : bcexp,
        dstExp : bcexp,
        dstIndexExp : bcexp,
        lengthExp : bcexp,
        elementTy : ty,
        elementTag : bcexp,
        elementSize : bcexp,
        loc: loc
      }
*)
    | (*%
       * @format({primInfo, argExpList: arg args, instTyList: ty tys,
       *          instTagList: tag tags, instSizeList: size sizes, loc})
       * L8{ 2[ "_PRIMAPPLY(" primInfo ")"
       *        tys:ifCons()(
       *          +1 L2{ tys:appList(ty)("(",",",")")
       *                 +1 "/t" +d tags:appList(tag)("(",",",")")
       *                 +1 "/s" +d sizes:appList(size)("(",",",")") }
       *        )
       *        +1 args:appList(arg)("(",",",")") ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({primInfo, argExpList: arg args, instTyList: ty tys,
       *          instTagList: tag tags, instSizeList: size sizes, loc})
       * L8{ 2[ "_PRIMAPPLY(" primInfo ")"
       *        tys:ifCons()(
       *          +1 L2{ tys:appList(ty)("(",",",")")
       *                 +1 "/" +d tags:appList(tag)("(",",",")")
       *                 +1 "/" +d sizes:appList(size)("(",",",")") }
       *        )
       *        +1 args:appList(arg)("(",",",")") ] }
       *)
      BCPRIMAPPLY of
      {
        primInfo : primInfo,
        argExpList : bcexp list,
        instTyList : ty list,
        instTagList : bcexp list,
        instSizeList : bcexp list,
        loc : loc
      }
    | (*%
       * @format({funExp, funTy, argExpList: arg args, loc})
       * L8{ 2[
       *   funExp
       *   +1 args:appList(arg)("(",",",")")
       * ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({funExp, funTy, argExpList: arg args, loc})
       * L8{ 2[
       *   L2{ funExp +1 ":" +d funTy }
       *   +1 args:appList(arg)("(",",",")")
       * ] }
       *)
      BCAPPM of
      {
        funExp : bcexp,
        funTy : ty,
        argExpList : bcexp list,
        loc : loc
      }
    | (*%
       * @format({localDeclList : dec decs, mainExp, loc})
       * R1{ "let" 2[ decs:decList(dec)(+1,+1) ]
       *     +1 "in" 2[ +1 mainExp ]
       *     +1 "end" }
       *)
      (*%
       * @prefix formatWithType_
       * @format({localDeclList : dec decs, mainExp, loc})
       * R1{ "let" 2[ decs:decList(dec)(+1,+1) ]
       *     +1 "in" 2[ +1 mainExp ]
       *     +1 "end" }
       *)
      BCLET of
      {
        localDeclList : bcdecl list,
        mainExp : bcexp,
        loc : loc
      }
    | (*%
       * @format({expList:field fields, tyList, loc})
       * L8{ 2[ "_MVALUES" +1 fields:appList(field)("(",",",")") ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({expList:field fields, tyList: ty tys, loc})
       * L8{ 2[ "_MVALUES"
       *        +1 L2{ fields:appList(field)("(",",",")")
       *               +1 ":" +d tys:appList(ty)("(",",",")") } ] }
       *)
      BCMVALUES of {expList : bcexp list, tyList : ty list, loc : loc}
    | (*%
       * @format({fieldList: field fields,
       *          recordTy, annotation, isMutable, clearPad, totalSizeExp,
       *          bitmapExpList: bm bms, loc})
       * L2{ fields:enclosedList(field)("{",",","}")
       *     +1 "/t" +d totalSizeExp
       *     +1 "/b" +d bms:appList(bm)("(",",",")") }
       * @format:field({fieldExp, fieldTy, fieldLabel, fieldSize, fieldIndex})
       * !R1{ L2{ "#" fieldLabel +1 "/i" +d fieldIndex +1 "/s" +d fieldSize }
       *      +d "=" +1 fieldExp }
       *)
      (*%
       * @prefix formatWithType_
       * @format({fieldList: field fields,
       *          recordTy, annotation, isMutable, clearPad, totalSizeExp,
       *          bitmapExpList: bm bms, loc})
       * L2{ L2{ fields:enclosedList(field)("{",",","}")
       *         +1 "/t" +d totalSizeExp
       *         +1 "/" +d bms:appList(bm)("(",",",")") }
       *     +1 ":" +d recordTy }
       * @format:field({fieldExp, fieldTy, fieldLabel, fieldSize, fieldIndex})
       * !R1{ L2{ "#" fieldLabel +1 "/" +d fieldIndex +1 "/" +d fieldSize }
       *      +d "=" +1 L2{ fieldExp +1 ":" +d fieldTy } }
       *)
      BCRECORD of
      {
        fieldList : {fieldExp : bcexp,
                     fieldTy : ty,
                     fieldLabel : string,
                     fieldSize : bcexp,
                     fieldIndex : bcexp} list,
        recordTy : ty,
        annotation : AnnotatedTypes.annotationLabel,
        isMutable : bool,
        clearPad : bool,
        totalSizeExp : bcexp,
        bitmapExpList : bcexp list,
        loc : loc
      }
    | (*%
       * @format({recordExp, indexExp, label, recordTy, resultTy, resultSize,
       *          loc})
       * L2{
       *   L8{ 2[ L2{ "#" label +1 "/i" +d indexExp }
       *          +1 recordExp ] }
       *   +1 "/s" +d resultSize }
       *)
      (*%
       * @prefix formatWithType_
       * @format({recordExp, indexExp, label, recordTy, resultTy, resultSize,
       *          loc})
       * L2{
       *   L8{ 2[ L2{ "#" label +1 "/" +d indexExp }
       *          +1 L2{ recordExp +1 ":" +d recordTy } ] }
       *   +1 ":" +d resultTy
       *   +1 "/" +d resultSize }
       *)
      BCSELECT of
      {
        recordExp : bcexp,
        indexExp : bcexp,
        label : string,
        recordTy : ty,
        resultTy : ty,
        resultSize : bcexp,
        loc : loc
      }
    | (*%
       * @format({recordExp, recordTy, indexExp, label, valueExp, valueTy,
       *          valueTag, valueSize, loc})
       * L8{ 2[ recordExp
       *        +1 "#" +d "{"
       *          !N0{ L2{ "#" label +1 "/i" +d indexExp } +d "="
       *               2[ +1 L2{ valueExp
       *                         +1 "/t" +d valueTag
       *                         +1 "/s" +d valueSize } ] } "}" ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({recordExp, recordTy, indexExp, label, valueExp, valueTy,
       *          valueTag, valueSize, loc})
       * L8{ 2[ L2{ recordExp +1 ":" +d recordTy }
       *        +1 "#" +d "{"
       *          !N0{ L2{ "#" label +1 "/" +d indexExp } +d "="
       *               2[ +1 L2{ valueExp
       *                         +1 ":" +d valueTy
       *                         +1 "/" +d valueTag
       *                         +1 "/" +d valueSize } ] } "}" ] }
       *)
      BCMODIFY of
      {
        recordExp : bcexp,
        recordTy : ty,
        indexExp : bcexp,
        label : string,
        valueExp : bcexp,
        valueTy : ty,
        valueTag : bcexp,
        valueSize : bcexp,
        loc : loc
      }
    | (*%
       * @format({argExp, resultTy, loc})
       * !R1{ 2[ "raise" +1 argExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({argExp, resultTy, loc})
       * L2{ R1{ 2[ "raise" +1 argExp ] +1 } ":" +d resultTy }
       *)
      BCRAISE of
      {
        argExp : bcexp,
        resultTy : ty,
        loc : loc
      }
    | (*%
       * @format({tryExp, exnVar, handlerExp, loc})
       * R1{ "try"
       *     2[ +1 tryExp ]
       *     +1 "handle" +d { exnVar:withType +1 "=>" }
       *     2[ +1 handlerExp ]
       *     +1 "end" }
       *)
      (*%
       * @prefix formatWithType_
       * @format({tryExp, exnVar, handlerExp, loc})
       * R1{ "try"
       *     2[ +1 tryExp ]
       *     +1 "handle" +d { exnVar +1 "=>" }
       *     2[ +1 handlerExp ]
       *     +1 "end" }
       *)
      BCHANDLE of
      {
        tryExp : bcexp,
        exnVar : varInfo,
        handlerExp : bcexp,
        loc : loc
      }
    | (*%
       * @format({argVarList: arg args, funTy,
       *          bodyExp, annotation, closureLayout, loc})
       * !R1{"fn" +d args:appList(arg:withType)("(",",",")") +d "=>"
       *     3[ +1 bodyExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({argVarList: arg args, funTy,
       *          bodyExp, annotation, closureLayout, loc})
       * L2{ R1{"fn" +d args:appList(arg)("(",",",")") +d "=>"
       *        3[ +1 bodyExp ] }
       *     +1 ":" +d funTy }
       *)
      BCFNM of
      {
        argVarList : varInfo list,
        funTy : ty,
        bodyExp : bcexp,
        annotation : AnnotatedTypes.annotationLabel,
        closureLayout : closureLayout,
        loc : loc
      }
    | (*%
       * @format({btvEnv, expTyWithoutTAbs, exp, loc})
       * "[" !R1{ btvEnv "." +1 exp } "]"
       *)
      (*%
       * @prefix formatWithType_
       * @format({btvEnv, expTyWithoutTAbs, exp, loc})
       * "[" !R1{ btvEnv "." +1 L2{ exp +1 ":" +d expTyWithoutTAbs } } "]"
       *)
      BCPOLY of
      {
        btvEnv : btvEnv,
        expTyWithoutTAbs : ty,
        exp : bcexp,
        loc : loc
      }
    | (*%
       * @format({exp, expTy, instTyList: ty tys, loc})
       * L8{ 2[ exp
       *        +1 tys:enclosedList(ty)("(",",",")") ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({exp, expTy, instTyList: ty tys, loc})
       * L8{ 2[ L2{ exp +1 ":" +d expTy }
       *        +1 tys:enclosedList(ty)("(",",",")") ] }
       *)
      BCTAPP of
      {
        exp : bcexp,
        expTy : ty,
        instTyList : ty list,
        loc : loc
      }
    | (*%
       * @format({switchExp, expTy, branches: branch branches, defaultExp, loc})
       * { 2[ "case" +1 switchExp +1 "of" ] }
       * branches:caseList(branch)(2[+1], +1 "|" +d,
       *                           !R1{ 2[ "_" +d "=>" +1 defaultExp ] })
       * @format:branch({constant, branchExp})
       * !R1{ 2[ constant +d "=>" +1 branchExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({switchExp, expTy, branches: branch branches, defaultExp, loc})
       * { 2[ "case" +1 L2{ switchExp +1 ":" +d expTy } +1 "of" ] }
       * branches:caseList(branch)(2[+1], +1 "|" +d,
       *                           !R1{ 2[ "_" +d "=>" +1 defaultExp ] })
       * @format:branch({constant, branchExp})
       * !R1{ 2[ constant +d "=>" +1 branchExp ] }
       *)
      BCSWITCH of
      {
        switchExp : bcexp,
        expTy : ty,
        branches : {constant : ConstantTerm.constant, branchExp : bcexp} list,
        defaultExp : bcexp,
        loc : loc
      }
    | (*%
       * @format({exp, expTy, targetTy, loc})
       * "cast" "(" exp ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({exp, expTy, targetTy, loc})
       * "cast" "(" !L2{ L2{ exp +1 ":" +d expTy } +1 ":" +d targetTy} ")"
       *)
      BCCAST of
      {
        exp : bcexp,
        expTy : ty,
        targetTy : ty,
        loc : loc
      }

  and bcdecl =
      (*%
       * @format({boundVars: var vars, boundExp, loc})
       * !R1{ "val" +d vars:appList(var:withType)("(",",",")") +d "="
       *      4[ +1 boundExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({boundVars: var vars, boundExp, loc})
       * !R1{ "val" +d vars:appList(var)("(",",",")") +d "="
       *      4[ +1 boundExp ] }
       *)
      BCVAL of
      {
        boundVars : varInfo list,
        boundExp : bcexp,
        loc : loc
      }
    | (*%
       * @format({recbindList: bind binds, loc})
       * !R1{ binds:decList(bind)("val" +d "rec" +d, +1 "and" +d) }
       * @format:bind({boundVar, boundExp})
       * boundVar:withType +d "=" 4[ +1 boundExp ]
       *)
      (*%
       * @prefix formatWithType_
       * @format({recbindList: bind binds, loc})
       * !R1{ binds:decList(bind)("val" +d "rec" +d, +1 "and" +d) }
       * @format:bind({boundVar, boundExp})
       * boundVar +d "=" 4[ +1 boundExp ]
       *)
      BCVALREC of
      {
        recbindList : {boundVar : varInfo, boundExp: bcexp } list,
        loc : loc
      }
    | (*%
       * @format({exVarInfo, loc})
       * !R1{ "extern" +d "val" +d exVarInfo }
       *)
      (*%
       * @prefix formatWithType_
       * @format({exVarInfo, loc})
       * !R1{ "extern" +d "val" +d exVarInfo }
       *)
      BCEXTERNVAR of
      {
        exVarInfo: exVarInfo,
        loc: loc
      }
    | (*%
       * @format({varInfo, varSize, varTag, loc})
       * !R1{ "export" +d "val" +d
       *      4[ +1 L2{ varInfo +1 "/t" +d varTag +1 "/s" +d varSize } ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({varInfo, varSize, varTag, loc})
       * !R1{ "export" +d "val" +d
       *      4[ +1 L2{ varInfo +1 "/" +d varTag +1 "/" +d varSize } ] }
       *)
      BCEXPORTVAR of
      {
        varInfo : varInfo,
        varSize : bcexp,
        varTag : bcexp,
        loc : loc
      }

  withtype closureLayout =
      {
        recordSize : int,
        recordBitmap : word,
        codeAddressIndex : int,
        closureEnvIndex : int
      }

end
