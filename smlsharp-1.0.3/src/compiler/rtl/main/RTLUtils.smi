_require "../../../basis.smi"
_require "../../../smlformat-lib.smi"
_require "../../control/main/Control.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "RTL.ppg.smi"
_require "RTLEdit.smi"

structure RTLUtils =
struct
  structure Var =
  struct
    type set (= boxed)
    type defuseSet = {defs: set, uses: set}
    val format_set : set SMLFormat.BasicFormatters.formatter
    val setUnion : set * set -> set
    val setMinus : set * set -> set
    val setIsSubset : set * set -> bool
    val emptySet : set
    val fold : (RTL.var * 'a -> 'a) -> 'a -> set -> 'a
    val app : (RTL.var -> unit) -> set -> unit
    val filter : (RTL.var -> bool) -> set -> set
    val inDomain : set * RTL.id -> bool
    val find : set * RTL.id -> RTL.var option
    val isEmpty : set -> bool
    val fromList : RTL.var list -> set
    val toVarIDSet : set -> VarID.Set.set
    val singleton : RTL.var -> set
    val defuseFirst : RTL.first -> defuseSet
    val defuseInsn : RTL.instruction -> defuseSet
    val defuseLast : RTL.last -> defuseSet
    val defuse : RTLEdit.node -> defuseSet
    val clobsFirst : RTL.first -> set
    val clobsInsn : RTL.instruction -> set
    val clobsLast : RTL.last -> set
    val clobs : RTLEdit.node -> set
  end
  structure Slot =
  struct
    type set (= boxed)
    type defuseSet = {defs: set, uses: set}
    val format_set : set SMLFormat.BasicFormatters.formatter
    val setUnion : set * set -> set
    val setMinus : set * set -> set
    val setIsSubset : set * set -> bool
    val emptySet : set
    val fold : (RTL.slot * 'a -> 'a) -> 'a -> set -> 'a
    val app : (RTL.slot -> unit) -> set -> unit
    val filter : (RTL.slot -> bool) -> set -> set
    val inDomain : set * RTL.id -> bool
    val find : set * RTL.id -> RTL.slot option
    val isEmpty : set -> bool
    val fromList : RTL.slot list -> set
    val toVarIDSet : set -> VarID.Set.set
    val singleton : RTL.slot -> set
    val defuseFirst : RTL.first -> defuseSet
    val defuseInsn : RTL.instruction -> defuseSet
    val defuseLast : RTL.last -> defuseSet
    val defuse : RTLEdit.node -> defuseSet
  end
  val labelPtrTy : RTL.labelReference -> RTL.ptrTy
  val labelTy : RTL.labelReference -> RTL.ty
  val constTy : RTL.const -> RTL.ty
  val addrTy : RTL.addr -> RTL.ptrTy
  val dstTy : RTL.dst -> RTL.ty
  val operandTy : RTL.operand -> RTL.ty
  val handlerLabels : RTL.handler -> RTL.label list
  val successors : RTL.last -> RTL.label list
  val edges : RTL.graph
              -> {succs: RTL.label list, preds: RTL.label list}
                 RTLEdit.annotatedGraph
  val preorder : RTL.graph -> RTL.label list
  val postorder : RTL.graph -> RTL.label list
  type 'a analysis =
      {
        init: 'a,
        join: 'a * 'a -> 'a,
        pass: RTLEdit.node * 'a -> 'a,
        filterIn: RTL.label * 'a -> 'a,
        filterOut: RTL.label * 'a -> 'a,
        changed: {old:'a, new:'a} -> bool
      }
  type 'a answer =
      {
        answerIn: 'a,
        answerOut: 'a,
        succs: RTL.label list,
        preds: RTL.label list
      }
  val format_answer : 'a SMLFormat.BasicFormatters.formatter
                      -> 'a answer SMLFormat.BasicFormatters.formatter
  val analyzeFlowBackward :
      'a analysis -> RTL.graph -> 'a answer RTLEdit.annotatedGraph
  val analyzeFlowForward :
      'a analysis -> RTL.graph -> 'a answer RTLEdit.annotatedGraph
  val mapCluster : (RTL.graph -> RTL.graph)
                   -> RTL.program -> RTL.program
end
