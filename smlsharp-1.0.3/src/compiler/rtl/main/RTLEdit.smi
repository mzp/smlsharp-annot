_require "../../../basis.smi"
_require "../../../smlformat-lib.smi"

_require "../../control/main/Control.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "RTL.ppg.smi"

structure RTLEdit =
struct
  type focus (= boxed)       
  datatype node =
      FIRST of RTL.first
    | MIDDLE of RTL.instruction
    | LAST of RTL.last
  val format_focus : focus SMLFormat.BasicFormatters.formatter
  val format_node : node SMLFormat.BasicFormatters.formatter
  val jump : RTL.label -> RTL.last
  val singletonFirst : RTL.first -> focus
  val singleton : RTL.instruction -> focus
  val singletonLast : RTL.last -> focus
  val focusEnter : RTL.graph -> focus
  val focusExit : RTL.graph -> focus
  val focusFirst : RTL.graph * RTL.label -> focus
  val focusLast : RTL.graph * RTL.label -> focus
  val unfocus : focus -> RTL.graph
  val gotoLast : focus -> focus
  val atFirst : focus -> bool
  val atLast : focus -> bool
  val insertBefore : focus * RTL.instruction list -> focus
  val insertAfter : focus * RTL.instruction list -> focus
  val insertFirst : focus * RTL.first -> focus
  val insertLast : focus * RTL.last -> focus
  val makeLabelBefore : focus -> focus * RTL.label
  val makeLabelAfter : focus -> focus * RTL.label
  val insertLastBefore : focus * (RTL.label -> RTL.last) -> focus * RTL.label
  val insertLastAfter : focus * (RTL.label -> RTL.last) -> focus * RTL.label
  val spliceBefore : focus * RTL.graph -> focus
  val spliceAfter : focus * RTL.graph -> focus
  val mergeGraph : RTL.graph * RTL.graph -> RTL.graph
  val spliceGraph : RTL.graph * RTL.graph -> RTL.graph
  val extend : (node -> RTL.graph) -> RTL.graph -> RTL.graph
  type 'a annotatedGraph (= boxed)
  type 'a blockFocus (= boxed)
  val format_annotatedGraph :
      'a SMLFormat.BasicFormatters.formatter
      -> 'a annotatedGraph SMLFormat.BasicFormatters.formatter
  val annotate : RTL.graph * 'a -> 'a annotatedGraph
  val graph : 'a annotatedGraph -> RTL.graph
  val annotations: 'a annotatedGraph -> 'a RTL.LabelMap.map
  val map : ('a -> 'b) -> 'a annotatedGraph -> 'b annotatedGraph
  val fold : ('a blockFocus * 'b -> 'b) -> 'b -> 'a annotatedGraph -> 'b
  val rewrite : ('a blockFocus -> RTL.graph) -> 'a annotatedGraph -> RTL.graph
  val focusBlock : 'a annotatedGraph * RTL.label -> 'a blockFocus
  val unfocusBlock : 'a blockFocus -> 'a annotatedGraph
  val annotation : 'a blockFocus -> 'a
  val blockLabel : 'a blockFocus -> RTL.label
  val block : 'a blockFocus -> RTL.block
  val setAnnotation : 'a blockFocus * 'a -> 'a blockFocus
  val foldForward : (node * 'b -> 'b) -> 'b -> 'a blockFocus -> 'b
  val foldBackward : (node * 'b -> 'b) -> 'b -> 'a blockFocus -> 'b
  val rewriteForward :
      (node * 'a -> RTL.graph * 'a) -> 'a blockFocus -> RTL.graph
  val rewriteBackward :
      (node * 'a -> RTL.graph * 'a) -> 'a blockFocus -> RTL.graph
end
