_require "../../../basis.smi"
_require "../../../smlformat-lib.smi"

_require "../../control/main/Loc.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../util/main/SmlppgUtil.ppg.smi"

structure RTL =
struct
  datatype cc =
      OVERFLOW
    | NOTOVERFLOW
    | EQUAL
    | NOTEQUAL
    | BELOW
    | BELOWEQUAL
    | ABOVE
    | ABOVEEQUAL
    | SIGN
    | NOTSIGN
    | LESS
    | LESSEQUAL
    | GREATER
    | GREATEREQUAL
  val format_cc : cc -> SMLFormat.FormatExpression.expression list
  datatype ptrTy =
      Void
    | Data
    | Code
  val format_ptrTy : ptrTy -> SMLFormat.FormatExpression.expression list
  type genericId = BoundTypeVarID.id
  val format_genericId : genericId
			 -> SMLFormat.FormatExpression.expression list
  datatype sign = U | S
  val format_sign : sign -> SMLFormat.FormatExpression.expression list
  datatype ty =
      Int8 of sign
    | Int16 of sign
    | Int32 of sign
    | Int64 of sign
    | Real32
    | Real64
    | Real80
    | Ptr of ptrTy
    | PtrDiff of ptrTy
    | Generic of genericId
    | NoType
  val format_ty : ty -> SMLFormat.FormatExpression.expression list 
  type sint32 = Int32.int
  val format_sint32 : Int32.int -> SMLFormat.FormatExpression.expression list
  type uint32 = Word32.word
  val format_uint32 : Word32.word -> SMLFormat.FormatExpression.expression list
  type sint16 = int
  val format_sint16 : int -> SMLFormat.FormatExpression.expression list
  type uint16 = word
  val format_uint16 : word -> SMLFormat.FormatExpression.expression list
  type sint8 = int
  val format_sint8 : int -> SMLFormat.FormatExpression.expression list
  type uint8 = Word8.word
  val format_uint8 : Word8.word -> SMLFormat.FormatExpression.expression list
  type loc = Loc.loc
  val format_loc : loc -> SMLFormat.FormatExpression.expression list
  type id = VarID.id
  val format_id : id -> SMLFormat.FormatExpression.expression list 
  type label = VarID.id
  val format_label :label -> SMLFormat.FormatExpression.expression list
  structure LabelMap = VarID.Map
  structure LabelSet = VarID.Set
  type clusterId = ClusterID.id
  val format_clusterId : clusterId
			 -> SMLFormat.FormatExpression.expression list
  type symbol = string
  val format_symbol : symbol -> SMLFormat.FormatExpression.expression list
  datatype symbolScope = LOCAL | GLOBAL
  val format_symbolScope : symbolScope 
			   -> SMLFormat.FormatExpression.expression list
  datatype labelReference =
      LABELCAST of ptrTy * labelReference
    | NULL of ptrTy
    | LABEL of label
    | SYMBOL of ptrTy * symbolScope * symbol
    | CURRENT_POSITION
    | LINK_ENTRY of symbol
    | LINK_STUB of symbol
    | ELF_GOT
  val format_labelReference : labelReference
			      -> SMLFormat.FormatExpression.expression list
  datatype const =
      SYMOFFSET of {base: labelReference, label: labelReference}
    | INT32 of sint32
    | UINT32 of uint32
    | INT16 of sint16
    | UINT16 of uint16
    | INT8 of sint8
    | UINT8 of uint8
    | REAL32 of string
    | REAL64 of string
    | REAL64HI of string
    | REAL64LO of string
  val format_const : const -> SMLFormat.FormatExpression.expression list
  type var = {id: id, ty: ty}
  val format_var : var -> SMLFormat.FormatExpression.expression list
  type tid = BoundTypeVarID.id
  val format_tid : tid -> SMLFormat.FormatExpression.expression list
  datatype tag = BOXED | UNBOXED | GENERIC of tid
  val format_tag : tag -> SMLFormat.FormatExpression.expression list
  type format = {size: int, align: int, tag: tag}
  val format_format : format -> SMLFormat.FormatExpression.expression list
  type slot = {id: id, format: format}
  val format_slot : slot -> SMLFormat.FormatExpression.expression list
  datatype x86st = X86ST of int
  val format_x86st : x86st -> SMLFormat.FormatExpression.expression list
  datatype addr =
       ADDRCAST of ptrTy * addr
    | ABSADDR of labelReference
    | DISP of const * addr
    | BASE of var
    | ABSINDEX of {base: labelReference, index: var, scale: int}
    | BASEINDEX of {base: var, index: var, scale: int}
    | POSTFRAME of {offset: int, size: int}
    | PREFRAME of {offset: int, size: int}
    | WORKFRAME of slot
    | FRAMEINFO of int
  val format_addr : addr -> SMLFormat.FormatExpression.expression list
  datatype mem = ADDR of addr | SLOT of slot
  val format_mem : mem -> SMLFormat.FormatExpression.expression list
  datatype dst =
      REG of var
    | COUPLE of ty * {hi: dst, lo: dst}
    | MEM of ty * mem
  val format_dst : dst -> SMLFormat.FormatExpression.expression list
  datatype cast = N | CAST of ty
  val format_cast : SMLFormat.FormatExpression.expression list 
		    -> cast -> SMLFormat.FormatExpression.expression list
  datatype operand = CONST of const | REF of cast * dst
  val format_operand : operand -> SMLFormat.FormatExpression.expression list
  val REF_ : dst -> operand
  datatype handler =
      NO_HANDLER
    | HANDLER of {outside: bool, handlers: label list}
  val format_handler : SMLFormat.FormatExpression.expression list
		       -> handler -> SMLFormat.FormatExpression.expression list
  datatype first =
      BEGIN of {label: label, align: int, loc: Loc.loc}
    | CODEENTRY of {label: label, symbol: symbol, scope: symbolScope,
                    align: int, preFrameSize: int,
                    stubOptions: {forceFrameAlign: bool} option,
                    defs: var list, loc: Loc.loc}
    | HANDLERENTRY of {label: label, align: int,
                       defs: var list, loc: Loc.loc}
    | ENTER
  val format_first : first -> SMLFormat.FormatExpression.expression list
  datatype instruction =
      NOP
    | STABILIZE
    | COMPUTE_FRAME of {uses: var VarID.Map.map, clobs: var list}
    | REQUEST_SLOT of slot
    | REQUIRE_SLOT of slot
    | USE of operand list
    | MOVE of ty * dst * operand
    | MOVEADDR of ptrTy * dst * addr
    | COPY of {ty: ty, dst: dst, src: operand, clobs: var list}
    | MLOAD of {ty: ty, dst: slot, srcAddr: addr, size: operand,
                defs: var list, clobs: var list}
    | MSTORE of {ty: ty, dstAddr: addr, src: slot, size: operand,
                 global: bool, defs: var list, clobs: var list}
    | EXT8TO32 of sign * dst * operand
    | EXT16TO32 of sign * dst * operand
    | EXT32TO64 of sign * dst * operand
    | DOWN32TO8 of sign * dst * operand
    | DOWN32TO16 of sign * dst * operand
    | ADD of ty * dst * operand * operand
    | SUB of ty * dst * operand * operand
    | MUL of (ty * dst) * (ty * operand) * (ty * operand)
    | DIVMOD of
      {div: ty * dst, mod: ty * dst} * (ty * operand) * (ty * operand)
    | AND of ty * dst * operand * operand
    | OR of ty * dst * operand * operand
    | XOR of ty * dst * operand * operand
    | LSHIFT of ty * dst * operand * operand
    | RSHIFT of ty * dst * operand * operand
    | ARSHIFT of ty * dst * operand * operand
    | TEST_SUB of ty * operand * operand
    | TEST_AND of ty * operand * operand
    | TEST_LABEL of ptrTy * operand * labelReference
    | NOT of ty * dst * operand
    | NEG of ty * dst * operand
    | SET of cc * ty * dst * {test: instruction}
    | LOAD_FP of dst
    | LOAD_PREV_FP of dst
    | LOAD_SP of dst
    | LOAD_RETADDR of dst
    | LOADABSADDR of {ty: ty, dst: dst, symbol: labelReference,
                      thunk: symbol option}
    | X86 of x86insn
  and x86insn =
      X86LEAINT of ty * dst * {base: var, shift: int, offset: var, disp: const}
    | X86FLD of ty * mem
    | X86FLD_ST of x86st
    | X86FST of ty * mem
    | X86FSTP of ty * mem
    | X86FSTP_ST of x86st
    | X86FADD of ty * mem
    | X86FADD_ST of x86st * x86st
    | X86FADDP of x86st
    | X86FSUB of ty * mem
    | X86FSUB_ST of x86st * x86st
    | X86FSUBP of x86st
    | X86FSUBR of ty * mem
    | X86FSUBR_ST of x86st * x86st
    | X86FSUBRP of x86st
    | X86FMUL of ty * mem
    | X86FMUL_ST of x86st * x86st
    | X86FMULP of x86st
    | X86FDIV of ty * mem
    | X86FDIV_ST of x86st * x86st
    | X86FDIVP of x86st
    | X86FDIVR of ty * mem
    | X86FDIVR_ST of x86st * x86st
    | X86FDIVRP of x86st
    | X86FPREM
    | X86FABS
    | X86FCHS
    | X86FINCSTP
    | X86FFREE of x86st
    | X86FXCH of x86st
    | X86FUCOM of x86st
    | X86FUCOMP of x86st
    | X86FUCOMPP
    | X86FSW_TESTH of {clob: var, mask: const}
    | X86FSW_MASKCMPH of {clob: var, mask: const, compare: const}
    | X86FLDCW of mem
    | X86FNSTCW of mem
    | X86FWAIT
    | X86FNCLEX
  val format_instruction : instruction 
			   -> SMLFormat.FormatExpression.expression list
  and format_x86insn : x86insn -> SMLFormat.FormatExpression.expression list
  datatype last =
      HANDLE of instruction * {nextLabel: label, handler: handler}
    | CJUMP of {test: instruction, cc: cc,
                thenLabel: label, elseLabel: label}
    | CALL of {callTo: addr, returnTo: label, handler: handler,
               defs: var list, uses: var list,
               needStabilize: bool,
               postFrameAdjust: int}
    | JUMP of {jumpTo: addr, destinations: label list}
    | UNWIND_JUMP of {jumpTo: addr, sp: operand, fp: operand,
                      uses: var list, handler: handler}
    | TAILCALL_JUMP of {preFrameSize: int, jumpTo: addr, uses: var list}
    | RETURN of {preFrameSize: int,
                 stubOptions: {forceFrameAlign: bool} option,
                 uses: var list}
    | EXIT
  val format_last : last -> SMLFormat.FormatExpression.expression list
  type block = first * instruction list * last
  val format_block : block -> SMLFormat.FormatExpression.expression list
  type frameBitmap = {source: operand, bits: tid option list}
  val format_frameBitmap : frameBitmap
			   -> SMLFormat.FormatExpression.expression list
  type graph = block LabelMap.map
  val format_graph : graph -> SMLFormat.FormatExpression.expression list
  val emptyGraph : graph
  type cluster =
      {
        clusterId: clusterId,
        frameBitmap: frameBitmap list,
        baseLabel: label option,
        body: graph,
        preFrameSize: int,
        postFrameSize: int,
        numHeaderWords: int,
        loc: loc
      }
  val format_cluster : cluster -> SMLFormat.FormatExpression.expression list
  datatype datum =
      CONST_DATA of const
    | LABELREF_DATA of labelReference
    | BINARY_DATA of Word8.word list
    | ASCII_DATA of string
    | SPACE_DATA of {size: int}
  val format_datum : datum -> SMLFormat.FormatExpression.expression list
  datatype dataSection =
      DATA_SECTION
    | RODATA_SECTION
    | LITERAL32_SECTION
    | LITERAL64_SECTION
    | CSTRING_SECTION
  val format_dataSection : dataSection
			   -> SMLFormat.FormatExpression.expression list
  type data =
      {
        scope: symbolScope,
        symbol: symbol,
        aliases: symbol list,
        ptrTy: ptrTy,
        section: dataSection,
        prefix: datum list,
        align: int,
        data: datum list,
        prefixSize: int
      }
  val format_data : data -> SMLFormat.FormatExpression.expression list
  datatype topdecl =
      TOPLEVEL of {symbol: symbol,
                   toplevelEntry: symbol,
                   nextToplevel: symbol option,
                   smlPushHandlerLabel: labelReference,
                   smlPopHandlerLabel: labelReference}
    | CLUSTER of cluster
    | DATA of data
    | BSS of {scope: symbolScope, symbol: symbol, size: int}
    | X86GET_PC_THUNK_BX of symbol
    | EXTERN of {symbol: symbol, linkStub: bool, linkEntry: bool, ptrTy: ptrTy}
  val format_topdecl : topdecl -> SMLFormat.FormatExpression.expression list
  type program = topdecl list
  val format_program : program -> SMLFormat.FormatExpression.expression list
end
