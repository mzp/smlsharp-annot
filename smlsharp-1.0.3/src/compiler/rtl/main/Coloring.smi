_require "../../../basis.smi"
_require "../../../compiler-utils/env/main/IEnv.smi"
_require "../../../compiler-utils/env/main/ISet.smi"

_require "../../control/main/Control.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../util/main/TermFormat.smi"
_require "RTL.ppg.smi"
_require "RTLUtils.smi"

structure Coloring =
struct
  type graph (= boxed)
  type regId = int

  val format_graph : graph TermFormat.formatter

  val newGraph : unit -> graph
  val addReg : graph * regId -> unit
  val disturb : graph * RTL.var * RTL.var -> unit
  val interfereWithRegs : graph * RTL.var * regId list -> unit
  val allocReg : graph * RTL.var * regId -> unit
  val sameReg : graph * RTL.var * RTL.var -> unit
  val coalescable : graph * RTL.var * RTL.var -> unit
  val disallowSpill : graph * RTL.var -> unit

  val coloring : graph
                 -> {regSubst: regId VarID.Map.map,
                     spillSubst: RTLUtils.Var.set VarID.Map.map}
end
