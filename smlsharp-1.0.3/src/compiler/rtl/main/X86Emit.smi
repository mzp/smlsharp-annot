_require "../../../basis.smi"
_require "../../control/main/Control.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../util/main/TermFormat.smi"
_require "IEEERealConst.smi"
_require "RTL.ppg.smi"
_require "RTLUtils.smi"
_require "RTLEMIT.sig"
_require "X86Asm.ppg.smi"
 
structure X86Emit =
struct
  structure Target =
  struct
    type reg = X86Asm.reg
    type program = X86Asm.program
  end
  type frameLayout =
      {
        slotIndex: int VarID.Map.map,
        preFrameOrigin: int,
        postFrameOrigin: int,
        frameAllocSize: int
      }
  val format_frameLayout : frameLayout TermFormat.formatter
  val emit : {regAlloc: X86Asm.reg VarID.Map.map,
              layoutMap: frameLayout ClusterID.Map.map}
             -> RTL.program
             -> X86Asm.program
  val formatOf : RTL.ty -> RTL.format
  val formatOfGeneric : {size: int, align: int}
end
