_require "../../../basis.smi"
_require "../../control/main/Control.ppg.smi"
_require "../../systemdef/main/BasicTypes.smi"
_require "../../util/main/ListSorter.smi"
_require "TARGET_PLATFORM.sig"
_require "TARGET_PROPERTY.sig"

functor TargetProperty(Target : sig
  eqtype uint
  eqtype sint

  structure UInt : sig
    eqtype word
    val wordSize : int
    val toLarge : word -> LargeWord.word
    val toLargeX : word -> LargeWord.word
    val toLargeWord : word -> LargeWord.word
    val toLargeWordX : word -> LargeWord.word
    val fromLarge : LargeWord.word -> word
    val fromLargeWord : LargeWord.word -> word
    val toLargeInt : word -> LargeInt.int
    val toLargeIntX : word -> LargeInt.int
    val fromLargeInt : LargeInt.int -> word
    val toInt : word -> int
    val toIntX : word -> int
    val fromInt : int -> word
    val andb : word * word -> word
    val orb : word * word -> word
    val xorb : word * word -> word
    val notb : word -> word
    val << : word * SMLSharp.Word.word -> word
    val >> : word * SMLSharp.Word.word -> word
    val ~>> : word * SMLSharp.Word.word -> word
    val + : word * word -> word
    val - : word * word -> word
    val * : word * word -> word
    val div : word * word -> word
    val mod : word * word -> word
    val compare : word * word -> order
    val < : word * word -> bool
    val <= : word * word -> bool
    val > : word * word -> bool
    val >= : word * word -> bool
    val ~ : word -> word
    val min : word * word -> word
    val max : word * word -> word
    val fmt : StringCvt.radix -> word -> string
    val toString : word -> string
    val scan : StringCvt.radix
               -> (char, 'a) StringCvt.reader
               -> (word, 'a) StringCvt.reader
    val fromString : string -> word option
  end
  sharing type uint = UInt.word
  structure SInt : sig
    eqtype int
    val toLarge : int -> LargeInt.int
    val fromLarge : LargeInt.int -> int
    val toInt : int -> SMLSharp.Int.int
    val fromInt : SMLSharp.Int.int -> int
    val precision : SMLSharp.Int.int option
    val minInt : int option
    val maxInt : int option
    val + : int * int -> int
    val - : int * int -> int
    val * : int * int -> int
    val div : int * int -> int
    val mod : int * int -> int
    val quot : int * int -> int
    val rem : int * int -> int
    val compare : int * int -> order
    val < : int * int -> bool
    val <= : int * int -> bool
    val > : int * int -> bool
    val >= : int * int -> bool
    val ~ : int -> int
    val abs : int -> int
    val min : int * int -> int
    val max : int * int -> int
    val sign : int -> SMLSharp.Int.int
    val sameSign : int * int -> bool
    val fmt : StringCvt.radix -> int -> string
    val toString : int -> string
    val scan : StringCvt.radix
               -> (char, 'a) StringCvt.reader
               -> (int, 'a) StringCvt.reader
    val fromString : string -> int option
  end
  sharing type sint = SInt.int
                      
  val toUInt : BasicTypes.UInt32 -> uint
  val toSInt : BasicTypes.SInt32 -> sint
  val charToUInt : char -> uint
  val intToUInt : int -> uint
  val intToSInt : int -> sint
  val UIntToInt : uint -> int
  val SIntToInt : sint -> int
  val wordToUInt : word -> uint
  val wordToSInt : word -> sint
  val UIntToWord : uint -> word
  val SIntToWord : sint -> word
  val UIntToSInt : uint -> sint
  val SIntToUInt : sint -> uint
  val compareUInt : uint * uint -> order
  val compareSInt : sint * sint -> order
  val compareString : string * string -> order

  (* kludges *)
  val UIntToUInt32 : uint -> BasicTypes.UInt32
  val SIntToSInt32 : sint -> BasicTypes.SInt32

  val formatUInt : StringCvt.radix -> uint -> string
  val formatSInt : StringCvt.radix -> sint -> string

  (* FIXME: we want more types! *)
  val C_UIntType  : string    (* "unsigned int" *)
  val C_SIntType  : string    (* "signed int" *)
  val C_UCharType : string    (* "unsigned char" *)
  val C_SCharType : string    (* "signed char" *)
  val C_RealType  : string    (* "double" *)
  val C_FloatType : string    (* "float" *)
  val C_PtrType   : string    (* "void *" *)

  val C_UIntSuffix : string   (* "U" *)
  val C_SIntSuffix : string   (* "" *)

  val C_sizeOfInt : word      (* sizeof(C_UIntType) *)
  val C_sizeOfPtr : word      (* sizeof(C_PtrType) *)
  val C_sizeOfReal : word     (* sizeof(C_RealType) *)
  val C_sizeOfFloat : word    (* sizeof(C_FloatType) *)

  val C_alignOfInt : word     (* __alignof__(C_UIntType) *)
  val C_alignOfPtr : word     (* __alignof__(C_PtrType) *)
  val C_alignOfReal : word    (* __alignof__(C_RealType) *)
  val C_alignOfFloat : word   (* __alignof__(C_FloatType) *)

  (* NOTE: According to C specification, both size and alignment of char
   *       is always 1. *)

  val C_integerBits : word

end) =
struct
  type uint = Target.uint
  type sint = Target.sint

  structure UInt =
  struct
    type word = Target.uint
    val wordSize : int
    val toLarge : word -> LargeWord.word
    val toLargeX : word -> LargeWord.word
    val toLargeWord : word -> LargeWord.word
    val toLargeWordX : word -> LargeWord.word
    val fromLarge : LargeWord.word -> word
    val fromLargeWord : LargeWord.word -> word
    val toLargeInt : word -> LargeInt.int
    val toLargeIntX : word -> LargeInt.int
    val fromLargeInt : LargeInt.int -> word
    val toInt : word -> int
    val toIntX : word -> int
    val fromInt : int -> word
    val andb : word * word -> word
    val orb : word * word -> word
    val xorb : word * word -> word
    val notb : word -> word
    val << : word * SMLSharp.Word.word -> word
    val >> : word * SMLSharp.Word.word -> word
    val ~>> : word * SMLSharp.Word.word -> word
    val + : word * word -> word
    val - : word * word -> word
    val * : word * word -> word
    val div : word * word -> word
    val mod : word * word -> word
    val compare : word * word -> order
    val < : word * word -> bool
    val <= : word * word -> bool
    val > : word * word -> bool
    val >= : word * word -> bool
    val ~ : word -> word
    val min : word * word -> word
    val max : word * word -> word
    val fmt : StringCvt.radix -> word -> string
    val toString : word -> string
    val scan : StringCvt.radix
               -> (char, 'a) StringCvt.reader
               -> (word, 'a) StringCvt.reader
    val fromString : string -> word option
  end
  structure SInt =
  struct
    type int = Target.sint
    val toLarge : int -> LargeInt.int
    val fromLarge : LargeInt.int -> int
    val toInt : int -> SMLSharp.Int.int
    val fromInt : SMLSharp.Int.int -> int
    val precision : SMLSharp.Int.int option
    val minInt : int option
    val maxInt : int option
    val + : int * int -> int
    val - : int * int -> int
    val * : int * int -> int
    val div : int * int -> int
    val mod : int * int -> int
    val quot : int * int -> int
    val rem : int * int -> int
    val compare : int * int -> order
    val < : int * int -> bool
    val <= : int * int -> bool
    val > : int * int -> bool
    val >= : int * int -> bool
    val ~ : int -> int
    val abs : int -> int
    val min : int * int -> int
    val max : int * int -> int
    val sign : int -> SMLSharp.Int.int
    val sameSign : int * int -> bool
    val fmt : StringCvt.radix -> int -> string
    val toString : int -> string
    val scan : StringCvt.radix
               -> (char, 'a) StringCvt.reader
               -> (int, 'a) StringCvt.reader
    val fromString : string -> int option
  end
                      
  val toUInt : BasicTypes.UInt32 -> uint
  val toSInt : BasicTypes.SInt32 -> sint
  val charToUInt : char -> uint
  val intToUInt : int -> uint
  val intToSInt : int -> sint
  val UIntToInt : uint -> int
  val SIntToInt : sint -> int
  val wordToUInt : word -> uint
  val wordToSInt : word -> sint
  val UIntToWord : uint -> word
  val SIntToWord : sint -> word
  val UIntToSInt : uint -> sint
  val SIntToUInt : sint -> uint
  val compareUInt : uint * uint -> order
  val compareSInt : sint * sint -> order
  val compareString : string * string -> order

  (* kludges *)
  val UIntToUInt32 : uint -> BasicTypes.UInt32
  val SIntToSInt32 : sint -> BasicTypes.SInt32

  val formatUInt : StringCvt.radix -> uint -> string
  val formatSInt : StringCvt.radix -> sint -> string

  (* FIXME: we want more types! *)
  val C_UIntType  : string    (* "unsigned int" *)
  val C_SIntType  : string    (* "signed int" *)
  val C_UCharType : string    (* "unsigned char" *)
  val C_SCharType : string    (* "signed char" *)
  val C_RealType  : string    (* "double" *)
  val C_FloatType : string    (* "float" *)
  val C_PtrType   : string    (* "void *" *)

  val C_UIntSuffix : string   (* "U" *)
  val C_SIntSuffix : string   (* "" *)

  val C_sizeOfInt : word      (* sizeof(C_UIntType) *)
  val C_sizeOfPtr : word      (* sizeof(C_PtrType) *)
  val C_sizeOfReal : word     (* sizeof(C_RealType) *)
  val C_sizeOfFloat : word    (* sizeof(C_FloatType) *)

  val C_alignOfInt : word     (* __alignof__(C_UIntType) *)
  val C_alignOfPtr : word     (* __alignof__(C_PtrType) *)
  val C_alignOfReal : word    (* __alignof__(C_RealType) *)
  val C_alignOfFloat : word   (* __alignof__(C_FloatType) *)

  (* NOTE: According to C specification, both size and alignment of char
   *       is always 1. *)

  val C_integerBits : word

  val basicSize : word          (* bytes of 1 word *)
  val sizeOfInt : word          (* words of 1 int *)
  val sizeOfReal : word         (* words of 1 double *)
  val sizeOfFloat : word        (* words of 1 float *)
  val sizeOfPtr : word          (* words of 1 pointer *)
  val alignOfInt : word            
  val alignOfReal : word
  val alignOfFloat : word
  val alignOfPtr : word
  val sizeVariation : word list
  val alignVariation : word list  (* corresponds to sizeVariation *)
  val maxSize : word    (* max [sizeOfX, ..., alignOfX, ...] *)
  val maxAlign : word   (* lcm [alignOfX, ...] *)
end
