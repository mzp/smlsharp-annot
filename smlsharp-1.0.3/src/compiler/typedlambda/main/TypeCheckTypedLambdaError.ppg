(**
 * @copyright (c) 2006, Tohoku University.
 * @author Atsushi Ohori
 * @version $Id: TypeCheckTypedLambdaError.ppg,v 1.4 2007/06/19 22:19:12 ohori Exp $
 *)
structure TypeCheckTypedLambdaError =
struct

  (***************************************************************************)

  local
    type longid = Absyn.longid
    structure UE = UserError
    val format_idState = Types.format_idState []
    val format_ty = Types.format_ty []
    val errorQueue = UE.createQueue ()
  in

  (*%
   * @formatter(Types.idState) format_idState
   * @formatter(Types.ty) format_ty
   * @formatter(Absyn.ty) format_absynTy
   * @formatter(path) Path.format_pathWithoutDotend
   * @formatter(longid) Absyn.format_longid
   * @formatter(PT.ptpat) PT.format_ptpat
   *)
  exception
  (*%
   * @format({polyArity, numTyargs})
   * "polytype" +d "arity" +d "and" +d "instance" +d "types" +d "mismatch"
     +1
     "polyArity:" + polyArity
     +1
     "number" +d "of" + "instance" + "types:" + numTyargs
   *)
   InstanceArityMisMatch of {polyArity : int, numTyargs:int}
   
  and
  (*%
   * @format({consExpTy, newTailExpTy, listTy})
   * "SetTail" +d "type" +d "mismatch."
     +1
     "consExpTy:" + consExpTy
     +1
     "newTailExpTy:" + newTailExpTy
     +1
     "listTy:" + listTy
   *)
   SetTailMismatch of {consExpTy : Types.ty, 
                       newTailExpTy :Types.ty,
                       listTy : Types.ty}	       

   and
  (*%
   * @format({annotation, expType})
   * "expression" + "type" +d "and" +d "annotation" +d "don't" +d "agree"
     +1
     "expression" + "type:" + expType
     +1
     "annotation:" + annotation
   *)
   TypeAndAnnotationMismatch of {annotation: Types.ty, expType : Types.ty }

   and
  (*%
   * @format({funTy, argTyList:argTy argTys})
   * "opetator" +d "and" +d "operand" +d "don't" +d "agree" 
     +1
     "operator" +d "type:" + funTy
     +1
     "operand" +d "types:" + argTys(argTy)(","+d) +d
   *)
   OperatorOperandMismatch of {funTy: Types.ty, argTyList : Types.ty list }

   and
  (*%
   * @format({numArgs, numArgTys})
   * "number" +d "of" +d "arguments" +d "and" +d "arity" +d "don't" +d "agree"
     +1
     "arguments:" + numArgs
     +1
     "arity:" + numArgTys
   *)
   ArgNumAndArgTyListMisMatch of {numArgs:int, numArgTys:int}

   and
  (*%
   * @format({argTyList: argTy argTys, argExpTyList:argExpTy argExpTys})
   * "argument" +d "type" +d "annotations" +d "and" +d "argument" +d "types" +d "don't" +d "agree"
     +1
     "annotations:" + argTys(argTy)(","+d)
     +1
     "actuals:" + argExpTys(argExpTy)(","+d)
   *)
   ArgTyListAndArgExpTyListMismatch of {argTyList : Types.ty list, argExpTyList:Types.ty list}
  
   and
   (*%
    * @format(ty) ty + "must" +d "be" +d "a" +d "record" + "type"
    *)
   RecordTermDoNotHaveARecordType of Types.ty

   and
   (*%
    * @format({recordTy, field}) "field" +d field +d "not" +d "found" +d
    *                            "in" + "record" +d "type:" recordTy
    *)
   RecordFieldNotFound of {recordTy:Types.ty, field:string}

   and
   (*%
    * @format({selectorType, recordTy}) "record" +d "type" +d "and" +d "selector" +d
    *                            "type" + "don't" +d "agree:" 
    * +1 "selector:" + selectorType
    * +1 "record" +d "type:" + recordTy
    *)
  InconsistentFieldSelector of {selectorType:Types.ty, recordTy:Types.ty}

   and
   (*%
    * @format({source, target}) "Type" +d "cast" +d "is"  +d "performed"
    * +1 "from:" + source
    * +1 "to:" + target
    *)
   CompilerCast of {source:Types.ty, target:Types.ty}

  fun initializeTypecheckError () = UE.clearQueue errorQueue
  fun getDiagnoses () = UE.getDiagnoses errorQueue
  val enqueueDiagnosis = UE.enqueueDiagnosis errorQueue

end
end
