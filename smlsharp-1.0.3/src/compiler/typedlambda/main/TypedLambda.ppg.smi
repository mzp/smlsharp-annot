_require "../../../basis.smi"
_require "../../../smlformat-lib.smi"
_require "../../../compiler-utils/env/main/SEnv.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"

_require "../../control/main/Loc.ppg.smi"
_require "../../util/main/TermFormat.smi"
_require "../../name/main/LocalID.smi"
_require "../../builtin/main/BuiltinPrimitive.ppg.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "../../types/main/Types.ppg.smi"
_require "../../constantterm/main/ConstantTerm.ppg.smi"

structure TypedLambda =
  struct
    type loc = Loc.loc
    type ty = Types.ty
    val format_ty
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> ty -> SMLFormat.FormatExpression.expression list
    type varInfo = Types.varInfo
    val format_varInfo
        : {id:VarID.id, path:string list, ty:ty}
          -> SMLFormat.FormatExpression.expression list
    val formatWithType_varInfo
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> {id:VarID.id, path:string list, ty:ty}
          -> SMLFormat.FormatExpression.expression list
    type exVarInfo = Types.exVarInfo
    val format_exVarInfo
        : {path:string list, ty:ty}
          -> SMLFormat.FormatExpression.expression list
    val formatWithType_exVarInfo
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> {path:string list, ty:ty}
          -> SMLFormat.FormatExpression.expression list
    type primInfo = Types.primInfo
    val format_primInfo : {primitive:BuiltinPrimitive.primitive, ty:ty}
                          -> SMLFormat.FormatExpression.expression list
    val formatWithType_primInfo
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> {primitive:BuiltinPrimitive.primitive, ty:ty}
          -> SMLFormat.FormatExpression.expression list
    type btvEnv = Types.btvEnv
    val format_btvEnv
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> {eqKind:Absyn.eq, tvarKind:Types.tvarKind} BoundTypeVarID.Map.map
          -> SMLFormat.FormatExpression.expression list
    type constant = ConstantTerm.constant
    val format_constant
        : constant -> SMLFormat.FormatExpression.expression list
    datatype tlexp
      = TLAPPM of {argExpList:tlexp list, funExp:tlexp, funTy:ty, loc:loc}
      | TLCAST of {exp:tlexp, loc:loc, targetTy:ty}
      | TLCONSTANT of {loc:loc, value:constant}
      | TLEXPORTCALLBACK of {foreignFunTy:Types.foreignFunTy, funExp:tlexp,
                             loc:loc}
      | TLEXVAR of {exVarInfo:exVarInfo, loc:loc}
      | TLFNM of {argVarList:varInfo list, bodyExp:tlexp, bodyTy:ty, loc:loc}
      | TLFOREIGNAPPLY of {argExpList:tlexp list,
                           foreignFunTy:Types.foreignFunTy, funExp:tlexp,
                           loc:loc}
      | TLGLOBALSYMBOL of {kind:Absyn.globalSymbolKind, loc:loc, name:string,
                           ty:ty}
      | TLHANDLE of {exnVar:varInfo, exp:tlexp, handler:tlexp, loc:loc}
      | TLINDEXOF of {label:string, loc:loc, recordTy:ty}
      | TLLET of {loc:loc, localDeclList:tldecl list, mainExp:tlexp}
      | TLMODIFY of {indexExp:tlexp, label:string, loc:loc, recordExp:tlexp,
                     recordTy:ty, valueExp:tlexp}
      | TLPOLY of {btvEnv:btvEnv, exp:tlexp, expTyWithoutTAbs:ty, loc:loc}
      | TLPRIMAPPLY of {argExpList:tlexp list, instTyList:ty list, loc:loc,
                        primInfo:primInfo}
      | TLRAISE of {argExp:tlexp, loc:loc, resultTy:ty}
      | TLRECORD of {fields:tlexp LabelEnv.map, isMutable:bool, loc:loc,
                     recordTy:ty}
      | TLSELECT of {indexExp:tlexp, label:string, loc:loc, recordExp:tlexp,
                     recordTy:ty, resultTy:ty}
      | TLSIZEOF of {loc:loc, ty:ty}
      | TLSWITCH of {branches:{constant:constant, exp:tlexp} list,
                     defaultExp:tlexp, expTy:ty, loc:loc, switchExp:tlexp}
      | TLTAGOF of {loc:loc, ty:ty}
      | TLTAPP of {exp:tlexp, expTy:ty, instTyList:ty list, loc:loc}
      | TLVAR of {loc:loc, varInfo:varInfo}
    and tldecl
      = TLEXPORTVAR of varInfo * loc
      | TLEXTERNVAR of exVarInfo * loc
      | TLVAL of {boundExp:tlexp, boundVar:varInfo, loc:loc}
      | TLVALREC of {loc:loc,
                     recbindList:{boundExp:tlexp, boundVar:varInfo} list}
    val format_tlexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> tlexp -> TermFormat.format
    val format_tldecl
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> tldecl TermFormat.formatter
    val formatWithType_tlexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> tlexp -> SMLFormat.FormatExpression.expression list
    val formatWithType_tldecl
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> tldecl TermFormat.formatter
    val format_tldecl' : tldecl TermFormat.formatter
  end
