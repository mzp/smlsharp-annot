_require "../../../basis.smi"
_require "../../../smlformat-lib.smi"

_require "../../absyn/main/Absyn.ppg.smi"
_require "../../annotatedtypes/main/AnnotatedTypes.ppg.smi"
_require "../../bitmapanormal/main/BitmapANormal.ppg.smi"
_require "../../bitmapcalc/main/BitmapCalc.ppg.smi"
_require "../../constantterm/main/ConstantTerm.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../types/main/IDCalc.ppg.smi"
_require "../../util/main/SmlppgUtil.ppg.smi"
_require "../../util/main/TermFormat.smi"

structure ClosureANormal =
struct
  type loc = Loc.loc
  type ty = AnnotatedTypes.ty
  val format_ty : AnnotatedTypes.ty -> SMLFormat.FormatExpression.expression list
  val formatWithType_ty : AnnotatedTypes.ty
                          -> SMLFormat.FormatExpression.expression list
  type tid = BoundTypeVarID.id
  val format_tid : BoundTypeVarID.id
                   -> SMLFormat.FormatExpression.expression list
  val formatWithType_tid : BoundTypeVarID.id
                           -> SMLFormat.FormatExpression.expression list
  type varInfo = BitmapANormal.varInfo
  val format_varInfo : {id:VarID.id, path:string list,
                        ty:AnnotatedTypes.ty}
                       -> SMLFormat.FormatExpression.expression list
  val formatWithType_varInfo : {id:VarID.id, path:string list,
                                ty:AnnotatedTypes.ty}
                               -> SMLFormat.FormatExpression.expression list
  type exVarInfo = BitmapANormal.exVarInfo
  val format_exVarInfo : {path:string list, ty:AnnotatedTypes.ty}
                         -> SMLFormat.FormatExpression.expression list
  val formatWithType_exVarInfo : {path:string list, ty:AnnotatedTypes.ty}
                                 -> SMLFormat.FormatExpression.expression list
  type btvEnv = BitmapANormal.btvEnv
  val format_btvEnv : SMLFormat.FormatExpression.expression list
                      -> AnnotatedTypes.btvKind BoundTypeVarID.Map.map
                         -> SMLFormat.FormatExpression.expression list
  val formatWithType_btvEnv : SMLFormat.FormatExpression.expression list
                              -> AnnotatedTypes.btvKind BoundTypeVarID.Map.map
                                 -> SMLFormat.FormatExpression.expression list
  type topId = VarID.id
  val format_topId : VarID.id
                     -> SMLFormat.FormatExpression.expression list
  val formatWithType_topId : VarID.id
                             -> SMLFormat.FormatExpression.expression list
  datatype caconst = datatype BitmapANormal.baconst
  val format_caconst : BitmapANormal.baconst
                       -> SMLFormat.FormatExpression.expression list
  val formatWithType_caconst : BitmapANormal.baconst
                               -> SMLFormat.FormatExpression.expression list
  datatype cavalue = datatype BitmapANormal.bavalue
  val format_cavalue : BitmapANormal.bavalue
                       -> SMLFormat.FormatExpression.expression list
  val formatWithType_cavalue : BitmapANormal.bavalue
                               -> SMLFormat.FormatExpression.expression list
  datatype caprim = datatype BitmapANormal.baprim
  val format_caprim : BitmapANormal.baprim
                      -> SMLFormat.FormatExpression.expression list
  val formatWithType_caprim : BitmapANormal.baprim
                              -> SMLFormat.FormatExpression.expression list
  datatype cacall = datatype BitmapANormal.bacall
  val format_cacall : BitmapANormal.bacall
                      -> SMLFormat.FormatExpression.expression list
  val formatWithType_cacall : BitmapANormal.bacall
                              -> SMLFormat.FormatExpression.expression list
  datatype caexp
    = CACALL of {callExp:BitmapANormal.bacall, loc:loc,
                 nextExp:caexp,
                 resultVars:varInfo list}
    | CACALLBACKCLOSURE of {boundVar:varInfo,
                            closureEnv:BitmapANormal.bavalue option,
                            codeId:topId,
                            foreignFunTy:AnnotatedTypes.foreignFunTy,
                            loc:loc,
                            nextExp:caexp}
    | CACLOSURE of {boundVar:varInfo,
                    closureEnv:BitmapANormal.bavalue option,
                    closureLayout:BitmapCalc.closureLayout,
                    codeId:topId, funTy:ty,
                    loc:loc, nextExp:caexp}
    | CAEXPORTVAR of {loc:loc, nextExp:caexp,
                      varInfo:varInfo,
                      varSize:BitmapANormal.bavalue,
                      varTag:BitmapANormal.bavalue}
    | CAHANDLE of {exnVar:varInfo,
                   handlerExp:caexp, loc:loc,
                   nextExp:caexp,
                   resultVars:varInfo list,
                   tryExp:caexp}
    | CALOCALFNM of {loc:loc, nextExp:caexp,
                     recbindList:{boundVar:varInfo,
                                  function:{annotation:AnnotatedTypes.annotationLabel,
                                            argVarList:varInfo list,
                                            bodyExp:caexp,
                                            funTy:ty,
                                            loc:loc}
                                 } list}
    | CAMERGE of varInfo list
    | CAPOLY of {btvEnv:btvEnv, exp:caexp,
                 expTyWithoutTAbs:ty, loc:loc,
                 nextExp:caexp,
                 resultVars:varInfo list}
    | CARAISE of {argExp:BitmapANormal.bavalue, loc:loc}
    | CARETURN of {funTy:ty, loc:loc,
                   resultVars:varInfo list}
    | CASWITCH of {nextExp:caexp,
                   resultVars:varInfo list,
                   switch:{branches:{branchExp:caexp,
                                     constant:ConstantTerm.constant} list,
                           defaultExp:caexp, expTy:ty,
                           loc:loc, switchExp:BitmapANormal.bavalue}}
    | CATAILAPPM of {argExpList:BitmapANormal.bavalue list,
                     funExp:BitmapANormal.bavalue, funTy:ty,
                     loc:loc}
    | CATAILSWITCH of {branches:{branchExp:caexp,
                                 constant:ConstantTerm.constant} list,
                       defaultExp:caexp, expTy:ty,
                       loc:loc, switchExp:BitmapANormal.bavalue}
    | CAVAL of {boundExp:BitmapANormal.baprim,
                boundVar:varInfo, loc:loc,
                nextExp:caexp}
  type localFunction =
    {annotation:AnnotatedTypes.annotationLabel,
     argVarList:varInfo list, bodyExp:caexp,
     funTy:ty, loc:loc}
  type switch =
    {branches:{branchExp:caexp, constant:ConstantTerm.constant} list,
     defaultExp:caexp, expTy:ty,
     loc:loc, switchExp:BitmapANormal.bavalue}
  val format_caexp : caexp
                     -> SMLFormat.FormatExpression.expression list
  val format_localFunction : localFunction
                             -> SMLFormat.FormatExpression.expression list
  val format_switch : switch
                      -> SMLFormat.FormatExpression.expression list
  val formatWithType_caexp : caexp
                             -> SMLFormat.FormatExpression.expression list
  val formatWithType_localFunction : localFunction
                                     -> SMLFormat.FormatExpression.expression 
                                          list
  val formatWithType_switch : switch
                              -> SMLFormat.FormatExpression.expression list
  type topconst =
    {castTy:ty option, const:BitmapANormal.baconst}
  val format_topconst : {castTy:'a, const:BitmapANormal.baconst}
                        -> SMLFormat.FormatExpression.expression list
  val formatWithType_topconst : {castTy:'a, const:BitmapANormal.baconst}
                                -> SMLFormat.FormatExpression.expression list
  datatype catopdec
    = CAEXTERNVAR of {exVarInfo:exVarInfo,
                      loc:loc}
    | CAFUNCTION of {annotation:AnnotatedTypes.annotationLabel,
                     argVarList:varInfo list,
                     attributes:Absyn.ffiAttributes option,
                     bodyExp:caexp, bodyTy:ty,
                     btvEnv:btvEnv,
                     freeTyvars:btvEnv,
                     closureEnvArg:{argVar:varInfo,
                                    freeVars:varInfo list} 
                                     option, codeId:topId,
                     frameBitmapBits:tid list,
                     frameBitmapExp:caexp,
                     frameBitmaps:varInfo list,
                     loc:loc,
                     outerFrameBitmap:tid list * 
                                      BitmapANormal.bavalue list,
                     path:IDCalc.path}
    | CARECFUNCTION of {closureEnvArg:{argVar:varInfo,
                                       freeVars:varInfo list} 
                                        option,
                        freeTyvars:btvEnv,
                        frameBitmapBits:tid list,
                        frameBitmapExp:caexp,
                        frameBitmaps:varInfo list,
                        functions:{annotation:AnnotatedTypes.annotationLabel,
                                   argVarList:varInfo list,
                                   bodyExp:caexp,
                                   codeId:topId,
                                   funTy:ty,
                                   loc:loc, path:IDCalc.path} list,
                        loc:loc}
    | CATOPARRAY of {elementSize:LargeWord.word, elementTag:LargeWord.word,
                     elementTy:ty, id:topId,
                     initialValues:topconst list,
                     isMutable:bool, numElements:LargeWord.word}
    | CATOPCLOSURE of {closureEnv:topconst option,
                       closureLayout:BitmapCalc.closureLayout,
                       codeId:topId, id:topId}
    | CATOPCONST of {constant:topconst,
                     id:topId}
    | CATOPLEVEL of caexp
    | CATOPRECORD of {bitmaps:LargeWord.word list,
                      fieldList:{fieldConst:topconst,
                                 fieldIndex:LargeWord.word,
                                 fieldTy:ty} list,
                      id:topId, isMutable:bool,
                      totalSize:LargeWord.word}
    | CATOPVAR of {elementSize:LargeWord.word, elementTy:ty,
                   initialValue:topconst option,
                   path:IDCalc.path}
  val format_catopdec : catopdec
                        -> SMLFormat.FormatExpression.expression list
  val formatWithType_catopdec : catopdec
                                -> SMLFormat.FormatExpression.expression list
end
