(* -*- sml -*- *)
(**
 * @copyright (c) 2011, Tohoku University.
 * @author UENO Katsuhiro
 *)
structure ClosureANormal =
struct

  type loc = Loc.loc

  (*%
   * @formatter(AnnotatedTypes.ty) AnnotatedTypes.formatSimple_ty
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(AnnotatedTypes.ty) AnnotatedTypes.format_ty
   *)
  type ty = AnnotatedTypes.ty

  (*%
   * @formatter(BoundTypeVarID.id) BoundTypeVarID.format_id
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(BoundTypeVarID.id) BoundTypeVarID.format_id
   *)
  type tid =
      (*% @format(id) "t" id *)
      (*% @prefix formatWithType_ @format(id) "t" id *)
      BoundTypeVarID.id

  (*%
   * @formatter(BitmapANormal.varInfo) BitmapANormal.format_varInfo
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(BitmapANormal.varInfo) BitmapANormal.formatWithType_varInfo
   *)
  type varInfo = BitmapANormal.varInfo

  (*%
   * @formatter(BitmapANormal.exVarInfo) BitmapANormal.format_exVarInfo
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(BitmapANormal.exVarInfo) BitmapANormal.formatWithType_exVarInfo
   *)
  type exVarInfo = BitmapANormal.exVarInfo

  (*%
   * @params(exp)
   * @formatter(BitmapANormal.btvEnv) BitmapANormal.format_btvEnv
   *)
  (*%
   * @prefix formatWithType_
   * @params(exp)
   * @formatter(BitmapANormal.btvEnv) BitmapANormal.format_btvEnv
   *)
  type btvEnv =
       (*% @format(env) env()(exp) *)
       (*% @prefix formatWithType_ @format(env) env()(exp) *)
       BitmapANormal.btvEnv

  (*%
   * @formatter(VarID.id) VarID.format_id
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(VarID.id) VarID.format_id
   *)
  type topId =
      (*% @format(id) "t" id *)
      (*% @prefix formatWithType_ @format(id) "t" id *)
      VarID.id

  (*%
   * @formatter(BitmapANormal.baconst) BitmapANormal.format_baconst
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(BitmapANormal.baconst) BitmapANormal.format_baconst
   *)
  datatype caconst = datatype BitmapANormal.baconst

  (*%
   * @formatter(BitmapANormal.bavalue) BitmapANormal.format_bavalue
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(BitmapANormal.bavalue) BitmapANormal.format_bavalue
   *)
  datatype cavalue = datatype BitmapANormal.bavalue

  (*%
   * @formatter(BitmapANormal.baprim) BitmapANormal.format_baprim
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(BitmapANormal.baprim) BitmapANormal.format_baprim
   *)
  datatype caprim = datatype BitmapANormal.baprim

  (*%
   * @formatter(BitmapANormal.bacall) BitmapANormal.format_bacall
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(BitmapANormal.bacall) BitmapANormal.format_bacall
   *)
  datatype cacall = datatype BitmapANormal.bacall

  (*%
   * @formatter(Absyn.ffiAttributes) Absyn.format_ffiAttributes
   * @formatter(AnnotatedTypes.annotationLabel)
   * AnnotatedTypes.format_annotationLabel
   * @formatter(AnnotatedTypes.foreignFunTy) AnnotatedTypes.format_foreignFunTy
   * @formatter(ConstantTerm.constant) ConstantTerm.format_constant
   * @formatter(appList) TermFormat.formatAppList
   * @formatter(caseList) TermFormat.formatCaseList
   * @formatter(decList) TermFormat.formatDeclList
   * @formatter(option) SmlppgUtil.formatEnclosedOpt
   * @formatter(withType) BitmapCalc.formatWithSimpleType_varInfo
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(Absyn.ffiAttributes) Absyn.format_ffiAttributes
   * @formatter(AnnotatedTypes.annotationLabel)
   * AnnotatedTypes.format_annotationLabel
   * @formatter(AnnotatedTypes.foreignFunTy) AnnotatedTypes.format_foreignFunTy
   * @formatter(ConstantTerm.constant) ConstantTerm.format_constant
   * @formatter(appList) TermFormat.formatAppList
   * @formatter(caseList) TermFormat.formatCaseList
   * @formatter(decList) TermFormat.formatDeclList
   * @formatter(option) SmlppgUtil.formatEnclosedOpt
   *)
  datatype caexp =
      (*%
       * @format({boundVar, boundExp, nextExp, loc})
       * !R1{ "let" +d boundVar:withType +d "=" 4[ +1 boundExp ] }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({boundVar, boundExp, nextExp, loc})
       * !R1{ "let" +d boundVar +d "=" 4[ +1 boundExp ] }
       * +1 "in" +d nextExp
       *)
      CAVAL of
      {
        boundVar : varInfo,
        boundExp : caprim,
        nextExp : caexp,
        loc : loc
      }
    | (*%
       * @format({resultVars: v vs, callExp, nextExp, loc})
       * !R1{ "let" +d vs:appList(v:withType)("(",",",")")
       *      +d "=" 4[ +1 callExp ] }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({resultVars: v vs, callExp, nextExp, loc})
       * !R1{ "let" +d vs:appList(v)("(",",",")") +d "=" 4[ +1 callExp ] }
       * +1 "in" +d nextExp
       *)
      CACALL of
      {
        resultVars : varInfo list,
        callExp : cacall,
        nextExp : caexp,
        loc : loc
      }
    | (*%
       * @format({varInfo, varSize, varTag, nextExp, loc})
       * !R1{ "export" +d "val"
       *      4[ +1 L2{ varInfo +1 "/t" +d varTag +1 "/s" +d varSize } ] }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({varInfo, varSize, varTag, nextExp, loc})
       * !R1{ "export" +d "val"
       *      4[ +1 L2{ varInfo +1 "/t" +d varTag +1 "/s" +d varSize } ] }
       * +1 "in" +d nextExp
       *)
      CAEXPORTVAR of
      {
        varInfo : varInfo,
        varSize : cavalue,
        varTag : cavalue,
        nextExp : caexp,
        loc : loc
      }
    | (*%
       * @format({boundVar, codeId, funTy, closureEnv: ce ceo, closureLayout, 
       *          nextExp, loc})
       * !R1{ "let" +d boundVar:withType +d "="
       *   4[ +1 "_CLOSURE(" !N0{ codeId ceo(ce)("," +1,) } ")" ] }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({boundVar, codeId, funTy, closureEnv: ce ceo, closureLayout, 
       *          nextExp, loc})
       * !R1{ "let" +d boundVar +d "="
       *   4[ +1 L2{ "_CLOSURE(" !N0{ codeId ceo(ce)("," +1,) } ")"
       *             +1 ":" +d funTy }
       *    ] }
       * +1 "in" +d nextExp
       *)
      CACLOSURE of
      {
        boundVar : varInfo,
        codeId : topId,
        funTy : ty,
        closureEnv : cavalue option,
        closureLayout : BitmapCalc.closureLayout,
        nextExp : caexp,
        loc : loc
      }
    | (*%
       * @format({boundVar, codeId, foreignFunTy, closureEnv: ce ceo,
       *          nextExp, loc})
       * !R1{ "let" +d boundVar:withType +d "="
       *   4[ +1 "_CALLBACKCLOSURE("
       *           !N0{ codeId ceo(ce)("," +1,) } ")"
       *    ] }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({boundVar, codeId, foreignFunTy, closureEnv: ce ceo,
       *          nextExp, loc})
       * !R1{ "let" +d boundVar +d "="
       *   4[ +1 L2{ "_CALLBACKCLOSURE("
       *               !N0{ codeId ceo(ce)("," +1,) } ")"
       *             +1 "as" +d foreignFunTy }
       *    ] }
       * +1 "in" +d nextExp
       *)
      CACALLBACKCLOSURE of
      {
        boundVar : varInfo,
        codeId : topId,
        foreignFunTy : AnnotatedTypes.foreignFunTy,
        closureEnv : cavalue option,
        nextExp : caexp,
        loc : loc
      }
    | (*%
       * @format({recbindList: bind binds, nextExp, loc})
       * "let" +d !R1{ binds:decList(bind)("rec" +d, +1 "and" +d) }
       * +1 "in" +d nextExp
       * @format:bind({boundVar, function})
       * boundVar:withType +d "=" 4[ +1 function ]
       *)
      (*%
       * @prefix formatWithType_
       * @format({recbindList: bind binds, nextExp, loc})
       * "let" +d !R1{ binds:decList(bind)("rec" +d, +1 "and" +d) }
       * +1 "in" +d nextExp
       * @format:bind({boundVar, function})
       * boundVar +d "=" 4[ +1 function ]
       *)
      CALOCALFNM of
      {
        recbindList : {boundVar : varInfo, function : localFunction} list,
        nextExp : caexp,
        loc : loc
      }
    | (*%
       * @format({resultVars: v vs, tryExp, exnVar, handlerExp, nextExp, loc})
       * !R1{ "let" +d vs:appList(v)("(",",",")") +d "="
       *      4[ +1 "try"
       *            2[ +1 tryExp ]
       *            +1 "handle" +d { exnVar:withType +1 "=>" }
       *            2[ +1 handlerExp ]
       *            +1 "end" ] }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({resultVars: v vs, tryExp, exnVar, handlerExp, nextExp, loc})
       * !R1{ "let" +d vs:appList(v)("(",",",")") +d "="
       *      4[ +1 "try"
       *            2[ +1 tryExp ]
       *            +1 "handle" +d { exnVar +1 "=>" }
       *            2[ +1 handlerExp ]
       *            +1 "end" ] }
       * +1 "in" +d nextExp
       *)
      CAHANDLE of
      {
        resultVars : varInfo list,
        tryExp : caexp,
        exnVar : varInfo,
        handlerExp : caexp,
        nextExp : caexp,
        loc : loc
      }
    | (*%
       * @format({resultVars: v vs, switch, nextExp})
       * !R1{ "let" +d vs:appList(v:withType)("(",",",")") +d "=" 4[ +1 
       *   switch
       * ] }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({resultVars: v vs, switch, nextExp})
       * !R1{ "let" +d vs:appList(v)("(",",",")") +d "=" 4[ +1 switch ] }
       * +1 "in" +d nextExp
       *)
      CASWITCH of
      {
        resultVars : varInfo list,
        switch : switch,
        nextExp : caexp
      }
    | (*%
       * @format(switch) switch
       *)
      (*%
       * @prefix formatWithType_
       * @format(switch) switch
       *)
      CATAILSWITCH of switch
    | (*%
       * @format({resultVars: v vs, btvEnv, expTyWithoutTAbs, exp, nextExp,
       *          loc})
       * !R1{ "let" +d vs:appList(v:withType)("(",",",")") +d "=" 4[ +1 
       *   btvEnv()(!R1{exp})
       * ] }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({resultVars: v vs, btvEnv, expTyWithoutTAbs, exp, nextExp,
       *          loc})
       * !R1{ "let" +d vs:appList(v)("(",",",")") +d "=" 4[ +1 
       *   btvEnv()(L2{ R1{exp} +1 ":" +d expTyWithoutTAbs })
       * ] }
       * +1 "in" +d nextExp
       *)
      CAPOLY of
      {
        resultVars : varInfo list,
        btvEnv : btvEnv,
        expTyWithoutTAbs : ty,
        exp : caexp,
        nextExp : caexp,
        loc : loc
      }
(*
    | (*%
       * @format({resultVars: v vs, nestExp, nextExp})
       * !R1{ "let" +d vs:appList(v:withType)("(",",",")")
       *            +d "=" 4[ +1 nestExp ] }
       * +1 "in" +d nextExp
       *)
      (*%
       * @prefix formatWithType_
       * @format({resultVars: v vs, nestExp, nextExp})
       * !R1{ "let" +d vs:appList(v)("(",",",")") +d "=" 4[ +1 nestExp ] }
       * +1 "in" +d nextExp
       *)
      CANEST of
      {
        resultVars : varInfo list,
        (* any branch in nestExp must be ended with CAMERGE. *)
        nestExp : caexp,
        nextExp : caexp
      }
*)
    | (*%
       * @format(v vs)
       * !R1{ "_MERGE" +d vs:appList(v)("(",",",")") }
       *)
      (*%
       * @prefix formatWithType_
       * @format(v vs)
       * !R1{ "_MERGE" +d vs:appList(v)("(",",",")") }
       *)
      CAMERGE of varInfo list
    | (*%
       * @format({resultVars: v vs, funTy, loc})
       * L8{ 2[ "_RETURN"
       *        +2 vs:appList(v)("(",",",")") ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({resultVars: v vs, funTy, loc})
       * L2{ L8{ 2[ "_RETURN"
       *            +2 vs:appList(v)("(",",",")") ] }
       *     +1 ":" +d funTy }
       *)
      CARETURN of
      {
        resultVars : varInfo list,
        funTy : ty,
        loc : loc
      }
    | (*%
       * @format({funExp, funTy, argExpList: arg args, loc})
       * L8{ "_TAILAPP"
       *     2[ +1 funExp
       *        +1 args:appList(arg)("(",",",")") ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({funExp, funTy, argExpList: arg args, loc})
       * L8{ "_TAILAPP"
       *     2[ +1 L2{ funExp +d ":" +1 funTy }
       *        +1 args:appList(arg)("(",",",")") ] }
       *)
      CATAILAPPM of
      {
        funExp : cavalue,
        funTy : ty,
        argExpList : cavalue list,
        loc : loc
      }
    | (*%
       * @format({argExp, loc})
       * !R1{ 2[ "raise" +1 argExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({argExp, loc})
       * !R1{ 2[ "raise" +1 argExp ] }
       *)
      CARAISE of
      {
        argExp : cavalue,
        loc : loc
      }

  withtype localFunction =
      (*%
       * @format({argVarList: arg args, funTy,
       *          bodyExp, annotation, loc})
       * !R1{"local" +d "fn" +d args:appList(arg:withType)("(",",",")") +d "=>"
       *     3[ +1 bodyExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({argVarList: arg args, funTy,
       *          bodyExp, annotation, loc})
       * L2{ R1{"local" +d "fn" +d args:appList(arg)("(",",",")") +d "=>"
       *        3[ +1 bodyExp ] }
       *     +1 ":" +d funTy }
       *)
      {
        argVarList : varInfo list,
        funTy : ty,
        bodyExp : caexp,
        annotation : AnnotatedTypes.annotationLabel,
        loc : loc
      }

  and switch =
      (*%
       * @format({switchExp, expTy, branches: branch branches, defaultExp, loc})
       * !R1{
       *   { 2[ "case" +1 switchExp +1 "of" ] }
       *   branches:caseList(branch)(2[+1], +1 "|" +d,
       *                             !R1{ 2[ "_" +d "=>" +1 defaultExp ] })
       * }
       * @format:branch({constant, branchExp})
       * !R1{ 2[ constant +d "=>" +1 branchExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({switchExp, expTy, branches: branch branches, defaultExp, loc})
       * !R1{
       *   { 2[ "case" +1 L2{ switchExp +1 ":" +d expTy } +1 "of" ] }
       *   branches:caseList(branch)(2[+1], +1 "|" +d,
       *                             !R1{ 2[ "_" +d "=>" +1 defaultExp ] })
       * }
       * @format:branch({constant, branchExp})
       * !R1{ 2[ constant +d "=>" +1 branchExp ] }
       *)
      {
        switchExp : cavalue,
        expTy : ty,
        branches : {constant : ConstantTerm.constant, branchExp : caexp} list,
        defaultExp : caexp,
        loc : loc
      }

  (*% *)
  (*% @prefix formatWithType_ *)
  type topconst =
      (*%
       * @format({const, castTy})
       * const
       *)
      (*%
       * @prefix formatWithType_
       * @format({const, castTy})
       * const
       *)
      {
        const : caconst,
        castTy : ty option
      }

  (*%
   * @formatter(IDCalc.path) IDCalc.format_path
   * @formatter(Absyn.ffiAttributes) Absyn.format_ffiAttributes
   * @formatter(appList) TermFormat.formatAppList
   * @formatter(decList) TermFormat.formatDeclList
   * @formatter(enclosedList) TermFormat.formatEnclosedList
   * @formatter(bool) SmlppgUtil.formatBinaryChoice
   * @formatter(option) SmlppgUtil.formatEnclosedOpt
   * @formatter(withType) BitmapCalc.formatWithSimpleType_varInfo
   *)
  (*%
   * @prefix formatWithType_
   * @formatter(IDCalc.path) IDCalc.format_path
   * @formatter(Absyn.ffiAttributes) Absyn.format_ffiAttributes
   * @formatter(appList) TermFormat.formatAppList
   * @formatter(decList) TermFormat.formatDeclList
   * @formatter(enclosedList) TermFormat.formatEnclosedList
   * @formatter(bool) SmlppgUtil.formatBinaryChoice
   * @formatter(option) SmlppgUtil.formatEnclosedOpt
   *)
  datatype catopdec =
      (*%
       * @format({codeId, path, btvEnv, freeTyvars, bodyTy,
       *          attributes: attr attro,
       *          closureEnvArg: ce ceo,
       *          argVarList: arg args,
       *          frameBitmapExp, frameBitmaps: bm bms,
       *          frameBitmapBits: bit bits,
       *          outerFrameBitmap, bodyExp, annotation, loc})
       * !R1{ "val" +d "code" +d codeId "(" path ")" +d "="
       *   4[ +1 btvEnv()(
       *        attro(attr)("__attributes__(", ")" +1)
       *        ceo(ce)("_env" +d, +d "=>" +1)
       *        !R1{ "fn" +d args:appList(arg)("(",",",")") +d "=>"
       *             3[ +1 "let" +d "frame"
       *                +d L2{ bms:appList(bm)("(",",",")")
       *                       +1 "/" +d bits:enclosedList(bit)("(",",",")") }
       *                +d "="
       *                4[ +1 frameBitmapExp ] ]
       *             3[ +1 "in" +d bodyExp ] }
       *    ) ] }
       * @format:ce({argVar, freeVars: fv fvs})
       * L2{ argVar:withType +1 "/" +d fvs:appList(fv)("(",",",")") }
       *)
      (*%
       * @prefix formatWithType_
       * @format({codeId, path, btvEnv, freeTyvars, bodyTy,
       *          attributes: attr attro,
       *          closureEnvArg: ce ceo,
       *          argVarList: arg args,
       *          frameBitmapExp, frameBitmaps: bm bms,
       *          frameBitmapBits: bit bits,
       *          outerFrameBitmap, bodyExp, annotation, loc})
       * !R1{ "val" +d "code" +d codeId "(" path ")" +d "="
       *   4[ +1 btvEnv()(
       *        attro(attr)("__attributes__(", ")" +1)
       *        ceo(ce)("_env" +d, +d "=>" +1)
       *        R1{ "fn" +d args:appList(arg)("(",",",")") +d "=>"
       *            3[ +1 "let" +d "frame"
       *               +d L2{ bms:appList(bm)("(",",",")")
       *                      +1 "/" +d bits:enclosedList(bit)("(",",",")") }
       *               +d "="
       *               4[ +1 frameBitmapExp ] ]
       *            3[ +1 "in" +d L2{ bodyExp +1 ":" +d bodyTy } ] }
       *    ) ] }
       * @format:ce({argVar, freeVars: fv fvs})
       * L2{ argVar +1 "/" +d fvs:appList(fv)("(",",",")") }
       *)
      CAFUNCTION of
      {
        codeId : topId,
        path : IDCalc.path,
        (* type abstruction originated by type generalization *)
        btvEnv : btvEnv,
        (* free type variables which may occur in everything inside of
         * the type abstraction denoted by btvEnv. Each tyvar in freeTyvars
         * but not in btvEnv denotes either a free type variable or
         * a type variable whose tag is constant. *)
        freeTyvars : btvEnv,
        (* type of bodyExp *)
        bodyTy : ty,
        attributes : Absyn.ffiAttributes option,
        (* bound variable holding a closure environment. *)
        closureEnvArg : {argVar: varInfo, freeVars: varInfo list} option,
        (* bound variables of function arguments *)
        argVarList : varInfo list,
        (* frame bitmap computation *)
        frameBitmapExp : caexp,
        (* frame bitmap computation result.
         * Lower bitmap word is first. *)
        frameBitmaps : varInfo list,
        (* correspondence between tyvars and bits in the frame bitmap.
         * first tid corresponds to LSB of the frame bitmap. *)
        frameBitmapBits : tid list,
        (* only for ToYAAnormal *)
        outerFrameBitmap : tid list * cavalue list,
        bodyExp : caexp,
        annotation : AnnotatedTypes.annotationLabel,
        loc : loc
      }
    | (*%
       * @format({closureEnvArg: ce ceo, freeTyvars,
       *          frameBitmapExp, frameBitmaps: bm bms,
       *          frameBitmapBits: bit bits,
       *          functions: func funcs, loc})
       * "recfncode"
       * 2[ +1 ceo(ce)("_env" +d, +d "=>" +1)
       *       "let" +d "frame"
       *             +d L2{ bms:appList(bm:withType)("(",",",")")
       *                    +1 "/" +d bits:enclosedList(bit)("(",",",")") }
       *             +d "="
       *             4[ +1 frameBitmapExp ]
       *    +1 "let"
       *    4[ funcs:decList(func)(+d "rec" +d, +1 "and" +d) ]
       *  ]
       * +1 "end"
       * @format:ce({argVar, freeVars: fv fvs})
       * L2{ argVar +1 "/" +d fvs:appList(fv)("(",",",")") }
       * @format:func({codeId, path, argVarList: arg args, funTy,
       *               bodyExp, annotation, loc})
       * "code" +d codeId "(" path ")" +d "=" +1
       * R1{ "fn" +d args:appList(arg:withType)("(",",",")") +d "=>"
       *     3[ +1 bodyExp ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({closureEnvArg: ce ceo, freeTyvars,
       *          frameBitmapExp, frameBitmaps: bm bms,
       *          frameBitmapBits: bit bits,
       *          functions: func funcs, loc})
       * "recfncode"
       * 2[ +1 ceo(ce)("_env" +d, +d "=>" +1)
       *       "let" +d "frame"
       *             +d L2{ bms:appList(bm)("(",",",")")
       *                    +1 "/" +d bits:enclosedList(bit)("(",",",")") }
       *             +d "="
       *             4[ +1 frameBitmapExp ]
       *    +1 "let"
       *    4[ funcs:decList(func)(+d "rec" +d, +1 "and" +d) ]
       *  ]
       * +1 "end"
       * @format:ce({argVar, freeVars: fv fvs})
       * L2{ argVar +1 "/" +d fvs:appList(fv)("(",",",")") }
       * @format:func({codeId, path, argVarList: arg args, funTy,
       *               bodyExp, annotation, loc})
       * "code" +d codeId "(" path ")" +d "=" +1
       *    L2{
       *      R1{ "fn" +d args:appList(arg)("(",",",")") +d "=>"
       *          3[ +1 bodyExp ] }
       *      +1 ":" +d funTy }
       *)
      CARECFUNCTION of
      {
        closureEnvArg : {argVar: varInfo, freeVars: varInfo list} option,
        freeTyvars : btvEnv,
        frameBitmapExp : caexp,
        frameBitmaps : varInfo list,
        frameBitmapBits : tid list,
        functions : {codeId : topId,
                     path : IDCalc.path,
                     argVarList : varInfo list,
                     funTy : ty,
                     bodyExp : caexp,
                     annotation : AnnotatedTypes.annotationLabel,
                     loc : loc} list,
        loc : loc
      }
    | (*%
       * @format({id, constant})
       * "CATOPCONST"
       *)
      (*%
       * @prefix formatWithType_
       * @format({id, constant})
       * "CATOPCONST"
       *)
      CATOPCONST of
      {
        id : topId,
        constant : topconst
      }
    | (*%
       * @format({id, bitmaps, totalSize,
       *          fieldList: field fields, isMutable})
       * @format:field({fieldConst, fieldTy, fieldIndex})
       * "CATOPRECORD"
       *)
      (*%
       * @prefix formatWithType_
       * @format({id, bitmaps, totalSize, fieldList: field fields, isMutable})
       * @format:field({fieldConst, fieldTy, fieldIndex})
       * "CATOPRECORD"
       *)
      CATOPRECORD of
      {
        id : topId,
        bitmaps : LargeWord.word list,
        totalSize : LargeWord.word,
        fieldList : {fieldConst : topconst,
                     fieldTy : ty,
                     fieldIndex : LargeWord.word} list,
        isMutable : bool
      }
    | (*%
       * @format({id, codeId, closureEnv: ce ceo, closureLayout})
       * "CATOPCLOSURE"
       *)
      (*%
       * @prefix formatWithType_
       * @format({id, codeId, closureEnv: ce ceo, closureLayout})
       * "CATOPCLOSURE"
       *)
      CATOPCLOSURE of
      {
        id : topId,
        codeId : topId,
        closureEnv : topconst option,
        closureLayout : BitmapCalc.closureLayout
      }
    | (*%
       * @format({id, numElements, initialValues: value values,
       *          elementTy, elementTag, elementSize, isMutable})
       * "CATOPARRAY"
       *)
      (*%
       * @prefix formatWithType_
       * @format({id, numElements, initialValues: value values,
       *          elementTy, elementTag, elementSize, isMutable})
       * "CATOPARRAY"
       *)
      CATOPARRAY of
      {
        id : topId,
        numElements : LargeWord.word,
        initialValues : topconst list,
        elementTy : ty,
        elementTag : LargeWord.word,
        elementSize : LargeWord.word,
        isMutable : bool
      }
    | (*%
       * @format({path, initialValue: value valueo,
       *          elementTy, elementSize})
       * "CATOPVAR" + path
       *)
      (*%
       * @prefix formatWithType_
       * @format({path, initialValue: value valueo,
       *          elementTy, elementSize})
       * "CATOPVAR" + path
       *)
      CATOPVAR of
      {
        path : IDCalc.path,
        initialValue : topconst option,
        elementTy : ty,
        elementSize : LargeWord.word
      }
    | (*%
       * @format({exVarInfo, loc})
       * !R1{ "extern" +d "val" +d exVarInfo }
       *)
      (*%
       * @prefix formatWithType_
       * @format({exVarInfo, loc})
       * !R1{ "extern" +d "val" +d exVarInfo }
       *)
      CAEXTERNVAR of
      {
        exVarInfo : exVarInfo,
        loc : loc
      }
    | (*%
       * @format(exp) exp
       *)
      (*%
       * @prefix formatWithType_
       * @format(exp) exp
       *)
      CATOPLEVEL of caexp

end
