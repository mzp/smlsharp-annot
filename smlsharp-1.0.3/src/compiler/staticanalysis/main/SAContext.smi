_require "../../../basis.smi"
_require "SACONTEXT.sig"
_require "../../../compiler-utils/env/main/SEnv.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"
_require "../../../compiler-utils/env/main/PathEnv.smi"

_require "../../annotatedcalc/main/AnnotatedCalc.ppg.smi"
_require "../../annotatedtypes/main/AnnotatedTypes.ppg.smi"
_require "../../control/main/Control.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../typedlambda/main/TypedLambda.ppg.smi"

structure SAContext =
struct
  type context = {varEnv : AnnotatedCalc.varInfo VarID.Map.map,
                  exVarEnv : AnnotatedCalc.exVarInfo PathEnv.map,
                  btvEnv : AnnotatedCalc.btvEnv}
  val empty : context
  val insertVariable : context -> AnnotatedCalc.varInfo -> context
  val insertVariables : context -> (AnnotatedCalc.varInfo list) -> context
  val insertExVar : context -> AnnotatedCalc.exVarInfo -> context
  val insertBtvEnv : context -> AnnotatedTypes.btvEnv -> context
  val lookupVariable : context  -> TypedLambda.varInfo -> Loc.loc -> AnnotatedCalc.varInfo
  val lookupExVar : context -> TypedLambda.exVarInfo -> Loc.loc -> AnnotatedCalc.exVarInfo
  val lookupTid : context -> BoundTypeVarID.id -> AnnotatedTypes.btvKind
  val fieldType : context -> (AnnotatedTypes.ty * string) -> AnnotatedTypes.ty
end
