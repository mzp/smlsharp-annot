_require "../../../basis.smi"
_require "../../../compiler-utils/env/main/SEnv.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"

_require "../../builtin/main/BuiltinType.ppg.smi"
_require "../../control/main/Control.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../types/main/IDCalc.ppg.smi"
_require "../../types/main/Types.ppg.smi"
_require "../../types/main/OPrimInstMap.smi"
_require "../../types/main/TypesUtils.smi"

structure ReduceTy =
struct
  val substTy : Types.ty BoundTypeVarID.Map.map * Types.ty -> Types.ty
  val substSingletonTy : Types.ty BoundTypeVarID.Map.map * Types.singletonTy
                         -> Types.singletonTy
  val substoprimSelector : Types.ty BoundTypeVarID.Map.map * 
                           {instMap:Types.overloadMatch OPrimInstMap.map,
                            keyTyList:Types.ty list,
                            match:Types.overloadMatch,
                            oprimId:OPrimID.id, path:IDCalc.path}
                           -> Types.oprimSelector
  val substMatch : Types.ty BoundTypeVarID.Map.map * Types.overloadMatch
                   -> Types.overloadMatch
  val substInstMap : Types.ty BoundTypeVarID.Map.map * 
                     Types.overloadMatch OPrimInstMap.map
                     -> Types.overloadMatch OPrimInstMap.map
  val reduceTyCon : {arity:int, conSet:{hasArg:bool} SEnv.map,
                     dtyKind:Types.dtyKind, extraArgs:Types.ty list,
                     id:IDCalc.typId, iseq:bool, path:IDCalc.path,
                     runtimeTy:BuiltinType.ty}
                    -> {arity:int, conSet:{hasArg:bool} SEnv.map,
                        dtyKind:Types.dtyKind, extraArgs:Types.ty list,
                        id:IDCalc.typId, iseq:bool, path:IDCalc.path,
                        runtimeTy:BuiltinType.ty}
  val reduceTy : Types.ty -> Types.ty
  val reduceSingletonTy : Types.singletonTy -> Types.singletonTy
  val reduceOprimSelector : {instMap:Types.overloadMatch OPrimInstMap.map,
                             keyTyList:Types.ty list,
                             match:Types.overloadMatch,
                             oprimId:OPrimID.id, path:IDCalc.path}
                            -> Types.oprimSelector
  val reduceMatch : Types.overloadMatch -> Types.overloadMatch
  val reduceInstMap : Types.overloadMatch OPrimInstMap.map
                      -> Types.overloadMatch OPrimInstMap.map
end
