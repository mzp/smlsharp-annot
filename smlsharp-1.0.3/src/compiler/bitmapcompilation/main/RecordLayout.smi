_require "../../../basis.smi"
_require "../../annotatedtypes/main/AnnotatedTypes.ppg.smi"
_require "../../annotatedtypes/main/AnnotatedTypesUtils.smi"
_require "../../bitmapcalc/main/BitmapCalc.ppg.smi"
_require "../../builtin/main/BuiltinPrimitive.ppg.smi"
_require "../../control/main/Control.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../runtimetypes/main/RuntimeTypes.ppg.smi"
_require "../../runtimetypes/main/TypeLayout.smi"
_require "../../types/main/BuiltinEnv.smi"

structure RecordLayout =
struct

  datatype value =
      CONST of LargeWord.word
    | VAR of BitmapCalc.varInfo * AnnotatedTypes.ty option

  datatype decl =
      MOVE of BitmapCalc.varInfo * value
    | PRIMAPPLY of {boundVar: BitmapCalc.varInfo,
                    primInfo: BitmapCalc.primInfo,
                    argList: value list}

  type bitmap (= boxed)

  val printValue : value -> unit
  val printValues : value list -> unit
  val printBitmap : bitmap -> unit

  val const : int -> value
  val toLargeWord : value -> LargeWord.word option
  val castToWord : value -> value

  val emptyBitmap : bitmap
  val bitmapWords : bitmap -> value list

  val computeIndex : {size: value} list * {size: value} -> decl list * value
  val computeRecord : {tag: value, size: value} list
                      -> decl list
                         * {totalSize: value,
                            fieldIndexes: value list,
                            bitmap: value list}

  val addBitsToBitmap : {tag: value} list * bitmap -> decl list * bitmap
end 
