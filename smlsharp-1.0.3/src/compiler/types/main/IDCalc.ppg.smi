_require "../../../basis.smi"
_require "../../../smlformat-lib.smi"
_require "../../../compiler-utils/env/main/SEnv.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"

_require "../../util/main/TermFormat.smi"
_require "../../util/main/SmlppgUtil.ppg.smi"
_require "../../util/main/gensym.smi"
_require "../../control/main/Control.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../builtin/main/BuiltinPrimitive.ppg.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "../../patterncalc/main/PatternCalc.ppg.smi"
_require "../../builtin/main/BuiltinType.ppg.smi"
_require "tvarMap.smi"
_require "Types.ppg.smi"

structure IDCalc =
struct
  type path = string list
  type typId = TypID.id
  type conId = ConID.id
  type varId = VarID.id
  type exnId = ExnID.id
  type oprimId = OPrimID.id
  type tvarId = TvarID.id
  type revealKey = RevealID.id
  type tvar = {name:string, id:tvarId, eq:Absyn.eq, lifted:bool}
  type liftedTys = TvarSet.set
  type formals = tvar list
  type varInfo = {path: path, id: varId}
  type oprimInfo = {path: path, id: oprimId}
  type constant = Absyn.constant
  type typesTy = Types.ty
  datatype ty
    = TYWILD
    | TYERROR
    | TYVAR of tvar
    | TYRECORD of ty LabelEnv.map
    | TYCONSTRUCT of {typ:{path: path, tfun: tfun}, args:ty list}
    | TYFUNM of ty list * ty
    | TYPOLY of (tvar * tvarKind) list * ty
    | INFERREDTY of typesTy

  and tvarKind
    = UNIV
    | REC of ty LabelEnv.map
  and tfun
    = TFUN_DEF of {iseq:bool, formals:formals, realizerTy:ty}
    | TFUN_VAR of tfunkind ref
  and tfunkind
    = TFUN_DTY of {id:typId,
                   iseq:bool,
                   formals:formals,
                   originalPath:path,
                   conSpec:(ty option) SEnv.map,
		   runtimeTy:BuiltinType.ty,
                   liftedTys:liftedTys,
                   dtyKind:dtyKind
                  }
    | TFV_SPEC of {id:typId, iseq:bool, formals:formals}
    | TFV_DTY of {id:typId,
                  iseq:bool,
                  formals:formals,
                  conSpec:(ty option) SEnv.map,
                  liftedTys:liftedTys}
    | REALIZED of {id:typId, tfun:tfun}
    | INSTANTIATED of {tfunkind:tfunkind, tfun:tfun}
    | FUN_DTY of {tfun:tfun,
                  varE:idstatus SEnv.map,
                  formals:formals,
                  conSpec:(ty option) SEnv.map,
                  liftedTys:liftedTys}

  and dtyKind
    = FUNPARAM
    | DTY
    | DTY_INTERFACE
    | OPAQUE of {tfun:tfun, revealKey:revealKey}
    | BUILTIN of BuiltinType.ty

   and idstatus
    = IDVAR of varId
    | IDVAR_TYPED of {id:varId, ty:ty}
    | IDEXVAR of {path:path, ty:ty, used:bool ref, loc:Loc.loc, version:int option, internalId:varId option}
    | IDEXVAR_TOBETYPED of {path:path, id:varId, loc:Loc.loc, version:int option, internalId:varId option}
    | IDBUILTINVAR of {primitive: BuiltinPrimitive.primitive, ty:ty}
    | IDCON of {id:conId, ty:ty}
    | IDEXN of {id:exnId, ty:ty}
    | IDEXNREP of {id:exnId, ty:ty}
    | IDEXEXN of {path:path, ty:ty, used: bool ref, loc:Loc.loc, version:int option}
    | IDEXEXNREP of {path:path, ty:ty, used:bool ref, loc:Loc.loc, version:int option}
    | IDOPRIM of {id:oprimId, overloadDef:icdecl, used:bool ref, loc:Loc.loc}
    | IDSPECVAR of ty
    | IDSPECEXN of ty
    | IDSPECCON

   and icexp 
    = ICERROR of Loc.loc
    | ICCONSTANT of constant * Loc.loc
    | ICGLOBALSYMBOL of string * Absyn.globalSymbolKind * Loc.loc
    | ICVAR of varInfo * Loc.loc
    | ICEXVAR of {path:path, ty:ty} * Loc.loc
    | ICEXVAR_TOBETYPED of {path:path, id:varId} * Loc.loc
    | ICBUILTINVAR of {primitive:BuiltinPrimitive.primitive, ty:ty, loc:Loc.loc}
    | ICCON of {path: path, ty:ty, id: conId} * Loc.loc
    | ICEXN of {path: path, id: exnId, ty:ty} * Loc.loc
    | ICEXEXN of {path:path, ty:ty} * Loc.loc
    | ICEXN_CONSTRUCTOR of {path: path, id: exnId, ty:ty} * Loc.loc
    | ICEXEXN_CONSTRUCTOR of {path:path, ty:ty} * Loc.loc
    | ICOPRIM of oprimInfo * Loc.loc
    | ICTYPED of icexp * ty * Loc.loc
    | ICSIGTYPED of {path:path,icexp:icexp,ty:ty,loc:Loc.loc,revealKey:revealKey}
    | ICAPPM of icexp * icexp list * Loc.loc
    | ICAPPM_NOUNIFY of icexp * icexp list * Loc.loc
    | ICLET of icdecl list * icexp list * Loc.loc
    | ICTYCAST of {from:tfun, to:tfun} list * icexp * Loc.loc
    | ICRECORD of (string * icexp) list * Loc.loc
    | ICRAISE of icexp * Loc.loc
    | ICHANDLE of icexp * (icpat * icexp) list * Loc.loc
    | ICFNM of {args:icpat list, body:icexp} list * Loc.loc 
    | ICFNM1 of (varInfo * ty list) list * icexp * Loc.loc 
    | ICFNM1_POLY of (varInfo * ty) list * icexp * Loc.loc
    | ICCASEM of icexp list 
               * {args:icpat list, body:icexp} list 
               * PatternCalc.caseKind 
               * Loc.loc
    | ICRECORD_UPDATE of icexp * (string * icexp) list * Loc.loc
    | ICRECORD_SELECTOR of string * Loc.loc 
    | ICSELECT of string * icexp * Loc.loc
    | ICSEQ of icexp list * Loc.loc
    | ICCAST of icexp * Loc.loc
    | ICFFIIMPORT of icexp * ffiTy * Loc.loc
    | ICFFIEXPORT of icexp * ffiTy * Loc.loc
    | ICFFIAPPLY of Absyn.ffiAttributes option
                    * icexp * ffiArg list * ffiTy * Loc.loc
    | ICSQLSERVER of string * ty * Loc.loc
    | ICSQLDBI of icpat * icexp * Loc.loc
    
  and ffiArg
    = ICFFIARG of icexp * ffiTy * Loc.loc
    | ICFFIARGSIZEOF of ty * icexp option * Loc.loc

  and icpat 
    = ICPATERROR of Loc.loc
    | ICPATWILD of Loc.loc
    | ICPATVAR of varInfo * Loc.loc
    | ICPATCON of {path: path, ty:ty, id: conId} * Loc.loc
    | ICPATEXN of {path: path, id: exnId, ty:ty} * Loc.loc
    | ICPATEXEXN of {path:path, ty:ty} * Loc.loc
    | ICPATCONSTANT of constant * Loc.loc
    | ICPATCONSTRUCT of {con: icpat, arg: icpat, loc:Loc.loc}
    | ICPATRECORD of {flex: bool, fields: (string * icpat) list, loc:Loc.loc}
    | ICPATLAYERED of {patVar : varInfo, tyOpt: ty option, pat: icpat, loc:Loc.loc}
    | ICPATTYPED of icpat * ty * Loc.loc
  
  and icdecl
    = ICVAL of (tvar * tvarKind) list * (icpat * icexp) list * Loc.loc
    | ICDECFUN of
         {
          guard: (tvar * tvarKind) list,
          funbinds:
            {
             funVarInfo: varInfo,
             rules: {args: icpat list, body: icexp} list
            } list,
          loc:Loc.loc
         }
    | ICNONRECFUN of
         {
          guard: (tvar * tvarKind) list,
          funVarInfo: varInfo,
          rules: {args: icpat list, body: icexp} list,
          loc:Loc.loc
         }
    | ICVALREC of {guard: (tvar * tvarKind) list,
                   recbinds: {varInfo: varInfo,
                              body: icexp} list,
                   loc:Loc.loc}
    | ICABSTYPE of
        {tybinds: 
          {args: tvar list,
           typInfo: {path: path, tfun: tfun},
           datacon: {datacon: {path: path, ty:ty, id: conId}, tyOpt: ty option} list
          } list,
         body: icdecl list,
         loc:Loc.loc
        }
    | ICEXND of {exnInfo: {path: path, id: exnId, ty:ty}, loc:Loc.loc} list * Loc.loc
    | ICEXNTAGD of {exnInfo: {path: path, id: exnId, ty:ty}, varInfo:varInfo} * Loc.loc
    | ICEXPORTVAR of varInfo * ty * Loc.loc
    | ICEXPORTTYPECHECKEDVAR of varInfo * Loc.loc
    | ICEXPORTFUNCTOR of varInfo * ty * Loc.loc
    | ICEXPORTEXN of {path: path, id: exnId, ty:ty} * Loc.loc
    | ICEXTERNVAR of {path:path, ty:ty} * Loc.loc
    | ICEXTERNEXN of {path:path, ty:ty} * Loc.loc
    | ICOVERLOADDEF of {boundtvars:(tvar * tvarKind) list,
                        id:oprimId,path:path,
                        overloadCase:
                         {tvar: tvar,
                          expTy: ty,
                          matches: {instTy: ty, instance: overloadInstance} list,
                          loc: Loc.loc},
                        loc:Loc.loc}

  and overloadInstance 
    = INST_OVERLOAD of 
      {tvar: tvar,
       expTy: ty,
       matches: {instTy: ty, instance: overloadInstance} list,
       loc: Loc.loc}
    | INST_EXVAR of {path: path, used:bool ref, ty: ty} * Loc.loc
    | INST_PRIM of {primitive: BuiltinPrimitive.primitive, ty: ty} * Loc.loc

  and ffiTy 
    = FFIFUNTY of Absyn.ffiAttributes option * ffiTy list * ffiTy list * Loc.loc
    | FFIRECORDTY of (string * ffiTy) list * Loc.loc
    | FFIBASETY of ty * Loc.loc

  type kindedTvar = tvar * tvarKind
  type typInfo = {path: path, tfun: tfun}
  type conInfo = {path: path, ty:ty, id: conId}
  type exnInfo = {path: path, id: exnId, ty:ty}
  type conSpec = (ty option) SEnv.map
  type varE = idstatus SEnv.map
  type tycast = {from:tfun, to:tfun}
  type scopedTvars = kindedTvar list
  type overloadCase 
    =  {tvar: tvar,
        expTy: ty,
        matches: {instTy: ty, instance: overloadInstance} list,
        loc: Loc.loc}

  val derefTfun : tfun -> tfun
  val emptyLiftedTys : liftedTys
  val formatEnclosedTvarMap
    : ('a -> TermFormat.format) 
      * TermFormat.format 
      * TermFormat.format
      * TermFormat.format
      * TermFormat.format
      -> 'a TvarMap.map -> TermFormat.format
  val formatEnclosedTvarSet
    : TermFormat.format * TermFormat.format * TermFormat.format
      -> TvarSet.set -> TermFormat.format
  val formatWithType_conId : conId -> TermFormat.format
  val formatWithType_conInfo : conInfo -> TermFormat.format
  val formatWithType_conSpec : conSpec -> TermFormat.format
  val formatWithType_constant : constant -> TermFormat.format
  val formatWithType_dtyKind : dtyKind -> TermFormat.format
  val formatWithType_exnId : exnId -> TermFormat.format
  val formatWithType_exnInfo : exnInfo -> TermFormat.format
  val formatWithType_ffiArg : ffiArg -> TermFormat.format
  val formatWithType_ffiTy : ffiTy -> TermFormat.format
  val formatWithType_formals : formals -> TermFormat.format
  val formatWithType_icdecl : icdecl -> TermFormat.format
  val formatWithType_icexp : icexp -> TermFormat.format
  val formatWithType_icpat : icpat -> TermFormat.format
  val formatWithType_idstatus : idstatus -> TermFormat.format
  val formatWithType_kindedTvar : kindedTvar -> TermFormat.format
  val formatWithType_liftedTys : liftedTys -> TermFormat.format
  val formatWithType_oprimId : oprimId -> TermFormat.format
  val formatWithType_oprimInfo : oprimInfo -> TermFormat.format
  val formatWithType_overloadCase : overloadCase -> TermFormat.format
  val formatWithType_overloadInstance : overloadInstance -> TermFormat.format
  val formatWithType_path : path -> TermFormat.format
  val formatWithType_revealKey : revealKey -> TermFormat.format
  val formatWithType_scopedTvars : scopedTvars -> TermFormat.format
  val formatWithType_tfun : tfun -> TermFormat.format
  val formatWithType_tfunkind : tfunkind -> TermFormat.format
  val formatWithType_tvar : tvar -> TermFormat.format
  val formatWithType_tvarId : tvarId -> TermFormat.format
  val formatWithType_tvarKind : tvarKind -> TermFormat.format
  val formatWithType_ty : ty -> TermFormat.format
  val formatWithType_tycast : tycast -> TermFormat.format
  val formatWithType_typId : typId -> TermFormat.format
  val formatWithType_typInfo : typInfo -> TermFormat.format
  val formatWithType_varE : varE -> TermFormat.format
  val formatWithType_varId : varId -> TermFormat.format
  val formatWithType_varInfo : varInfo -> TermFormat.format
  val format_conId : conId -> TermFormat.format
  val format_conInfo : conInfo -> TermFormat.format
  val format_conSpec : conSpec -> TermFormat.format
  val format_constant : constant -> TermFormat.format
  val format_dtyKind : dtyKind -> TermFormat.format
  val format_exnId : exnId -> TermFormat.format
  val format_exnInfo : exnInfo -> TermFormat.format
  val format_ffiArg : ffiArg -> TermFormat.format
  val format_ffiTy : ffiTy -> TermFormat.format
  val format_formals : formals -> TermFormat.format
  val format_icdecl : icdecl -> TermFormat.format
  val format_icexp : icexp -> TermFormat.format
  val format_icpat : icpat -> TermFormat.format
  val format_idstatus : idstatus -> TermFormat.format
  val format_kindedTvar : kindedTvar -> TermFormat.format
  val format_liftedTys : liftedTys -> TermFormat.format
  val format_oprimId : oprimId -> TermFormat.format
  val format_oprimInfo : oprimInfo -> TermFormat.format
  val format_overloadCase : overloadCase -> TermFormat.format
  val format_overloadInstance : overloadInstance -> TermFormat.format
  val format_path : path -> TermFormat.format
  val format_revealKey : revealKey -> TermFormat.format
  val format_scopedTvars : scopedTvars -> TermFormat.format
  val format_tfun : tfun -> TermFormat.format
  val format_tfunkind : tfunkind -> TermFormat.format
  val format_tvar : tvar -> TermFormat.format
  val format_tvarId : tvarId -> TermFormat.format
  val format_tvarKind : tvarKind -> TermFormat.format
  val format_ty : ty -> TermFormat.format
  val format_tycast : tycast -> TermFormat.format
  val format_typId : typId -> TermFormat.format
  val format_typInfo : typInfo -> TermFormat.format
  val format_varE : varE -> TermFormat.format
  val format_varId : varId -> TermFormat.format
  val format_varInfo : varInfo -> TermFormat.format
  val getLeftLocExp : icexp -> Loc.pos
  val getLeftLocPat : icpat -> Loc.pos
  val getLocDec : icdecl -> Loc.loc
  val getLocExp : icexp -> Loc.loc
  val getLocPat : icpat -> Loc.loc
  val getRightLocExp :icexp -> Loc.pos
  val getRightLocPat : icpat -> Loc.pos
  val getRuleLocM : {args:icpat list, body:icexp} list -> Loc.loc
  val incVersion: int option -> int option
  val liftedTysSingleton : TvarSet.item -> liftedTys
  val liftedTysToTy : liftedTys -> ty list
  val liftedTysToTyvars : liftedTys -> TvarSet.item list
  val liftedTysUnion : liftedTys * liftedTys -> TvarSet.set
  val mkTfv : tfunkind -> tfunkind ref
  val newICVar : unit -> varInfo
  val print_conId : conId -> TermFormat.format
  val print_exnId : exnId -> TermFormat.format
  val print_oprimId : oprimId -> TermFormat.format
  val print_constant : constant -> TermFormat.format
  val print_formals : formals -> TermFormat.format
  val print_liftedTys : liftedTys -> TermFormat.format
  val print_path : path -> TermFormat.format
  val print_oprimInfo : oprimInfo -> TermFormat.format
  val print_revealKey : revealKey -> TermFormat.format
  val print_tvar : tvar -> TermFormat.format
  val print_tvarId : tvarId -> TermFormat.format
  val print_varId : varId -> TermFormat.format
  val print_typId : typId -> TermFormat.format
  val print_varInfo : varInfo -> TermFormat.format

  val print_conInfo : TermFormat.format * TermFormat.format -> conInfo -> TermFormat.format
  val print_conSpec : TermFormat.format * TermFormat.format -> conSpec -> TermFormat.format
  val print_dtyKind : TermFormat.format * TermFormat.format -> dtyKind -> TermFormat.format
  val print_exnInfo : TermFormat.format * TermFormat.format -> exnInfo -> TermFormat.format
  val print_ffiArg : TermFormat.format * TermFormat.format -> ffiArg -> TermFormat.format
  val print_ffiTy : TermFormat.format * TermFormat.format -> ffiTy -> TermFormat.format
  val print_icdecl : TermFormat.format * TermFormat.format -> icdecl -> TermFormat.format
  val print_icexp : TermFormat.format * TermFormat.format -> icexp -> TermFormat.format
  val print_icpat : TermFormat.format * TermFormat.format -> icpat -> TermFormat.format
  val print_idstatus : TermFormat.format * TermFormat.format -> idstatus -> TermFormat.format
  val print_kindedTvar : TermFormat.format * TermFormat.format -> kindedTvar -> TermFormat.format
  val print_overloadCase : TermFormat.format * TermFormat.format -> overloadCase -> TermFormat.format
  val print_overloadInstance : TermFormat.format * TermFormat.format -> overloadInstance -> TermFormat.format
  val print_scopedTvars : TermFormat.format * TermFormat.format -> scopedTvars -> TermFormat.format
  val print_tfun : TermFormat.format * TermFormat.format -> tfun -> TermFormat.format
  val print_tfunkind : TermFormat.format * TermFormat.format -> tfunkind -> TermFormat.format
  val print_tvarKind : TermFormat.format * TermFormat.format -> tvarKind -> TermFormat.format
  val print_ty : TermFormat.format * TermFormat.format -> ty -> TermFormat.format
  val print_tycast : TermFormat.format * TermFormat.format -> tycast -> TermFormat.format
  val print_typInfo : TermFormat.format * TermFormat.format -> typInfo -> TermFormat.format
  val print_varE : TermFormat.format * TermFormat.format -> varE -> TermFormat.format

  val pruneTfun : tfun -> tfun
  val runtimeTyOfIty : ty -> BuiltinType.ty option
  val setVersion : (string list * int option) -> string list
  val tfunArity : tfun -> int
  val tfunFormals : tfun -> formals
  val tfunId : tfun -> typId
  val tfunIseq : tfun -> bool
  val tfunLiftedTys : tfun -> liftedTys
  val tfunRuntimeTy : tfun -> BuiltinType.ty option
  val tfunkindId : tfunkind -> typId
  val tfvId : tfunkind ref -> typId
  val tvarIseq : tvar -> bool
end
