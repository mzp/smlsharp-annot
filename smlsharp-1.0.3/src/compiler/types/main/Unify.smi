_require "../../../basis.smi"
_require "../../../smlnj-lib/Util/lib-base.smi"
_require "../../../compiler-utils/env/main/SEnv.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"

_require "../../absyn/main/Absyn.ppg.smi"
_require "../../control/main/Control.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "IDCalc.ppg.smi"
_require "Types.ppg.smi"
_require "TypesUtils.smi"
_require "vars.smi"
_require "CheckEq.smi"

structure Unify =
  struct
    exception Unify
    exception EqRawTy
    val bug : string -> exn
    val occurres : OTSet.item -> Types.ty -> bool
    val occurresTyList : OTSet.item -> Types.ty list -> bool
    val occurresTyEqList : OTSet.item -> (Types.ty * Types.ty) list -> bool
    exception TyConId
    val tyConId : Types.ty -> IDCalc.typId
    val checkKind
        : Types.ty
          -> {eqKind:Absyn.eq, id:Types.freeTypeVarID,
              lambdaDepth:int, tvarKind:Types.tvarKind,
              utvarOpt:IDCalc.tvar option}
          -> (Types.ty * Types.ty) list
    val lubKind
        : Types.tvKind * Types.tvKind
          -> {eqKind:Absyn.eq, id:Types.freeTypeVarID,
              lambdaDepth:Types.lambdaDepth, tvarKind:Types.tvarKind,
              utvarOpt:IDCalc.tvar option}
             * (Types.ty * Types.ty) list
    val unifyTypeEquations : bool -> (Types.ty * Types.ty) list -> unit
    val unify : (Types.ty * Types.ty) list -> unit
    val patternUnify : (Types.ty * Types.ty) list -> unit

    exception NONEQ
    val eqTy : BoundTypeVarID.id BoundTypeVarID.Map.map
               -> Types.ty * Types.ty -> bool
    val eqTyList : BoundTypeVarID.id BoundTypeVarID.Map.map
                   -> Types.ty list * Types.ty list -> bool

  end
