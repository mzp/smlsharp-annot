_require "SMLSharpRuntime.smi"
_require "Time.smi"
_require "Int.smi"
_require "IntInf.smi"
_require "Word.smi"
_require "Word8Vector.smi"
_require "Word8VectorSlice.smi"
_require "Word8Array.smi"
_require "Byte.smi"

structure SMLSharpOSFileSys =
struct
  type file_desc = int
  datatype iodesc = IODesc of file_desc

  type dirstream (= boxed)
  val opendir : string -> dirstream
  val readdir : dirstream -> string option
  val rewinddir : dirstream -> unit
  val closedir : dirstream -> unit
  val chdir : string -> unit
  val getcwd : unit -> string
  val mkdir : string * int -> unit
  val rmdir : string -> unit
  val readlink : string -> string

  type stat (= boxed)
  val stat : string -> stat
  val lstat : string -> stat
  val fstat : file_desc -> stat
  structure ST =
  struct
    val isDir : stat -> bool
    val isLink : stat -> bool
    val isReg : stat -> bool
    val isChr : stat -> bool
    val isBlk : stat -> bool
    val isFIFO : stat -> bool
    val isSock : stat -> bool
    val size : stat -> Position.int
    val mtime : stat -> Time.time
    val ino : stat -> word
    val dev : stat -> word
  end
  val utime : string * {actime: Time.time, modtime: Time.time} option -> unit
  val unlink : string -> unit
  val rename : {old: string, new: string} -> unit

  datatype access_mode = A_READ | A_WRITE | A_EXEC
  val access : string * access_mode list -> bool
  val tmpName : unit -> string

  val stdin : file_desc
  val stdout : file_desc
  val stderr : file_desc
  type whence (= int)
  val SEEK_SET : whence
  val SEEK_CUR : whence
  val close : file_desc -> unit
  val openf : string * string -> file_desc
  val lseek : file_desc * Position.int * whence -> Position.int
  val readVec : file_desc * int -> Word8Vector.vector
  val readArr : file_desc * Word8ArraySlice.slice -> int
  val writeVec : file_desc * Word8VectorSlice.slice -> int
  val writeArr : file_desc * Word8ArraySlice.slice -> int
end
