_require "General.smi"
_require "Char.smi"
_require "List.smi"
_require "SMLSharpScanChar.smi"
_require "MONO_ARRAY.sig"
_require "MONO_VECTOR.sig"
_require "MONO_ARRAY_SLICE.sig"
_require "MONO_VECTOR_SLICE.sig"
_require "STRING.sig"
_require "SUBSTRING.sig"
_require "Word8Vector.smi"

structure Word8VectorSlice =
struct
  type elem = SMLSharp.Word8.word
  type vector = string
  type slice (= boxed)
  val length : slice -> int
  val sub : slice * int -> elem
  val full : vector -> slice
  val isEmpty : slice -> bool
  val concat : slice list -> vector
  val collate : (elem * elem -> order) -> slice * slice -> order
  val appi : (int * elem -> unit) -> slice -> unit
  val app : (elem -> unit) -> slice -> unit
  val foldli : (int * elem * 'b -> 'b) -> 'b -> slice -> 'b
  val foldr : (elem * 'b -> 'b) -> 'b -> slice -> 'b
  val foldl : (elem * 'b -> 'b) -> 'b -> slice -> 'b
  val foldri : (int * elem * 'b -> 'b) -> 'b -> slice -> 'b
  val slice : vector * int * int option -> slice
  val subslice : slice * int * int option -> slice
  val base : slice -> vector * int * int
  val vector : slice -> vector
  val getItem : slice -> (elem * slice) option
  val mapi : (int * elem -> elem) -> slice -> vector
  val map : (elem -> elem) -> slice -> vector
  val findi : (int * elem -> bool) -> slice -> (int * elem) option
  val find : (elem -> bool) -> slice -> elem option
  val exists : (elem -> bool) -> slice -> bool
  val all : (elem -> bool) -> slice -> bool
end
