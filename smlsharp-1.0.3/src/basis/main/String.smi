_require "General.smi"
_require "Char.smi"
_require "List.smi"
_require "SMLSharpScanChar.smi"
_require "MONO_ARRAY.sig"
_require "MONO_VECTOR.sig"
_require "MONO_ARRAY_SLICE.sig"
_require "MONO_VECTOR_SLICE.sig"
_require "STRING.sig"
_require "SUBSTRING.sig"
_require "StringBase.smi"
_require "CharVectorSlice.smi"


structure String =
struct
  type string = string
  type char = SMLSharp.Char.char
  val maxSize : int
  val sub = StringBase.sub
  val map = StringBase.map
  val concat = StringBase.concat
  val size = SMLSharp.PrimString.size
  val implode = StringBase.fromList
  val collate = StringBase.collate

  val extract : string * int * int option -> string
  val substring : string * int * int -> string
  val ^ : string * string -> string
  val concatWith : string -> string list -> string
  val str : char -> string
  val explode : string -> char list
  val translate : (char -> string) -> string -> string
  val tokens : (char -> bool) -> string -> string list
  val fields : (char -> bool) -> string -> string list
  val isPrefix : string -> string -> bool
  val isSubstring : string -> string -> bool
  val isSuffix : string -> string -> bool
  val compare : string * string -> order
  val < : string * string -> bool
  val <= : string * string -> bool
  val > : string * string -> bool
  val >= : string * string -> bool
  val toString : string -> string
  val toCString : string -> string
  val scan : (char, 'a) StringCvt.reader -> (string, 'a) StringCvt.reader
  val fromString : string -> string option
  val fromCString : string -> string option
end

(* toplevel *)
infix 6 ^
val ^ = String.^
val concat = String.concat
val explode = String.explode
val implode = String.implode
val size = String.size
val str = String.str
val substring = String.substring
