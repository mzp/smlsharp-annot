_require "SMLSharpRuntime.smi"
_require "General.smi"
_require "StringCvt.smi"
_require "Int.smi"
_require "IntInf.smi"
_require "String.smi"
_require "IEEEReal.smi"
_require "MATH.sig"
_require "RealClass.smi"
_require "Real.smi"

structure Real32 =
struct
  type real = SMLSharp.Real32.real
  structure Math =
  struct
    type real = real
    val pi : real
    val e : real
    val sqrt : real -> real
    val sin : real -> real
    val cos : real -> real
    val tan : real -> real
    val asin : real -> real
    val acos : real -> real
    val atan : real -> real
    val atan2 : real * real -> real
    val exp : real -> real
    val pow : real * real -> real
    val ln : real -> real
    val log10 : real -> real
    val sinh : real -> real
    val cosh : real -> real
    val tanh : real -> real
  end
  val radix : int
  val precision : int
  val maxFinite : real
  val minPos : real
  val minNormalPos : real
  val posInf : real
  val negInf : real
  val + = SMLSharp.Real32.add
  val - = SMLSharp.Real32.sub
  val * = SMLSharp.Real32.mul
  val / = SMLSharp.Real32.div
  val rem = SMLSharp.Real32.rem
  val *+ : real * real * real -> real
  val *- : real * real * real -> real
  val ~ = SMLSharp.Real32.neg
  val abs = SMLSharp.Real32.abs
  val sign : real -> int
  val signBit : real -> bool
  val sameSign : real * real -> bool
  val copySign : real * real -> real
  val compareReal : real * real -> IEEEReal.real_order
  val compare : real * real -> order
  val < = SMLSharp.Real32.lt
  val <= = SMLSharp.Real32.lteq
  val > = SMLSharp.Real32.gt
  val >= = SMLSharp.Real32.gteq
  val == = SMLSharp.Real32.equal
  val != : real * real -> bool
  val ?= : real * real -> bool
  val isFinite : real -> bool
  val isNan : real -> bool
  val unordered : real * real -> bool
  val isNormal : real -> bool
  val class : real -> IEEEReal.float_class
  val min : real * real -> real
  val max : real * real -> real
  val toManExp : real -> {man : real, exp : int}
  val fromManExp : {man : real, exp : int} -> real
  val split : real -> {whole : real, frac : real}
  val realMod : real -> real
  val nextAfter : real * real -> real
  val checkFloat : real -> real
  val realFloor : real -> real
  val realCeil : real -> real
  val realRound : real -> real
  val realTrunc : real -> real
  val floor : real -> int
  val ceil : real -> int
  val round : real -> int
  val trunc : real -> int
  val toInt : IEEEReal.rounding_mode -> real -> int
  val toLargeInt : IEEEReal.rounding_mode -> real -> LargeInt.int
  val fromInt : int -> real
  val fromLargeInt : LargeInt.int -> real
  val toLarge : real -> LargeReal.real
  val fromLarge : IEEEReal.rounding_mode -> LargeReal.real -> real
  val fmt : StringCvt.realfmt -> real -> string
  val toString : real -> string
  val scan : (char, 'a) StringCvt.reader -> (real, 'a) StringCvt.reader
  val fromString : string -> real option
  val toDecimal : real -> IEEEReal.decimal_approx
  val fromDecimal : IEEEReal.decimal_approx -> real option
end
