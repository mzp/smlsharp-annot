_require "General.smi"
_require "StringCvt.smi"
_require "Char.smi"
_require "String.smi"
_require "Substring.smi"
_require "CharArray.smi"
_require "CharVector.smi"
_require "CharVectorSlice.smi"
_require "TEXT.sig"

structure Text =
struct

  structure Char =
  struct
    type char = char
    type string = String.string
    val minChar : char
    val maxChar : char
    val maxOrd : int
    val ord : char -> int
    val chr : int -> char
    val succ : char -> char
    val pred : char -> char
    val compare : char * char -> order
    val <  : char * char -> bool
    val <= : char * char -> bool
    val >  : char * char -> bool
    val >= : char * char -> bool
    val contains : string -> char -> bool
    val notContains : string -> char -> bool
    val isAscii : char -> bool
    val toLower : char -> char
    val toUpper : char -> char
    val isAlpha : char -> bool
    val isAlphaNum : char -> bool
    val isCntrl : char -> bool
    val isDigit : char -> bool
    val isGraph : char -> bool
    val isHexDigit : char -> bool
    val isLower : char -> bool
    val isPrint : char -> bool
    val isSpace : char -> bool
    val isPunct : char -> bool
    val isUpper : char -> bool
    val toString : char -> string
    val scan : (Char.char, 'a) StringCvt.reader -> (char, 'a) StringCvt.reader
    val fromString : string -> char option
    val toCString : char -> string
    val fromCString : string -> char option
  end

  structure String =
  struct
    type string = String.string
    type char = char
    val maxSize : int
    val size : string -> int
    val sub : string * int -> char
    val extract : string * int * int option -> string
    val substring : string * int * int -> string
    val ^ : string * string -> string
    val concat : string list -> string
    val concatWith : string -> string list -> string
    val str : char -> string
    val implode : char list -> string
    val explode : string -> char list
    val map : (char -> char) -> string -> string
    val translate : (char -> string) -> string -> string
    val tokens : (char -> bool) -> string -> string list
    val fields : (char -> bool) -> string -> string list
    val isPrefix : string -> string -> bool
    val isSubstring : string -> string -> bool
    val isSuffix : string -> string -> bool
    val compare : string * string -> order
    val collate : (char * char -> order) -> string * string -> order
    val < : string * string -> bool
    val <= : string * string -> bool
    val > : string * string -> bool
    val >= : string * string -> bool
    val toString : string -> String.string
    val scan : (char, 'a) StringCvt.reader -> (string, 'a) StringCvt.reader
    val fromString : String.string -> string option
    val toCString : string -> String.string
    val fromCString : String.string -> string option
  end

  structure Substring =
  struct
    type substring = Substring.substring
    type char = char
    type string = String.string
    val sub : substring * int -> char
    val size : substring -> int
    val base : substring -> string * int * int
    val extract : string * int * int option -> substring
    val substring : string * int * int -> substring
    val full : string -> substring
    val string : substring -> string
    val isEmpty : substring -> bool
    val getc : substring -> (char * substring) option
    val first : substring -> char option
    val triml : int -> substring -> substring
    val trimr : int -> substring -> substring
    val slice : substring * int * int option -> substring
    val concat : substring list -> string
    val concatWith : string -> substring list -> string
    val explode : substring -> char list
    val isPrefix : string -> substring -> bool
    val isSubstring : string -> substring -> bool
    val isSuffix : string -> substring -> bool
    val compare : substring * substring -> order
    val collate : (char * char -> order) -> substring * substring -> order
    val splitl : (char -> bool) -> substring -> substring * substring
    val splitr : (char -> bool) -> substring -> substring * substring
    val splitAt : substring * int -> substring * substring
    val dropl : (char -> bool) -> substring -> substring
    val dropr : (char -> bool) -> substring -> substring
    val takel : (char -> bool) -> substring -> substring
    val taker : (char -> bool) -> substring -> substring
    val position : string -> substring -> substring * substring
    val span : substring * substring -> substring
    val translate : (char -> string) -> substring -> string
    val tokens : (char -> bool) -> substring -> substring list
    val fields : (char -> bool) -> substring -> substring list
    val app : (char -> unit) -> substring -> unit
    val foldl : (char * 'a -> 'a) -> 'a -> substring -> 'a
    val foldr : (char * 'a -> 'a) -> 'a -> substring -> 'a
  end

  structure CharVector =
  struct
    type vector = String.string
    type elem = char
    val maxLen : int
    val fromList : elem list -> vector
    val tabulate : int * (int -> elem) -> vector
    val length : vector -> int
    val sub : vector * int -> elem
    val update : vector * int * elem -> vector
    val concat : vector list -> vector
    val appi : (int * elem -> unit) -> vector -> unit
    val app : (elem -> unit) -> vector -> unit
    val mapi : (int * elem -> elem) -> vector -> vector
    val map : (elem -> elem) -> vector -> vector
    val foldli : (int * elem * 'a -> 'a) -> 'a -> vector -> 'a
    val foldri : (int * elem * 'a -> 'a) -> 'a -> vector -> 'a
    val foldl : (elem * 'a -> 'a) -> 'a -> vector -> 'a
    val foldr : (elem * 'a -> 'a) -> 'a -> vector -> 'a
    val findi : (int * elem -> bool) -> vector -> (int * elem) option
    val find : (elem -> bool) -> vector -> elem option
    val exists : (elem -> bool) -> vector -> bool
    val all : (elem -> bool) -> vector -> bool
    val collate : (elem * elem -> order) -> vector * vector -> order
  end

  structure CharArray =
  struct
    type array = CharArray.array
    type elem = char
    type vector = CharVector.vector
    val maxLen : int
    val array : int * elem -> array
    val fromList : elem list -> array
    val tabulate : int * (int -> elem) -> array
    val length : array -> int
    val sub : array * int -> elem
    val update : array * int * elem -> unit
    val vector : array -> vector
    val copy : {src : array, dst : array, di : int} -> unit
    val copyVec : {src : vector, dst : array, di : int} -> unit
    val appi : (int * elem -> unit) -> array -> unit
    val app : (elem -> unit) -> array -> unit
    val modifyi : (int * elem -> elem) -> array -> unit
    val modify : (elem -> elem) -> array -> unit
    val foldli : (int * elem * 'b -> 'b) -> 'b -> array -> 'b
    val foldri : (int * elem * 'b -> 'b) -> 'b -> array -> 'b
    val foldl : (elem * 'b -> 'b) -> 'b -> array -> 'b
    val foldr : (elem * 'b -> 'b) -> 'b -> array -> 'b
    val findi : (int * elem -> bool) -> array -> (int * elem) option
    val find : (elem -> bool) -> array -> elem option
    val exists : (elem -> bool) -> array -> bool
    val all : (elem -> bool) -> array -> bool
    val collate : (elem * elem -> order) -> array * array -> order
  end

  structure CharVectorSlice =
  struct
    type elem = char
    type vector = CharVector.vector
    type slice = CharVectorSlice.slice
    val length : slice -> int
    val sub : slice * int -> elem
    val full : vector -> slice
    val slice : vector * int * int option -> slice
    val subslice : slice * int * int option -> slice
    val base : slice -> vector * int * int
    val vector : slice -> vector
    val concat : slice list -> vector
    val isEmpty : slice -> bool
    val getItem : slice -> (elem * slice) option
    val appi : (int * elem -> unit) -> slice -> unit
    val app : (elem -> unit) -> slice -> unit
    val mapi : (int * elem -> elem) -> slice -> vector
    val map : (elem -> elem) -> slice -> vector
    val foldli : (int * elem * 'b -> 'b) -> 'b -> slice -> 'b
    val foldr : (elem * 'b -> 'b) -> 'b -> slice -> 'b
    val foldl : (elem * 'b -> 'b) -> 'b -> slice -> 'b
    val foldri : (int * elem * 'b -> 'b) -> 'b -> slice -> 'b
    val findi : (int * elem -> bool) -> slice -> (int * elem) option
    val find : (elem -> bool) -> slice -> elem option
    val exists : (elem -> bool) -> slice -> bool
    val all : (elem -> bool) -> slice -> bool
    val collate : (elem * elem -> order) -> slice * slice -> order
  end

  structure CharArraySlice =
  struct
    type elem = char
    type array = CharArray.array
    type slice = CharArraySlice.slice
    type vector = CharVector.vector
    type vector_slice = CharVectorSlice.slice
    val length : slice -> int
    val sub : slice * int -> elem
    val update : slice * int * elem -> unit
    val full : array -> slice
    val slice : array * int * int option -> slice
    val subslice : slice * int * int option -> slice
    val base : slice -> array * int * int
    val vector : slice -> vector
    val copy : {src : slice, dst : array, di : int} -> unit
    val copyVec : {src : vector_slice, dst : array, di : int} -> unit
    val isEmpty : slice -> bool
    val getItem : slice -> (elem * slice) option
    val appi : (int * elem -> unit) -> slice -> unit
    val app : (elem -> unit) -> slice -> unit
    val modifyi : (int * elem -> elem) -> slice -> unit
    val modify : (elem -> elem) -> slice -> unit
    val foldli : (int * elem * 'b -> 'b) -> 'b -> slice -> 'b
    val foldr : (elem * 'b -> 'b) -> 'b -> slice -> 'b
    val foldl : (elem * 'b -> 'b) -> 'b -> slice -> 'b
    val foldri : (int * elem * 'b -> 'b) -> 'b -> slice -> 'b
    val findi : (int * elem -> bool) -> slice -> (int * elem) option
    val find : (elem -> bool) -> slice -> elem option
    val exists : (elem -> bool) -> slice -> bool
    val all : (elem -> bool) -> slice -> bool
    val collate : (elem * elem -> order) -> slice * slice -> order
  end

end
