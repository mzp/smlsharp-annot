_require "General.smi"
_require "StringCvt.smi"
_require "SMLSharpScanChar.smi"
_require "IntInf.smi"
_require "Int.smi"
_require "String.smi"

structure Word =
struct
  type word = SMLSharp.Word.word
  val wordSize : int
  val toLarge : word -> word
  val toLargeX : word -> word
  val toLargeWord : word -> word
  val toLargeWordX : word -> word
  val fromLarge : word -> word
  val fromLargeWord : word -> word
  val toLargeInt : word -> IntInf.int
  val toLargeIntX : word -> IntInf.int
  val fromLargeInt : IntInf.int -> word
  val toInt : word -> int

  val toIntX = SMLSharp.Word.toIntX
  val fromInt = SMLSharp.Word.fromInt
  val andb = SMLSharp.Word.andb
  val orb = SMLSharp.Word.orb
  val xorb = SMLSharp.Word.xorb
  val notb = SMLSharp.Word.notb
  val << = SMLSharp.Word.lshift
  val >> = SMLSharp.Word.rshift
  val ~>> = SMLSharp.Word.arshift
  val + = SMLSharp.Word.add
  val - = SMLSharp.Word.sub
  val * = SMLSharp.Word.mul
  val div = SMLSharp.Word.div
  val mod = SMLSharp.Word.mod
  val < = SMLSharp.Word.lt
  val <= = SMLSharp.Word.lteq
  val > = SMLSharp.Word.gt
  val >= = SMLSharp.Word.gteq
  val ~ = SMLSharp.Word.neg

  val compare : word * word -> order
  val min : word * word -> word
  val max : word * word -> word
  val fmt : StringCvt.radix -> word -> string
  val scan : StringCvt.radix
             -> (char, 'a) StringCvt.reader
             -> (word, 'a) StringCvt.reader
  val toString : word -> string
  val fromString : string -> word option
end

structure LargeWord = Word
structure Word32 = Word
