_require "../../basis/main/Int.smi"
_require "../../basis/main/IntInf.smi"
_require "../../basis/main/Word8.smi"
_require "../../basis/main/Real32.smi"
_require "../../basis/main/List.smi"
_require "../../basis/main/String.smi"
_require "../../basis/main/Array.smi"
_require "../../basis/main/binary-op.smi"
_require "../../basis/main/TextIO.smi"
_require "TermPrintUtils.ppg.smi"
_require "../../smlformat-lib.smi"
_require "../../compiler-utils/env/main/LabelEnv.smi"

structure ReifiedTerm =
struct
  type path = string list
  val format_path : string list -> SMLFormat.FormatExpression.expression list
  datatype reifiedTerm
    = ARRAYtyRep of reifiedTerm * (int -> reifiedTerm list * bool)
    | CHARtyRep of char
    | CONSTRUCTtyRep of string
    | EXNtyRep
    | FUNtyRep
    | INTINFtyRep of IntInf.int
    | INTtyRep of int
    | BOOLtyRep of bool
    | LISTtyRep of reifiedTerm list
    | PTRtyRep
    | REAL32tyRep of Real32.real
    | REALtyRep of real
    | RECORDtyRep of (string * reifiedTerm) list
    | TUPLEtyRep of reifiedTerm list
    | STRINGtyRep of string
    | UNITtyRep
    | UNPRINTABLERep
    | BUILTINRep
    | WORD8tyRep of Word8.word
    | WORDtyRep of word
  val format_reifiedTerm 
    : reifiedTerm -> SMLFormat.FormatExpression.expression list
  val makeArrayTerm 
    : ('a -> reifiedTerm) -> 'a array -> reifiedTerm
  val makeListTerm 
    : ('a -> reifiedTerm) -> 'a list -> reifiedTerm
  val makeTupleTerm 
    : ('a -> reifiedTerm) -> 'a list -> reifiedTerm
  val makeConsTerm 
    : reifiedTerm -> reifiedTerm list -> reifiedTerm list
  val makeFieldTerm 
    : string -> reifiedTerm -> string * reifiedTerm
  val makeConsField
    : string * reifiedTerm -> (string * reifiedTerm) list -> (string * reifiedTerm) list
  val fieldNil :  (string * reifiedTerm) list
  val reifiedTermNil : reifiedTerm list
  datatype idstatus
    = EXEXN of {name:string, ty:string option}
    | EXEXNREP of {name:string, path:string}
    | EXVAR of {name:string, term:reifiedTerm, ty:string}
  val format_idstatus 
    : idstatus -> SMLFormat.FormatExpression.expression list
  val makeEXVAR 
    : string -> reifiedTerm -> string -> idstatus
  val makeEXEXN : string -> string -> idstatus
  val makeEXEXNREP : string -> string -> idstatus
  type tstr = string * string
  val format_tstr : string * string -> SMLFormat.FormatExpression.expression list
  val makeTstr : string -> string -> string * string
  type varE = idstatus list
  val format_varE 
    : idstatus list -> SMLFormat.FormatExpression.expression list
  val idstatusNil : idstatus list
  val idstatusCons 
    : idstatus -> idstatus list -> idstatus list
  type tyE = tstr list
  val format_tyE : (string * string) list -> SMLFormat.FormatExpression.expression list
  val tstrNil : tstr list
  val tstrCons : tstr -> tstr list -> tstr list
  datatype env
    = ENV of {strE:(string * env) list, tyE:tyE, varE:varE}
  type strentry = string * env
  val format_env : env -> SMLFormat.FormatExpression.expression list
  val format_strentry : strentry -> SMLFormat.FormatExpression.expression list
  val makeENV : varE -> tyE -> (strentry list) -> env
  val makeStrentry : string -> env -> string * env
  val strentryNil : strentry list
  val strentryCons : strentry -> strentry list -> strentry list
  type funE = string list
  val format_funE : string list -> SMLFormat.FormatExpression.expression list
  val stringNil : string list
  val stringCons : string -> string list -> string list
  type sigentry = string * string
  val format_sigentry
    : string * string -> SMLFormat.FormatExpression.expression list
  type sigE = sigentry list
  val format_sigE 
    : (string * string) list -> SMLFormat.FormatExpression.expression list
  val makeSigentry : string -> string -> string * string
  val sigentryNil : sigentry list
  val sigentryCons : sigentry -> sigentry list -> sigentry list
  type topEnv = {Env:env, FunE:funE, SigE:string}
  val format_topEnv 
    : topEnv -> SMLFormat.FormatExpression.expression list
  val makeReifiedTopenv 
    : env -> funE -> string -> {Env:env, FunE:funE, SigE:string}
  val printTopEnv : topEnv -> unit
end
