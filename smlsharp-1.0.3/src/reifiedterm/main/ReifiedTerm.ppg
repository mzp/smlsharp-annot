(**
 * @copyright (c) 2012- Tohoku University.
 * @author Atsushi Ohori
 *)
structure ReifiedTerm =
struct

  (*% *)
  type path =
    (*%
       @format(name names)  names(name)(".")
     *)
    string list

  (*%
     @formatter(int) TermPrintUtils.format_int
     @formatter(string) TermPrintUtils.format_string
     @formatter(label) TermPrintUtils.format_label
     @formatter(real) TermPrintUtils.format_real
     @formatter(char) TermPrintUtils.format_char
     @formatter(Word8.word) TermPrintUtils.format_word8
     @formatter(Real32.real) TermPrintUtils.format_real32
     @formatter(LabelEnv.map) TermPrintUtils.formatLmap
     @formatter(list) TermPrintUtils.formatElements
     @formatter(lazyArray) TermPrintUtils.format_lazyArray
     @formatter(IntInf.int) TermPrintUtils.format_IntInf
   *)
  datatype reifiedTerm
    = (*%
         @format(int) int
       *)
      INTtyRep of int
    | (*%
         @format(int) int
       *)
      INTINFtyRep of IntInf.int
    | (*%
         @format(bool) bool
       *)
      BOOLtyRep of bool
    | (*%
         @format(word) word
       *)
      WORDtyRep of word
    | (*%
         @format(word) word
       *)
      WORD8tyRep of Word8.word
    | (*%
         @format(char) char
       *)
      CHARtyRep of char
    | (*%
         @format(string) string
       *)
      STRINGtyRep of string
    | (*%
         @format(real) real
       *)
      REALtyRep of real
    | (*%
         @format(real) real
       *)
      REAL32tyRep of Real32.real
    | (*%
         @format "()"
       *)
      UNITtyRep 
    | (*%
         @format "fn"
       *)
      FUNtyRep
    | (*%
         @format(field terms)
         {
           "{"
              2[1 terms(field)(","+1)]
            1
           "}"
         }
         @format:field(name:label * term) 
           { name + "=" + term }
       *)
      RECORDtyRep of (string * reifiedTerm) list
    | (*%
         @format(field terms)
          {
           "("
             { 2[1 terms(field)(","+1)] }
           1
           ")"
          }
       *)
      TUPLEtyRep of reifiedTerm list
    | (*%
         @format(term terms)
          {
           "["
              2[1 terms(term)(","+1)]
            1
           "]"
          }
       *)
      LISTtyRep of reifiedTerm list
    | (*%
         @format(term * lazyArray:lazyArray)
          {
           "<"
             2[1 lazyArray(term)(","+1)]
           1
           ">"
          }
       *)
      ARRAYtyRep of reifiedTerm * (int -> reifiedTerm list * bool)
    | (*%
         @format "exn"
       *)
      EXNtyRep
    | (*%
         @format "ptr"
       *)
      PTRtyRep
    | (*%
         @format(string)
            "_"
       *)
      CONSTRUCTtyRep of string
    | (*%
         @format "_"
       *)
      UNPRINTABLERep 
    | (*%
         @format "<builtin>"
       *)
      BUILTINRep

  fun makeArrayTerm (reifyFun:'a -> reifiedTerm) (array:'a array) =
      let
        val dummyTerm = UNPRINTABLERep
        fun makeTerm (max:int) =
            let
              fun take i j = if i = j then nil
                             else Array.sub(array, i) :: take (i + 1) j
              val size = Array.length array
              val (ellipsis, max) = if max > size then (false, size) else (true, max)
              val list = take 0 max
              val list = map reifyFun list
            in
              (list, ellipsis)
            end
      in
        ARRAYtyRep (dummyTerm, makeTerm)
      end

  fun makeListTerm (reifyFun:'a -> reifiedTerm) (list:'a list) =
      LISTtyRep (map reifyFun list)

  fun makeRecordTerm (reifyFun: (string * 'a) -> string * reifiedTerm) (list:(string * 'a) list) =
      RECORDtyRep (map reifyFun list)

  fun makeTupleTerm (reifyFun:'a -> reifiedTerm) (list:'a list) =
      TUPLEtyRep (map reifyFun list)


  fun makeFieldTerm (label:string) (field:reifiedTerm) = (label, field)
  fun makeConsField (h:string*reifiedTerm) (t:(string*reifiedTerm) list) = h::t
  val fieldNil = (nil:(string*reifiedTerm) list)

  fun makeConsTerm (h:reifiedTerm)  (t: reifiedTerm list) = h::t
  val reifiedTermNil = (nil:reifiedTerm list)

  fun ifMultilines (nl, sp) s =
      if List.length (String.fields (fn x => x = #"\n") s) > 1 
         orelse String.size s > 60
      then nl
      else sp

  (*%
     @formatter(option) TermPrintUtils.formatPrependedOpt
     @formatter(makeLines) TermPrintUtils.makeLines
     @formatter(ifMultilines) ifMultilines
   *)
  datatype idstatus 
    = (*%
         @format({name, term, ty})
          {2[ "val" + name + "=" + term ty:ifMultilines()(\n,+) ":" + {ty:makeLines} ] }
       *)
      EXVAR of {name:string, term:reifiedTerm, ty:string}
    | (*%
         @format({name, ty:ty opt})
          {"exception" + name opt(ty:makeLines)(+"of"+)}
       *)
      EXEXN of {name:string, ty:string option}
    | (*%
         @format({name, path})
           {"exception" + name + "=" + path}
       *)
      EXEXNREP of {name:string, path:string}

  fun makeEXVAR (name:string) (term:reifiedTerm) (ty:string) =
      EXVAR {name=name, term=term, ty=ty}

  fun makeEXEXN (name:string) (ty:string) =
      let
        val tyOpt = case ty of "" => NONE | _ => SOME ty
      in
        EXEXN {name=name, ty=tyOpt}
      end

  fun makeEXEXNREP (name:string) (path:string) =
      EXEXNREP {name=name, path=path}

  (*% 
      @formatter(makeLines) TermPrintUtils.makeLines
   *)
  type tstr 
    = (*%
         @format(name * def:makeLines) 
          def
       *)  
      string * string

  fun makeTstr (name:string) (def:string) =
      (name, def)

  (*%
     @formatter(ifCons) TermPrintUtils.formatIfCons
  *)
  type varE
    = (*%
         @format(var vars) 
           vars(var)(\n)
       *)
      idstatus list

  val idstatusNil = (nil:idstatus list)
  fun idstatusCons (h:idstatus) (t:idstatus list) = 
      h :: t

  (*%
  *)
  type tyE
    = (*%
         @format(ty tys) 
           tys(ty)(\n)
       *)
      tstr list

  val tstrNil = (nil:tstr list)
  fun tstrCons (h:tstr) (t:tstr list) = h :: t

  fun ifNonEmptyTyEVarE (varE,exp) tyE =
      if null(tyE) orelse null(varE) then nil
      else exp
  fun ifNonEmptyTyEVarEStrE (varE,tyE,exp) strs =
      if null(strs) orelse null(varE) andalso null(tyE) then nil
      else exp

  fun ifNonEmptyEnv (env, exp) _ =
      if null(env) then nil
      else exp @ env

  (*%
     @formatter(ifCons) TermPrintUtils.formatIfCons
     @formatter(ifNonEmptyTyEVarE) ifNonEmptyTyEVarE
     @formatter(ifNonEmptyTyEVarEStrE) ifNonEmptyTyEVarEStrE
     @formatter(ifNonEmptyEnv) ifNonEmptyEnv
   *)
  datatype env 
    = (*%
         @format({varE, tyE, strE:str strs})
          tyE
          tyE:ifNonEmptyTyEVarE()(varE,\n)
          varE
          strs:ifNonEmptyTyEVarEStrE()(varE,tyE,\n)
          strs(str)(\n)
       *)
      ENV of {varE:varE, tyE:tyE, strE:strentry list}
  withtype strentry
   = (*%
         @format(name*env)
           "structure" + name + "="
          2[
           \n
           "struct"
             2[
               env:ifNonEmptyEnv()(env,\n)
              ]
           \n
           "end"
           ]
       *)
     string * env

  fun makeENV (varE:varE) (tyE:tyE) (strE:strentry list) =
      ENV{varE=varE, tyE=tyE, strE=strE}

  fun makeStrentry (name:string) (env:env) = (name, env)

  val strentryNil = (nil:strentry list)
  fun strentryCons (h:strentry) (t:strentry list) = 
      h :: t

  (*% 
     @formatter(ifCons) TermPrintUtils.formatIfCons
   *)
  type funE
    = (*%
         @format(functor functors) 
           functors(functor)(\n)
       *)
      string list

  val stringNil = (nil:string list)
  fun stringCons (h:string) (t:string list) = h :: t

  (*% *)
  type sigentry 
    = (*%
         @format(name * sige) 
         "signature" + name + "="
           2[
            \n
            "sig"
              2[sige]
            \n
            "end"
           ]
       *)
     string * string

  (*% 
     @formatter(ifCons) TermPrintUtils.formatIfCons
   *)
  type sigE
    = (*%
         @format(sigdef sigdefs) 
           sigdefs(sigdef)(\n)
       *)
      sigentry list

  fun makeSigentry (name:string) (sige:string) = (name, sige)

  val sigentryNil = (nil: sigentry list)
  fun sigentryCons (h:sigentry) (t:sigentry list) = h :: t

  fun printEnv (env,nl) string =
      if String.size string = 0 
      then if null(env) then nil
           else env @ nl
      else if null(env) then nl
      else nl @ env @ nl

  (*%
     @formatter(printEnv) printEnv
     @formatter(ifCons) TermPrintUtils.formatIfCons
   *)
  type topEnv 
    = (*%
         @format({Env, FunE, SigE}) 
           FunE
           FunE:ifCons()(\n)
           SigE
           SigE:printEnv()(Env,\n)
       *)
       {Env:env, FunE:funE, SigE:string}

  fun makeReifiedTopenv (env:env) (funE:funE) (sigE:string) =
       {Env=env, FunE=funE, SigE=sigE}

  fun printTopEnv topEnv = 
      print (TermPrintUtils.prettyPrint (format_topEnv topEnv))
end
